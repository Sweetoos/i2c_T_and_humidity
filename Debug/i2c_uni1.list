
i2c_uni1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005300  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08005490  08005490  00015490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005560  08005560  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08005560  08005560  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005560  08005560  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005560  08005560  00015560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005564  08005564  00015564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08005568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000270  2000006c  080055d4  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  080055d4  000202dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000caa8  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002112  00000000  00000000  0002cb87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a88  00000000  00000000  0002eca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000811  00000000  00000000  0002f728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c485  00000000  00000000  0002ff39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f238  00000000  00000000  0004c3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009ef20  00000000  00000000  0005b5f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000324c  00000000  00000000  000fa518  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  000fd764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005478 	.word	0x08005478

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08005478 	.word	0x08005478

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2iz>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d215      	bcs.n	8000a42 <__aeabi_d2iz+0x36>
 8000a16:	d511      	bpl.n	8000a3c <__aeabi_d2iz+0x30>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d912      	bls.n	8000a48 <__aeabi_d2iz+0x3c>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a32:	fa23 f002 	lsr.w	r0, r3, r2
 8000a36:	bf18      	it	ne
 8000a38:	4240      	negne	r0, r0
 8000a3a:	4770      	bx	lr
 8000a3c:	f04f 0000 	mov.w	r0, #0
 8000a40:	4770      	bx	lr
 8000a42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a46:	d105      	bne.n	8000a54 <__aeabi_d2iz+0x48>
 8000a48:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	bf08      	it	eq
 8000a4e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop

08000a5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	; 0x28
 8000a60:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 8000a6a:	605a      	str	r2, [r3, #4]
 8000a6c:	609a      	str	r2, [r3, #8]
 8000a6e:	60da      	str	r2, [r3, #12]
 8000a70:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a72:	4b2b      	ldr	r3, [pc, #172]	; (8000b20 <MX_GPIO_Init+0xc4>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	4a2a      	ldr	r2, [pc, #168]	; (8000b20 <MX_GPIO_Init+0xc4>)
 8000a78:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a7c:	6153      	str	r3, [r2, #20]
 8000a7e:	4b28      	ldr	r3, [pc, #160]	; (8000b20 <MX_GPIO_Init+0xc4>)
 8000a80:	695b      	ldr	r3, [r3, #20]
 8000a82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a8a:	4b25      	ldr	r3, [pc, #148]	; (8000b20 <MX_GPIO_Init+0xc4>)
 8000a8c:	695b      	ldr	r3, [r3, #20]
 8000a8e:	4a24      	ldr	r2, [pc, #144]	; (8000b20 <MX_GPIO_Init+0xc4>)
 8000a90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a94:	6153      	str	r3, [r2, #20]
 8000a96:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <MX_GPIO_Init+0xc4>)
 8000a98:	695b      	ldr	r3, [r3, #20]
 8000a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a9e:	60fb      	str	r3, [r7, #12]
 8000aa0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa2:	4b1f      	ldr	r3, [pc, #124]	; (8000b20 <MX_GPIO_Init+0xc4>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	4a1e      	ldr	r2, [pc, #120]	; (8000b20 <MX_GPIO_Init+0xc4>)
 8000aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000aac:	6153      	str	r3, [r2, #20]
 8000aae:	4b1c      	ldr	r3, [pc, #112]	; (8000b20 <MX_GPIO_Init+0xc4>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab6:	60bb      	str	r3, [r7, #8]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aba:	4b19      	ldr	r3, [pc, #100]	; (8000b20 <MX_GPIO_Init+0xc4>)
 8000abc:	695b      	ldr	r3, [r3, #20]
 8000abe:	4a18      	ldr	r2, [pc, #96]	; (8000b20 <MX_GPIO_Init+0xc4>)
 8000ac0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ac4:	6153      	str	r3, [r2, #20]
 8000ac6:	4b16      	ldr	r3, [pc, #88]	; (8000b20 <MX_GPIO_Init+0xc4>)
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad8:	4812      	ldr	r0, [pc, #72]	; (8000b24 <MX_GPIO_Init+0xc8>)
 8000ada:	f000 feeb 	bl	80018b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ade:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ae2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ae4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000ae8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000aee:	f107 0314 	add.w	r3, r7, #20
 8000af2:	4619      	mov	r1, r3
 8000af4:	480c      	ldr	r0, [pc, #48]	; (8000b28 <MX_GPIO_Init+0xcc>)
 8000af6:	f000 fd6b 	bl	80015d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000afa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b00:	2301      	movs	r3, #1
 8000b02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b0c:	f107 0314 	add.w	r3, r7, #20
 8000b10:	4619      	mov	r1, r3
 8000b12:	4804      	ldr	r0, [pc, #16]	; (8000b24 <MX_GPIO_Init+0xc8>)
 8000b14:	f000 fd5c 	bl	80015d0 <HAL_GPIO_Init>

}
 8000b18:	bf00      	nop
 8000b1a:	3728      	adds	r7, #40	; 0x28
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40021000 	.word	0x40021000
 8000b24:	48000400 	.word	0x48000400
 8000b28:	48000800 	.word	0x48000800

08000b2c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b30:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b32:	4a1c      	ldr	r2, [pc, #112]	; (8000ba4 <MX_I2C1_Init+0x78>)
 8000b34:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8000b36:	4b1a      	ldr	r3, [pc, #104]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b38:	f240 220b 	movw	r2, #523	; 0x20b
 8000b3c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b3e:	4b18      	ldr	r3, [pc, #96]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b44:	4b16      	ldr	r3, [pc, #88]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b46:	2201      	movs	r2, #1
 8000b48:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b50:	4b13      	ldr	r3, [pc, #76]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b56:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b5c:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b62:	4b0f      	ldr	r3, [pc, #60]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b68:	480d      	ldr	r0, [pc, #52]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b6a:	f000 febb 	bl	80018e4 <HAL_I2C_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b74:	f000 fa35 	bl	8000fe2 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4809      	ldr	r0, [pc, #36]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b7c:	f001 fc28 	bl	80023d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000b86:	f000 fa2c 	bl	8000fe2 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4804      	ldr	r0, [pc, #16]	; (8000ba0 <MX_I2C1_Init+0x74>)
 8000b8e:	f001 fc6a 	bl	8002466 <HAL_I2CEx_ConfigDigitalFilter>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000b98:	f000 fa23 	bl	8000fe2 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000088 	.word	0x20000088
 8000ba4:	40005400 	.word	0x40005400

08000ba8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b08a      	sub	sp, #40	; 0x28
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a17      	ldr	r2, [pc, #92]	; (8000c24 <HAL_I2C_MspInit+0x7c>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d128      	bne.n	8000c1c <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <HAL_I2C_MspInit+0x80>)
 8000bcc:	695b      	ldr	r3, [r3, #20]
 8000bce:	4a16      	ldr	r2, [pc, #88]	; (8000c28 <HAL_I2C_MspInit+0x80>)
 8000bd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd4:	6153      	str	r3, [r2, #20]
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <HAL_I2C_MspInit+0x80>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bde:	613b      	str	r3, [r7, #16]
 8000be0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000be2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000be6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be8:	2312      	movs	r3, #18
 8000bea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf8:	f107 0314 	add.w	r3, r7, #20
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	480b      	ldr	r0, [pc, #44]	; (8000c2c <HAL_I2C_MspInit+0x84>)
 8000c00:	f000 fce6 	bl	80015d0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <HAL_I2C_MspInit+0x80>)
 8000c06:	69db      	ldr	r3, [r3, #28]
 8000c08:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <HAL_I2C_MspInit+0x80>)
 8000c0a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c0e:	61d3      	str	r3, [r2, #28]
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_I2C_MspInit+0x80>)
 8000c12:	69db      	ldr	r3, [r3, #28]
 8000c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c18:	60fb      	str	r3, [r7, #12]
 8000c1a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	3728      	adds	r7, #40	; 0x28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40005400 	.word	0x40005400
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	48000400 	.word	0x48000400

08000c30 <_search>:
float temperatura=0;
uint8_t who_am;
uint8_t Settings = MASK_L | MASK_H;

void _search(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af04      	add	r7, sp, #16


	    // Wpisanie konfiguracji do rejestru
	    HAL_I2C_Mem_Write(&hi2c1, ADDRESS, CTRL_REG1, 1, &Settings, 1, 100);
 8000c36:	2364      	movs	r3, #100	; 0x64
 8000c38:	9302      	str	r3, [sp, #8]
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	9301      	str	r3, [sp, #4]
 8000c3e:	4b14      	ldr	r3, [pc, #80]	; (8000c90 <_search+0x60>)
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	2301      	movs	r3, #1
 8000c44:	2220      	movs	r2, #32
 8000c46:	21be      	movs	r1, #190	; 0xbe
 8000c48:	4812      	ldr	r0, [pc, #72]	; (8000c94 <_search+0x64>)
 8000c4a:	f000 fedb 	bl	8001a04 <HAL_I2C_Mem_Write>

	    printf("Wyszukiwanie ...\n");
 8000c4e:	4812      	ldr	r0, [pc, #72]	; (8000c98 <_search+0x68>)
 8000c50:	f003 fda8 	bl	80047a4 <puts>
	    HAL_I2C_Mem_Read(&hi2c1, ADDRESS, 0x0F, 1, &who_am, 1, 100);
 8000c54:	2364      	movs	r3, #100	; 0x64
 8000c56:	9302      	str	r3, [sp, #8]
 8000c58:	2301      	movs	r3, #1
 8000c5a:	9301      	str	r3, [sp, #4]
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <_search+0x6c>)
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	2301      	movs	r3, #1
 8000c62:	220f      	movs	r2, #15
 8000c64:	21be      	movs	r1, #190	; 0xbe
 8000c66:	480b      	ldr	r0, [pc, #44]	; (8000c94 <_search+0x64>)
 8000c68:	f000 ffe0 	bl	8001c2c <HAL_I2C_Mem_Read>

	    if (who_am == 0xBC) {
 8000c6c:	4b0b      	ldr	r3, [pc, #44]	; (8000c9c <_search+0x6c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2bbc      	cmp	r3, #188	; 0xbc
 8000c72:	d103      	bne.n	8000c7c <_search+0x4c>
	    	printf("Znaleziono czujnik HTS221\n");
 8000c74:	480a      	ldr	r0, [pc, #40]	; (8000ca0 <_search+0x70>)
 8000c76:	f003 fd95 	bl	80047a4 <puts>
	    }
	    else
	    {
	    	printf("Niepoprawna odpowiedz ukladu (0x%02X)\n", who_am);
	    }
}
 8000c7a:	e005      	b.n	8000c88 <_search+0x58>
	    	printf("Niepoprawna odpowiedz ukladu (0x%02X)\n", who_am);
 8000c7c:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <_search+0x6c>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	4808      	ldr	r0, [pc, #32]	; (8000ca4 <_search+0x74>)
 8000c84:	f003 fd28 	bl	80046d8 <iprintf>
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000088 	.word	0x20000088
 8000c98:	08005490 	.word	0x08005490
 8000c9c:	200000fc 	.word	0x200000fc
 8000ca0:	080054a4 	.word	0x080054a4
 8000ca4:	080054c0 	.word	0x080054c0

08000ca8 <_read>:

void _read(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, ADDRESS, T_OUT, 1, tData1, 2, 100);
 8000cae:	2364      	movs	r3, #100	; 0x64
 8000cb0:	9302      	str	r3, [sp, #8]
 8000cb2:	2302      	movs	r3, #2
 8000cb4:	9301      	str	r3, [sp, #4]
 8000cb6:	4b72      	ldr	r3, [pc, #456]	; (8000e80 <_read+0x1d8>)
 8000cb8:	9300      	str	r3, [sp, #0]
 8000cba:	2301      	movs	r3, #1
 8000cbc:	22aa      	movs	r2, #170	; 0xaa
 8000cbe:	21be      	movs	r1, #190	; 0xbe
 8000cc0:	4870      	ldr	r0, [pc, #448]	; (8000e84 <_read+0x1dc>)
 8000cc2:	f000 ffb3 	bl	8001c2c <HAL_I2C_Mem_Read>

		  	  HAL_I2C_Mem_Read(&hi2c1, ADDRESS, T0_degC_x8, 1, &tData20, 1, 100);
 8000cc6:	2364      	movs	r3, #100	; 0x64
 8000cc8:	9302      	str	r3, [sp, #8]
 8000cca:	2301      	movs	r3, #1
 8000ccc:	9301      	str	r3, [sp, #4]
 8000cce:	4b6e      	ldr	r3, [pc, #440]	; (8000e88 <_read+0x1e0>)
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	2232      	movs	r2, #50	; 0x32
 8000cd6:	21be      	movs	r1, #190	; 0xbe
 8000cd8:	486a      	ldr	r0, [pc, #424]	; (8000e84 <_read+0x1dc>)
 8000cda:	f000 ffa7 	bl	8001c2c <HAL_I2C_Mem_Read>
		  	  HAL_I2C_Mem_Read(&hi2c1, ADDRESS, T1_degC_x8, 1, &tData21, 1, 100);
 8000cde:	2364      	movs	r3, #100	; 0x64
 8000ce0:	9302      	str	r3, [sp, #8]
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	9301      	str	r3, [sp, #4]
 8000ce6:	4b69      	ldr	r3, [pc, #420]	; (8000e8c <_read+0x1e4>)
 8000ce8:	9300      	str	r3, [sp, #0]
 8000cea:	2301      	movs	r3, #1
 8000cec:	2233      	movs	r2, #51	; 0x33
 8000cee:	21be      	movs	r1, #190	; 0xbe
 8000cf0:	4864      	ldr	r0, [pc, #400]	; (8000e84 <_read+0x1dc>)
 8000cf2:	f000 ff9b 	bl	8001c2c <HAL_I2C_Mem_Read>
		  	  HAL_I2C_Mem_Read(&hi2c1, ADDRESS, T1_T0msb, 1, &tData22, 1, 100);
 8000cf6:	2364      	movs	r3, #100	; 0x64
 8000cf8:	9302      	str	r3, [sp, #8]
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	9301      	str	r3, [sp, #4]
 8000cfe:	4b64      	ldr	r3, [pc, #400]	; (8000e90 <_read+0x1e8>)
 8000d00:	9300      	str	r3, [sp, #0]
 8000d02:	2301      	movs	r3, #1
 8000d04:	2235      	movs	r2, #53	; 0x35
 8000d06:	21be      	movs	r1, #190	; 0xbe
 8000d08:	485e      	ldr	r0, [pc, #376]	; (8000e84 <_read+0x1dc>)
 8000d0a:	f000 ff8f 	bl	8001c2c <HAL_I2C_Mem_Read>
		  	  HAL_I2C_Mem_Read(&hi2c1, ADDRESS, T0_O, 1, tData3, 2, 100);
 8000d0e:	2364      	movs	r3, #100	; 0x64
 8000d10:	9302      	str	r3, [sp, #8]
 8000d12:	2302      	movs	r3, #2
 8000d14:	9301      	str	r3, [sp, #4]
 8000d16:	4b5f      	ldr	r3, [pc, #380]	; (8000e94 <_read+0x1ec>)
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	22bc      	movs	r2, #188	; 0xbc
 8000d1e:	21be      	movs	r1, #190	; 0xbe
 8000d20:	4858      	ldr	r0, [pc, #352]	; (8000e84 <_read+0x1dc>)
 8000d22:	f000 ff83 	bl	8001c2c <HAL_I2C_Mem_Read>
		  	  HAL_I2C_Mem_Read(&hi2c1, ADDRESS, T1_O, 1, tData4, 2, 100);
 8000d26:	2364      	movs	r3, #100	; 0x64
 8000d28:	9302      	str	r3, [sp, #8]
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	9301      	str	r3, [sp, #4]
 8000d2e:	4b5a      	ldr	r3, [pc, #360]	; (8000e98 <_read+0x1f0>)
 8000d30:	9300      	str	r3, [sp, #0]
 8000d32:	2301      	movs	r3, #1
 8000d34:	22be      	movs	r2, #190	; 0xbe
 8000d36:	21be      	movs	r1, #190	; 0xbe
 8000d38:	4852      	ldr	r0, [pc, #328]	; (8000e84 <_read+0x1dc>)
 8000d3a:	f000 ff77 	bl	8001c2c <HAL_I2C_Mem_Read>

		  	  // Konwersja odebranych bajtow danych na typ int16_t

		  	  TOUT = ((tData1[1] << 8) | tData1[0]);
 8000d3e:	4b50      	ldr	r3, [pc, #320]	; (8000e80 <_read+0x1d8>)
 8000d40:	785b      	ldrb	r3, [r3, #1]
 8000d42:	021b      	lsls	r3, r3, #8
 8000d44:	b21a      	sxth	r2, r3
 8000d46:	4b4e      	ldr	r3, [pc, #312]	; (8000e80 <_read+0x1d8>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	b21b      	sxth	r3, r3
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	b21a      	sxth	r2, r3
 8000d50:	4b52      	ldr	r3, [pc, #328]	; (8000e9c <_read+0x1f4>)
 8000d52:	801a      	strh	r2, [r3, #0]
		  	  T1T0msb = tData22;
 8000d54:	4b4e      	ldr	r3, [pc, #312]	; (8000e90 <_read+0x1e8>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b21a      	sxth	r2, r3
 8000d5a:	4b51      	ldr	r3, [pc, #324]	; (8000ea0 <_read+0x1f8>)
 8000d5c:	801a      	strh	r2, [r3, #0]
		  	  T0degC = (tData20|((T1T0msb& 0x03)<< 8))/8.0;
 8000d5e:	4b4a      	ldr	r3, [pc, #296]	; (8000e88 <_read+0x1e0>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	4b4e      	ldr	r3, [pc, #312]	; (8000ea0 <_read+0x1f8>)
 8000d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d6a:	b29b      	uxth	r3, r3
 8000d6c:	021b      	lsls	r3, r3, #8
 8000d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000d72:	4313      	orrs	r3, r2
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff fbcd 	bl	8000514 <__aeabi_i2d>
 8000d7a:	f04f 0200 	mov.w	r2, #0
 8000d7e:	4b49      	ldr	r3, [pc, #292]	; (8000ea4 <_read+0x1fc>)
 8000d80:	f7ff fd5c 	bl	800083c <__aeabi_ddiv>
 8000d84:	4602      	mov	r2, r0
 8000d86:	460b      	mov	r3, r1
 8000d88:	4610      	mov	r0, r2
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	f7ff fe3e 	bl	8000a0c <__aeabi_d2iz>
 8000d90:	4603      	mov	r3, r0
 8000d92:	b21a      	sxth	r2, r3
 8000d94:	4b44      	ldr	r3, [pc, #272]	; (8000ea8 <_read+0x200>)
 8000d96:	801a      	strh	r2, [r3, #0]
		  	  T1degC = (tData21|((T1T0msb& 0x0C)<< 6))/8.0;
 8000d98:	4b3c      	ldr	r3, [pc, #240]	; (8000e8c <_read+0x1e4>)
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b40      	ldr	r3, [pc, #256]	; (8000ea0 <_read+0x1f8>)
 8000da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000da4:	b29b      	uxth	r3, r3
 8000da6:	019b      	lsls	r3, r3, #6
 8000da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000dac:	4313      	orrs	r3, r2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fbb0 	bl	8000514 <__aeabi_i2d>
 8000db4:	f04f 0200 	mov.w	r2, #0
 8000db8:	4b3a      	ldr	r3, [pc, #232]	; (8000ea4 <_read+0x1fc>)
 8000dba:	f7ff fd3f 	bl	800083c <__aeabi_ddiv>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	4610      	mov	r0, r2
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	f7ff fe21 	bl	8000a0c <__aeabi_d2iz>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	b21a      	sxth	r2, r3
 8000dce:	4b37      	ldr	r3, [pc, #220]	; (8000eac <_read+0x204>)
 8000dd0:	801a      	strh	r2, [r3, #0]
		  	  T0O = ((tData3[1] << 8) | tData3[0]);
 8000dd2:	4b30      	ldr	r3, [pc, #192]	; (8000e94 <_read+0x1ec>)
 8000dd4:	785b      	ldrb	r3, [r3, #1]
 8000dd6:	021b      	lsls	r3, r3, #8
 8000dd8:	b21a      	sxth	r2, r3
 8000dda:	4b2e      	ldr	r3, [pc, #184]	; (8000e94 <_read+0x1ec>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	4313      	orrs	r3, r2
 8000de2:	b21a      	sxth	r2, r3
 8000de4:	4b32      	ldr	r3, [pc, #200]	; (8000eb0 <_read+0x208>)
 8000de6:	801a      	strh	r2, [r3, #0]
		  	  T1O = ((tData4[1] << 8) | tData4[0]);
 8000de8:	4b2b      	ldr	r3, [pc, #172]	; (8000e98 <_read+0x1f0>)
 8000dea:	785b      	ldrb	r3, [r3, #1]
 8000dec:	021b      	lsls	r3, r3, #8
 8000dee:	b21a      	sxth	r2, r3
 8000df0:	4b29      	ldr	r3, [pc, #164]	; (8000e98 <_read+0x1f0>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	4b2e      	ldr	r3, [pc, #184]	; (8000eb4 <_read+0x20c>)
 8000dfc:	801a      	strh	r2, [r3, #0]


		  	  temperatura=((float)(T1degC -T0degC)*(float)(TOUT-T0O)/(float)(T1O-T0O)+(float)T0degC);
 8000dfe:	4b2b      	ldr	r3, [pc, #172]	; (8000eac <_read+0x204>)
 8000e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e04:	461a      	mov	r2, r3
 8000e06:	4b28      	ldr	r3, [pc, #160]	; (8000ea8 <_read+0x200>)
 8000e08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	ee07 3a90 	vmov	s15, r3
 8000e12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e16:	4b21      	ldr	r3, [pc, #132]	; (8000e9c <_read+0x1f4>)
 8000e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <_read+0x208>)
 8000e20:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	ee07 3a90 	vmov	s15, r3
 8000e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e2e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000e32:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <_read+0x20c>)
 8000e34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b1d      	ldr	r3, [pc, #116]	; (8000eb0 <_read+0x208>)
 8000e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	ee07 3a90 	vmov	s15, r3
 8000e46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000e4e:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <_read+0x200>)
 8000e50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e54:	ee07 3a90 	vmov	s15, r3
 8000e58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <_read+0x210>)
 8000e62:	edc3 7a00 	vstr	s15, [r3]

		  	  printf("Temp = %d\t\n", (int)temperatura);
 8000e66:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <_read+0x210>)
 8000e68:	edd3 7a00 	vldr	s15, [r3]
 8000e6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e70:	ee17 1a90 	vmov	r1, s15
 8000e74:	4811      	ldr	r0, [pc, #68]	; (8000ebc <_read+0x214>)
 8000e76:	f003 fc2f 	bl	80046d8 <iprintf>
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	200000dc 	.word	0x200000dc
 8000e84:	20000088 	.word	0x20000088
 8000e88:	200000de 	.word	0x200000de
 8000e8c:	200000df 	.word	0x200000df
 8000e90:	200000e0 	.word	0x200000e0
 8000e94:	200000e4 	.word	0x200000e4
 8000e98:	200000e8 	.word	0x200000e8
 8000e9c:	200000ea 	.word	0x200000ea
 8000ea0:	200000f0 	.word	0x200000f0
 8000ea4:	40200000 	.word	0x40200000
 8000ea8:	200000ec 	.word	0x200000ec
 8000eac:	200000ee 	.word	0x200000ee
 8000eb0:	200000f2 	.word	0x200000f2
 8000eb4:	200000f4 	.word	0x200000f4
 8000eb8:	200000f8 	.word	0x200000f8
 8000ebc:	080054e8 	.word	0x080054e8

08000ec0 <send_char>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void send_char(char c)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
 HAL_UART_Transmit(&huart2, (uint8_t*)&c, 1, 1000);
 8000eca:	1df9      	adds	r1, r7, #7
 8000ecc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <send_char+0x20>)
 8000ed4:	f002 ff68 	bl	8003da8 <HAL_UART_Transmit>
}
 8000ed8:	bf00      	nop
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000104 	.word	0x20000104

08000ee4 <__io_putchar>:

int __io_putchar(int ch)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 if (ch == '\n')
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b0a      	cmp	r3, #10
 8000ef0:	d102      	bne.n	8000ef8 <__io_putchar+0x14>
 send_char('\r');
 8000ef2:	200d      	movs	r0, #13
 8000ef4:	f7ff ffe4 	bl	8000ec0 <send_char>
 send_char(ch);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ffdf 	bl	8000ec0 <send_char>
 return ch;
 8000f02:	687b      	ldr	r3, [r7, #4]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f10:	f000 f9ee 	bl	80012f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f14:	f000 f80f 	bl	8000f36 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f18:	f7ff fda0 	bl	8000a5c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f1c:	f000 f94c 	bl	80011b8 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000f20:	f7ff fe04 	bl	8000b2c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE BEGIN 2 */
  _search();
 8000f24:	f7ff fe84 	bl	8000c30 <_search>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  _read();
 8000f28:	f7ff febe 	bl	8000ca8 <_read>
	  HAL_Delay(1000);
 8000f2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f30:	f000 fa44 	bl	80013bc <HAL_Delay>
	  _read();
 8000f34:	e7f8      	b.n	8000f28 <main+0x1c>

08000f36 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b09c      	sub	sp, #112	; 0x70
 8000f3a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f40:	2228      	movs	r2, #40	; 0x28
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f003 fd0d 	bl	8004964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f5a:	463b      	mov	r3, r7
 8000f5c:	2234      	movs	r2, #52	; 0x34
 8000f5e:	2100      	movs	r1, #0
 8000f60:	4618      	mov	r0, r3
 8000f62:	f003 fcff 	bl	8004964 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f66:	2302      	movs	r3, #2
 8000f68:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f6e:	2310      	movs	r3, #16
 8000f70:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f72:	2302      	movs	r3, #2
 8000f74:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f76:	2300      	movs	r3, #0
 8000f78:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000f7a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000f7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 fabb 	bl	8002500 <HAL_RCC_OscConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000f90:	f000 f827 	bl	8000fe2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f94:	230f      	movs	r3, #15
 8000f96:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000faa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000fae:	2102      	movs	r1, #2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f002 fae3 	bl	800357c <HAL_RCC_ClockConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000fbc:	f000 f811 	bl	8000fe2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fc0:	2320      	movs	r3, #32
 8000fc2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f002 fd0c 	bl	80039e8 <HAL_RCCEx_PeriphCLKConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000fd6:	f000 f804 	bl	8000fe2 <Error_Handler>
  }
}
 8000fda:	bf00      	nop
 8000fdc:	3770      	adds	r7, #112	; 0x70
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe6:	b672      	cpsid	i
}
 8000fe8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fea:	e7fe      	b.n	8000fea <Error_Handler+0x8>

08000fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <HAL_MspInit+0x44>)
 8000ff4:	699b      	ldr	r3, [r3, #24]
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <HAL_MspInit+0x44>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6193      	str	r3, [r2, #24]
 8000ffe:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <HAL_MspInit+0x44>)
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4b09      	ldr	r3, [pc, #36]	; (8001030 <HAL_MspInit+0x44>)
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	4a08      	ldr	r2, [pc, #32]	; (8001030 <HAL_MspInit+0x44>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	61d3      	str	r3, [r2, #28]
 8001016:	4b06      	ldr	r3, [pc, #24]	; (8001030 <HAL_MspInit+0x44>)
 8001018:	69db      	ldr	r3, [r3, #28]
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001022:	2007      	movs	r0, #7
 8001024:	f000 faa0 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001028:	bf00      	nop
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	40021000 	.word	0x40021000

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <NMI_Handler+0x4>

0800103a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800103e:	e7fe      	b.n	800103e <HardFault_Handler+0x4>

08001040 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <MemManage_Handler+0x4>

08001046 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <BusFault_Handler+0x4>

0800104c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <UsageFault_Handler+0x4>

08001052 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800106e:	b480      	push	{r7}
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001080:	f000 f97c 	bl	800137c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001084:	bf00      	nop
 8001086:	bd80      	pop	{r7, pc}

08001088 <_write>:

  return len;
}

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b086      	sub	sp, #24
 800108c:	af00      	add	r7, sp, #0
 800108e:	60f8      	str	r0, [r7, #12]
 8001090:	60b9      	str	r1, [r7, #8]
 8001092:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	e009      	b.n	80010ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	1c5a      	adds	r2, r3, #1
 800109e:	60ba      	str	r2, [r7, #8]
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff ff1e 	bl	8000ee4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	3301      	adds	r3, #1
 80010ac:	617b      	str	r3, [r7, #20]
 80010ae:	697a      	ldr	r2, [r7, #20]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	429a      	cmp	r2, r3
 80010b4:	dbf1      	blt.n	800109a <_write+0x12>
  }
  return len;
 80010b6:	687b      	ldr	r3, [r7, #4]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3718      	adds	r7, #24
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}

080010c0 <_close>:

int _close(int file)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010e8:	605a      	str	r2, [r3, #4]
  return 0;
 80010ea:	2300      	movs	r3, #0
}
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <_isatty>:

int _isatty(int file)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001100:	2301      	movs	r3, #1
}
 8001102:	4618      	mov	r0, r3
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr

0800110e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800110e:	b480      	push	{r7}
 8001110:	b085      	sub	sp, #20
 8001112:	af00      	add	r7, sp, #0
 8001114:	60f8      	str	r0, [r7, #12]
 8001116:	60b9      	str	r1, [r7, #8]
 8001118:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001130:	4a14      	ldr	r2, [pc, #80]	; (8001184 <_sbrk+0x5c>)
 8001132:	4b15      	ldr	r3, [pc, #84]	; (8001188 <_sbrk+0x60>)
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <_sbrk+0x64>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d102      	bne.n	800114a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001144:	4b11      	ldr	r3, [pc, #68]	; (800118c <_sbrk+0x64>)
 8001146:	4a12      	ldr	r2, [pc, #72]	; (8001190 <_sbrk+0x68>)
 8001148:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800114a:	4b10      	ldr	r3, [pc, #64]	; (800118c <_sbrk+0x64>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4413      	add	r3, r2
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	429a      	cmp	r2, r3
 8001156:	d207      	bcs.n	8001168 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001158:	f003 fc52 	bl	8004a00 <__errno>
 800115c:	4603      	mov	r3, r0
 800115e:	220c      	movs	r2, #12
 8001160:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001166:	e009      	b.n	800117c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <_sbrk+0x64>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800116e:	4b07      	ldr	r3, [pc, #28]	; (800118c <_sbrk+0x64>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4413      	add	r3, r2
 8001176:	4a05      	ldr	r2, [pc, #20]	; (800118c <_sbrk+0x64>)
 8001178:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800117a:	68fb      	ldr	r3, [r7, #12]
}
 800117c:	4618      	mov	r0, r3
 800117e:	3718      	adds	r7, #24
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20004000 	.word	0x20004000
 8001188:	00000400 	.word	0x00000400
 800118c:	20000100 	.word	0x20000100
 8001190:	200002e0 	.word	0x200002e0

08001194 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <SystemInit+0x20>)
 800119a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <SystemInit+0x20>)
 80011a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a8:	bf00      	nop
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000ed00 	.word	0xe000ed00

080011b8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_USART2_UART_Init+0x58>)
 80011be:	4a15      	ldr	r2, [pc, #84]	; (8001214 <MX_USART2_UART_Init+0x5c>)
 80011c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011c2:	4b13      	ldr	r3, [pc, #76]	; (8001210 <MX_USART2_UART_Init+0x58>)
 80011c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_USART2_UART_Init+0x58>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_USART2_UART_Init+0x58>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_USART2_UART_Init+0x58>)
 80011d8:	2200      	movs	r2, #0
 80011da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_USART2_UART_Init+0x58>)
 80011de:	220c      	movs	r2, #12
 80011e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MX_USART2_UART_Init+0x58>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_USART2_UART_Init+0x58>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <MX_USART2_UART_Init+0x58>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_USART2_UART_Init+0x58>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_USART2_UART_Init+0x58>)
 80011fc:	f002 fd86 	bl	8003d0c <HAL_UART_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001206:	f7ff feec 	bl	8000fe2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000104 	.word	0x20000104
 8001214:	40004400 	.word	0x40004400

08001218 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08a      	sub	sp, #40	; 0x28
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001220:	f107 0314 	add.w	r3, r7, #20
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a17      	ldr	r2, [pc, #92]	; (8001294 <HAL_UART_MspInit+0x7c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d128      	bne.n	800128c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800123a:	4b17      	ldr	r3, [pc, #92]	; (8001298 <HAL_UART_MspInit+0x80>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4a16      	ldr	r2, [pc, #88]	; (8001298 <HAL_UART_MspInit+0x80>)
 8001240:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001244:	61d3      	str	r3, [r2, #28]
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <HAL_UART_MspInit+0x80>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_UART_MspInit+0x80>)
 8001254:	695b      	ldr	r3, [r3, #20]
 8001256:	4a10      	ldr	r2, [pc, #64]	; (8001298 <HAL_UART_MspInit+0x80>)
 8001258:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125c:	6153      	str	r3, [r2, #20]
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <HAL_UART_MspInit+0x80>)
 8001260:	695b      	ldr	r3, [r3, #20]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800126a:	230c      	movs	r3, #12
 800126c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800127a:	2307      	movs	r3, #7
 800127c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001288:	f000 f9a2 	bl	80015d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800128c:	bf00      	nop
 800128e:	3728      	adds	r7, #40	; 0x28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40004400 	.word	0x40004400
 8001298:	40021000 	.word	0x40021000

0800129c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800129c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012a0:	f7ff ff78 	bl	8001194 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a4:	480c      	ldr	r0, [pc, #48]	; (80012d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80012a6:	490d      	ldr	r1, [pc, #52]	; (80012dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80012a8:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <LoopForever+0xe>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ac:	e002      	b.n	80012b4 <LoopCopyDataInit>

080012ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b2:	3304      	adds	r3, #4

080012b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b8:	d3f9      	bcc.n	80012ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012bc:	4c0a      	ldr	r4, [pc, #40]	; (80012e8 <LoopForever+0x16>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c0:	e001      	b.n	80012c6 <LoopFillZerobss>

080012c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c4:	3204      	adds	r2, #4

080012c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c8:	d3fb      	bcc.n	80012c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ca:	f003 fb9f 	bl	8004a0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80012ce:	f7ff fe1d 	bl	8000f0c <main>

080012d2 <LoopForever>:

LoopForever:
    b LoopForever
 80012d2:	e7fe      	b.n	80012d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012d4:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80012d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012dc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80012e0:	08005568 	.word	0x08005568
  ldr r2, =_sbss
 80012e4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80012e8:	200002dc 	.word	0x200002dc

080012ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC1_IRQHandler>
	...

080012f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <HAL_Init+0x28>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a07      	ldr	r2, [pc, #28]	; (8001318 <HAL_Init+0x28>)
 80012fa:	f043 0310 	orr.w	r3, r3, #16
 80012fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001300:	2003      	movs	r0, #3
 8001302:	f000 f931 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001306:	2000      	movs	r0, #0
 8001308:	f000 f808 	bl	800131c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800130c:	f7ff fe6e 	bl	8000fec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40022000 	.word	0x40022000

0800131c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001324:	4b12      	ldr	r3, [pc, #72]	; (8001370 <HAL_InitTick+0x54>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_InitTick+0x58>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4619      	mov	r1, r3
 800132e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001332:	fbb3 f3f1 	udiv	r3, r3, r1
 8001336:	fbb2 f3f3 	udiv	r3, r2, r3
 800133a:	4618      	mov	r0, r3
 800133c:	f000 f93b 	bl	80015b6 <HAL_SYSTICK_Config>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e00e      	b.n	8001368 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2b0f      	cmp	r3, #15
 800134e:	d80a      	bhi.n	8001366 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001350:	2200      	movs	r2, #0
 8001352:	6879      	ldr	r1, [r7, #4]
 8001354:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001358:	f000 f911 	bl	800157e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800135c:	4a06      	ldr	r2, [pc, #24]	; (8001378 <HAL_InitTick+0x5c>)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
 8001364:	e000      	b.n	8001368 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000004 	.word	0x20000004
 8001374:	2000000c 	.word	0x2000000c
 8001378:	20000008 	.word	0x20000008

0800137c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_IncTick+0x20>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	461a      	mov	r2, r3
 8001386:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <HAL_IncTick+0x24>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4413      	add	r3, r2
 800138c:	4a04      	ldr	r2, [pc, #16]	; (80013a0 <HAL_IncTick+0x24>)
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	2000000c 	.word	0x2000000c
 80013a0:	2000018c 	.word	0x2000018c

080013a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80013a8:	4b03      	ldr	r3, [pc, #12]	; (80013b8 <HAL_GetTick+0x14>)
 80013aa:	681b      	ldr	r3, [r3, #0]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	2000018c 	.word	0x2000018c

080013bc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013c4:	f7ff ffee 	bl	80013a4 <HAL_GetTick>
 80013c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80013d4:	d005      	beq.n	80013e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_Delay+0x44>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	461a      	mov	r2, r3
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4413      	add	r3, r2
 80013e0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80013e2:	bf00      	nop
 80013e4:	f7ff ffde 	bl	80013a4 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d8f7      	bhi.n	80013e4 <HAL_Delay+0x28>
  {
  }
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	2000000c 	.word	0x2000000c

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800142c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001436:	4a04      	ldr	r2, [pc, #16]	; (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	60d3      	str	r3, [r2, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	; (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	db0a      	blt.n	8001492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	490c      	ldr	r1, [pc, #48]	; (80014b4 <__NVIC_SetPriority+0x4c>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	0112      	lsls	r2, r2, #4
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	440b      	add	r3, r1
 800148c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001490:	e00a      	b.n	80014a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4908      	ldr	r1, [pc, #32]	; (80014b8 <__NVIC_SetPriority+0x50>)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	3b04      	subs	r3, #4
 80014a0:	0112      	lsls	r2, r2, #4
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	440b      	add	r3, r1
 80014a6:	761a      	strb	r2, [r3, #24]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000e100 	.word	0xe000e100
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	; 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f1c3 0307 	rsb	r3, r3, #7
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	bf28      	it	cs
 80014da:	2304      	movcs	r3, #4
 80014dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3304      	adds	r3, #4
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d902      	bls.n	80014ec <NVIC_EncodePriority+0x30>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3b03      	subs	r3, #3
 80014ea:	e000      	b.n	80014ee <NVIC_EncodePriority+0x32>
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001504:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43d9      	mvns	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	4313      	orrs	r3, r2
         );
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	; 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001534:	d301      	bcc.n	800153a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001536:	2301      	movs	r3, #1
 8001538:	e00f      	b.n	800155a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153a:	4a0a      	ldr	r2, [pc, #40]	; (8001564 <SysTick_Config+0x40>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001542:	210f      	movs	r1, #15
 8001544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001548:	f7ff ff8e 	bl	8001468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <SysTick_Config+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001552:	4b04      	ldr	r3, [pc, #16]	; (8001564 <SysTick_Config+0x40>)
 8001554:	2207      	movs	r2, #7
 8001556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	e000e010 	.word	0xe000e010

08001568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff47 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001590:	f7ff ff5c 	bl	800144c <__NVIC_GetPriorityGrouping>
 8001594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7ff ff8e 	bl	80014bc <NVIC_EncodePriority>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff5d 	bl	8001468 <__NVIC_SetPriority>
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff ffb0 	bl	8001524 <SysTick_Config>
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b087      	sub	sp, #28
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015da:	2300      	movs	r3, #0
 80015dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015de:	e14e      	b.n	800187e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	2101      	movs	r1, #1
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	4013      	ands	r3, r2
 80015ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f000 8140 	beq.w	8001878 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0303 	and.w	r3, r3, #3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d005      	beq.n	8001610 <HAL_GPIO_Init+0x40>
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 0303 	and.w	r3, r3, #3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d130      	bne.n	8001672 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	2203      	movs	r2, #3
 800161c:	fa02 f303 	lsl.w	r3, r2, r3
 8001620:	43db      	mvns	r3, r3
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	4013      	ands	r3, r2
 8001626:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	005b      	lsls	r3, r3, #1
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001646:	2201      	movs	r2, #1
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa02 f303 	lsl.w	r3, r2, r3
 800164e:	43db      	mvns	r3, r3
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4013      	ands	r3, r2
 8001654:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	f003 0201 	and.w	r2, r3, #1
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	fa02 f303 	lsl.w	r3, r2, r3
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
 800167a:	2b03      	cmp	r3, #3
 800167c:	d017      	beq.n	80016ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	68db      	ldr	r3, [r3, #12]
 8001682:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2203      	movs	r2, #3
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4013      	ands	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	689a      	ldr	r2, [r3, #8]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	693a      	ldr	r2, [r7, #16]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	693a      	ldr	r2, [r7, #16]
 80016ac:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 0303 	and.w	r3, r3, #3
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d123      	bne.n	8001702 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	08da      	lsrs	r2, r3, #3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	3208      	adds	r2, #8
 80016c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	f003 0307 	and.w	r3, r3, #7
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	220f      	movs	r2, #15
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43db      	mvns	r3, r3
 80016d8:	693a      	ldr	r2, [r7, #16]
 80016da:	4013      	ands	r3, r2
 80016dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	691a      	ldr	r2, [r3, #16]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	08da      	lsrs	r2, r3, #3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3208      	adds	r2, #8
 80016fc:	6939      	ldr	r1, [r7, #16]
 80016fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	2203      	movs	r2, #3
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	693a      	ldr	r2, [r7, #16]
 8001716:	4013      	ands	r3, r2
 8001718:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0203 	and.w	r2, r3, #3
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	005b      	lsls	r3, r3, #1
 8001726:	fa02 f303 	lsl.w	r3, r2, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 809a 	beq.w	8001878 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001744:	4b55      	ldr	r3, [pc, #340]	; (800189c <HAL_GPIO_Init+0x2cc>)
 8001746:	699b      	ldr	r3, [r3, #24]
 8001748:	4a54      	ldr	r2, [pc, #336]	; (800189c <HAL_GPIO_Init+0x2cc>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6193      	str	r3, [r2, #24]
 8001750:	4b52      	ldr	r3, [pc, #328]	; (800189c <HAL_GPIO_Init+0x2cc>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800175c:	4a50      	ldr	r2, [pc, #320]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	089b      	lsrs	r3, r3, #2
 8001762:	3302      	adds	r3, #2
 8001764:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f003 0303 	and.w	r3, r3, #3
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	220f      	movs	r2, #15
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	693a      	ldr	r2, [r7, #16]
 800177c:	4013      	ands	r3, r2
 800177e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001786:	d013      	beq.n	80017b0 <HAL_GPIO_Init+0x1e0>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a46      	ldr	r2, [pc, #280]	; (80018a4 <HAL_GPIO_Init+0x2d4>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d00d      	beq.n	80017ac <HAL_GPIO_Init+0x1dc>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	4a45      	ldr	r2, [pc, #276]	; (80018a8 <HAL_GPIO_Init+0x2d8>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d007      	beq.n	80017a8 <HAL_GPIO_Init+0x1d8>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	4a44      	ldr	r2, [pc, #272]	; (80018ac <HAL_GPIO_Init+0x2dc>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d101      	bne.n	80017a4 <HAL_GPIO_Init+0x1d4>
 80017a0:	2303      	movs	r3, #3
 80017a2:	e006      	b.n	80017b2 <HAL_GPIO_Init+0x1e2>
 80017a4:	2305      	movs	r3, #5
 80017a6:	e004      	b.n	80017b2 <HAL_GPIO_Init+0x1e2>
 80017a8:	2302      	movs	r3, #2
 80017aa:	e002      	b.n	80017b2 <HAL_GPIO_Init+0x1e2>
 80017ac:	2301      	movs	r3, #1
 80017ae:	e000      	b.n	80017b2 <HAL_GPIO_Init+0x1e2>
 80017b0:	2300      	movs	r3, #0
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	f002 0203 	and.w	r2, r2, #3
 80017b8:	0092      	lsls	r2, r2, #2
 80017ba:	4093      	lsls	r3, r2
 80017bc:	693a      	ldr	r2, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80017c2:	4937      	ldr	r1, [pc, #220]	; (80018a0 <HAL_GPIO_Init+0x2d0>)
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	089b      	lsrs	r3, r3, #2
 80017c8:	3302      	adds	r3, #2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017d0:	4b37      	ldr	r3, [pc, #220]	; (80018b0 <HAL_GPIO_Init+0x2e0>)
 80017d2:	689b      	ldr	r3, [r3, #8]
 80017d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	43db      	mvns	r3, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4013      	ands	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d003      	beq.n	80017f4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80017f4:	4a2e      	ldr	r2, [pc, #184]	; (80018b0 <HAL_GPIO_Init+0x2e0>)
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017fa:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <HAL_GPIO_Init+0x2e0>)
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	43db      	mvns	r3, r3
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d003      	beq.n	800181e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800181e:	4a24      	ldr	r2, [pc, #144]	; (80018b0 <HAL_GPIO_Init+0x2e0>)
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001824:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <HAL_GPIO_Init+0x2e0>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	43db      	mvns	r3, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	4013      	ands	r3, r2
 8001832:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001848:	4a19      	ldr	r2, [pc, #100]	; (80018b0 <HAL_GPIO_Init+0x2e0>)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <HAL_GPIO_Init+0x2e0>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	43db      	mvns	r3, r3
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	4013      	ands	r3, r2
 800185c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800186a:	693a      	ldr	r2, [r7, #16]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001872:	4a0f      	ldr	r2, [pc, #60]	; (80018b0 <HAL_GPIO_Init+0x2e0>)
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	3301      	adds	r3, #1
 800187c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681a      	ldr	r2, [r3, #0]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	fa22 f303 	lsr.w	r3, r2, r3
 8001888:	2b00      	cmp	r3, #0
 800188a:	f47f aea9 	bne.w	80015e0 <HAL_GPIO_Init+0x10>
  }
}
 800188e:	bf00      	nop
 8001890:	bf00      	nop
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	40021000 	.word	0x40021000
 80018a0:	40010000 	.word	0x40010000
 80018a4:	48000400 	.word	0x48000400
 80018a8:	48000800 	.word	0x48000800
 80018ac:	48000c00 	.word	0x48000c00
 80018b0:	40010400 	.word	0x40010400

080018b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
 80018c0:	4613      	mov	r3, r2
 80018c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018c4:	787b      	ldrb	r3, [r7, #1]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d003      	beq.n	80018d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80018ca:	887a      	ldrh	r2, [r7, #2]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80018d0:	e002      	b.n	80018d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80018d2:	887a      	ldrh	r2, [r7, #2]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e081      	b.n	80019fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018fc:	b2db      	uxtb	r3, r3
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d106      	bne.n	8001910 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2200      	movs	r2, #0
 8001906:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7ff f94c 	bl	8000ba8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2224      	movs	r2, #36	; 0x24
 8001914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001934:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001944:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d107      	bne.n	800195e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689a      	ldr	r2, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	e006      	b.n	800196c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800196a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	2b02      	cmp	r3, #2
 8001972:	d104      	bne.n	800197e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800197c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6812      	ldr	r2, [r2, #0]
 8001988:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800198c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001990:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80019a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691a      	ldr	r2, [r3, #16]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
 80019aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	69d9      	ldr	r1, [r3, #28]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a1a      	ldr	r2, [r3, #32]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f042 0201 	orr.w	r2, r2, #1
 80019da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2220      	movs	r2, #32
 80019e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
	...

08001a04 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b088      	sub	sp, #32
 8001a08:	af02      	add	r7, sp, #8
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	4608      	mov	r0, r1
 8001a0e:	4611      	mov	r1, r2
 8001a10:	461a      	mov	r2, r3
 8001a12:	4603      	mov	r3, r0
 8001a14:	817b      	strh	r3, [r7, #10]
 8001a16:	460b      	mov	r3, r1
 8001a18:	813b      	strh	r3, [r7, #8]
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b20      	cmp	r3, #32
 8001a28:	f040 80f9 	bne.w	8001c1e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d002      	beq.n	8001a38 <HAL_I2C_Mem_Write+0x34>
 8001a32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d105      	bne.n	8001a44 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a3e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e0ed      	b.n	8001c20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_I2C_Mem_Write+0x4e>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e0e6      	b.n	8001c20 <HAL_I2C_Mem_Write+0x21c>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a5a:	f7ff fca3 	bl	80013a4 <HAL_GetTick>
 8001a5e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	2319      	movs	r3, #25
 8001a66:	2201      	movs	r2, #1
 8001a68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 fac3 	bl	8001ff8 <I2C_WaitOnFlagUntilTimeout>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0d1      	b.n	8001c20 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2221      	movs	r2, #33	; 0x21
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2240      	movs	r2, #64	; 0x40
 8001a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	6a3a      	ldr	r2, [r7, #32]
 8001a96:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001aa4:	88f8      	ldrh	r0, [r7, #6]
 8001aa6:	893a      	ldrh	r2, [r7, #8]
 8001aa8:	8979      	ldrh	r1, [r7, #10]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f000 f9d3 	bl	8001e60 <I2C_RequestMemoryWrite>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d005      	beq.n	8001acc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0a9      	b.n	8001c20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	2bff      	cmp	r3, #255	; 0xff
 8001ad4:	d90e      	bls.n	8001af4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	22ff      	movs	r2, #255	; 0xff
 8001ada:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	8979      	ldrh	r1, [r7, #10]
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001aec:	68f8      	ldr	r0, [r7, #12]
 8001aee:	f000 fc3d 	bl	800236c <I2C_TransferConfig>
 8001af2:	e00f      	b.n	8001b14 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	8979      	ldrh	r1, [r7, #10]
 8001b06:	2300      	movs	r3, #0
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 fc2c 	bl	800236c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b14:	697a      	ldr	r2, [r7, #20]
 8001b16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f000 fabc 	bl	8002096 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e07b      	b.n	8001c20 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2c:	781a      	ldrb	r2, [r3, #0]
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	3b01      	subs	r3, #1
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b5c:	b29b      	uxth	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d034      	beq.n	8001bcc <HAL_I2C_Mem_Write+0x1c8>
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d130      	bne.n	8001bcc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b70:	2200      	movs	r2, #0
 8001b72:	2180      	movs	r1, #128	; 0x80
 8001b74:	68f8      	ldr	r0, [r7, #12]
 8001b76:	f000 fa3f 	bl	8001ff8 <I2C_WaitOnFlagUntilTimeout>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e04d      	b.n	8001c20 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	2bff      	cmp	r3, #255	; 0xff
 8001b8c:	d90e      	bls.n	8001bac <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	22ff      	movs	r2, #255	; 0xff
 8001b92:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	8979      	ldrh	r1, [r7, #10]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f000 fbe1 	bl	800236c <I2C_TransferConfig>
 8001baa:	e00f      	b.n	8001bcc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb0:	b29a      	uxth	r2, r3
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bba:	b2da      	uxtb	r2, r3
 8001bbc:	8979      	ldrh	r1, [r7, #10]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	9300      	str	r3, [sp, #0]
 8001bc2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f000 fbd0 	bl	800236c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bd0:	b29b      	uxth	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d19e      	bne.n	8001b14 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001bd6:	697a      	ldr	r2, [r7, #20]
 8001bd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 faa2 	bl	8002124 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e01a      	b.n	8001c20 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_I2C_Mem_Write+0x224>)
 8001bfe:	400b      	ands	r3, r1
 8001c00:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2220      	movs	r2, #32
 8001c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	e000      	b.n	8001c20 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001c1e:	2302      	movs	r3, #2
  }
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	3718      	adds	r7, #24
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	fe00e800 	.word	0xfe00e800

08001c2c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b088      	sub	sp, #32
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	4608      	mov	r0, r1
 8001c36:	4611      	mov	r1, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	817b      	strh	r3, [r7, #10]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	813b      	strh	r3, [r7, #8]
 8001c42:	4613      	mov	r3, r2
 8001c44:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	2b20      	cmp	r3, #32
 8001c50:	f040 80fd 	bne.w	8001e4e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c54:	6a3b      	ldr	r3, [r7, #32]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <HAL_I2C_Mem_Read+0x34>
 8001c5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c66:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e0f1      	b.n	8001e50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	d101      	bne.n	8001c7a <HAL_I2C_Mem_Read+0x4e>
 8001c76:	2302      	movs	r3, #2
 8001c78:	e0ea      	b.n	8001e50 <HAL_I2C_Mem_Read+0x224>
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c82:	f7ff fb8f 	bl	80013a4 <HAL_GetTick>
 8001c86:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	2319      	movs	r3, #25
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f000 f9af 	bl	8001ff8 <I2C_WaitOnFlagUntilTimeout>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0d5      	b.n	8001e50 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2222      	movs	r2, #34	; 0x22
 8001ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2240      	movs	r2, #64	; 0x40
 8001cb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6a3a      	ldr	r2, [r7, #32]
 8001cbe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001cc4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ccc:	88f8      	ldrh	r0, [r7, #6]
 8001cce:	893a      	ldrh	r2, [r7, #8]
 8001cd0:	8979      	ldrh	r1, [r7, #10]
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	9301      	str	r3, [sp, #4]
 8001cd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cd8:	9300      	str	r3, [sp, #0]
 8001cda:	4603      	mov	r3, r0
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f913 	bl	8001f08 <I2C_RequestMemoryRead>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0ad      	b.n	8001e50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	2bff      	cmp	r3, #255	; 0xff
 8001cfc:	d90e      	bls.n	8001d1c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	22ff      	movs	r2, #255	; 0xff
 8001d02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	8979      	ldrh	r1, [r7, #10]
 8001d0c:	4b52      	ldr	r3, [pc, #328]	; (8001e58 <HAL_I2C_Mem_Read+0x22c>)
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 fb29 	bl	800236c <I2C_TransferConfig>
 8001d1a:	e00f      	b.n	8001d3c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	8979      	ldrh	r1, [r7, #10]
 8001d2e:	4b4a      	ldr	r3, [pc, #296]	; (8001e58 <HAL_I2C_Mem_Read+0x22c>)
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d36:	68f8      	ldr	r0, [r7, #12]
 8001d38:	f000 fb18 	bl	800236c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d42:	2200      	movs	r2, #0
 8001d44:	2104      	movs	r1, #4
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 f956 	bl	8001ff8 <I2C_WaitOnFlagUntilTimeout>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e07c      	b.n	8001e50 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d72:	3b01      	subs	r3, #1
 8001d74:	b29a      	uxth	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	3b01      	subs	r3, #1
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d034      	beq.n	8001dfc <HAL_I2C_Mem_Read+0x1d0>
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d130      	bne.n	8001dfc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	9300      	str	r3, [sp, #0]
 8001d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da0:	2200      	movs	r2, #0
 8001da2:	2180      	movs	r1, #128	; 0x80
 8001da4:	68f8      	ldr	r0, [r7, #12]
 8001da6:	f000 f927 	bl	8001ff8 <I2C_WaitOnFlagUntilTimeout>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e04d      	b.n	8001e50 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	2bff      	cmp	r3, #255	; 0xff
 8001dbc:	d90e      	bls.n	8001ddc <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	22ff      	movs	r2, #255	; 0xff
 8001dc2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	8979      	ldrh	r1, [r7, #10]
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9300      	str	r3, [sp, #0]
 8001dd0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001dd4:	68f8      	ldr	r0, [r7, #12]
 8001dd6:	f000 fac9 	bl	800236c <I2C_TransferConfig>
 8001dda:	e00f      	b.n	8001dfc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	8979      	ldrh	r1, [r7, #10]
 8001dee:	2300      	movs	r3, #0
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001df6:	68f8      	ldr	r0, [r7, #12]
 8001df8:	f000 fab8 	bl	800236c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d19a      	bne.n	8001d3c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 f98a 	bl	8002124 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e01a      	b.n	8001e50 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6859      	ldr	r1, [r3, #4]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <HAL_I2C_Mem_Read+0x230>)
 8001e2e:	400b      	ands	r3, r1
 8001e30:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	2220      	movs	r2, #32
 8001e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e000      	b.n	8001e50 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8001e4e:	2302      	movs	r3, #2
  }
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	80002400 	.word	0x80002400
 8001e5c:	fe00e800 	.word	0xfe00e800

08001e60 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af02      	add	r7, sp, #8
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	4608      	mov	r0, r1
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4603      	mov	r3, r0
 8001e70:	817b      	strh	r3, [r7, #10]
 8001e72:	460b      	mov	r3, r1
 8001e74:	813b      	strh	r3, [r7, #8]
 8001e76:	4613      	mov	r3, r2
 8001e78:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001e7a:	88fb      	ldrh	r3, [r7, #6]
 8001e7c:	b2da      	uxtb	r2, r3
 8001e7e:	8979      	ldrh	r1, [r7, #10]
 8001e80:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <I2C_RequestMemoryWrite+0xa4>)
 8001e82:	9300      	str	r3, [sp, #0]
 8001e84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e88:	68f8      	ldr	r0, [r7, #12]
 8001e8a:	f000 fa6f 	bl	800236c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e8e:	69fa      	ldr	r2, [r7, #28]
 8001e90:	69b9      	ldr	r1, [r7, #24]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f8ff 	bl	8002096 <I2C_WaitOnTXISFlagUntilTimeout>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e02c      	b.n	8001efc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ea2:	88fb      	ldrh	r3, [r7, #6]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d105      	bne.n	8001eb4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ea8:	893b      	ldrh	r3, [r7, #8]
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	629a      	str	r2, [r3, #40]	; 0x28
 8001eb2:	e015      	b.n	8001ee0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001eb4:	893b      	ldrh	r3, [r7, #8]
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	b2da      	uxtb	r2, r3
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	69b9      	ldr	r1, [r7, #24]
 8001ec6:	68f8      	ldr	r0, [r7, #12]
 8001ec8:	f000 f8e5 	bl	8002096 <I2C_WaitOnTXISFlagUntilTimeout>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e012      	b.n	8001efc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ed6:	893b      	ldrh	r3, [r7, #8]
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2180      	movs	r1, #128	; 0x80
 8001eea:	68f8      	ldr	r0, [r7, #12]
 8001eec:	f000 f884 	bl	8001ff8 <I2C_WaitOnFlagUntilTimeout>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d001      	beq.n	8001efa <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e000      	b.n	8001efc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001efa:	2300      	movs	r3, #0
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	80002000 	.word	0x80002000

08001f08 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af02      	add	r7, sp, #8
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	4608      	mov	r0, r1
 8001f12:	4611      	mov	r1, r2
 8001f14:	461a      	mov	r2, r3
 8001f16:	4603      	mov	r3, r0
 8001f18:	817b      	strh	r3, [r7, #10]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	813b      	strh	r3, [r7, #8]
 8001f1e:	4613      	mov	r3, r2
 8001f20:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001f22:	88fb      	ldrh	r3, [r7, #6]
 8001f24:	b2da      	uxtb	r2, r3
 8001f26:	8979      	ldrh	r1, [r7, #10]
 8001f28:	4b20      	ldr	r3, [pc, #128]	; (8001fac <I2C_RequestMemoryRead+0xa4>)
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 fa1c 	bl	800236c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f34:	69fa      	ldr	r2, [r7, #28]
 8001f36:	69b9      	ldr	r1, [r7, #24]
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f000 f8ac 	bl	8002096 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e02c      	b.n	8001fa2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d105      	bne.n	8001f5a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f4e:	893b      	ldrh	r3, [r7, #8]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	629a      	str	r2, [r3, #40]	; 0x28
 8001f58:	e015      	b.n	8001f86 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001f5a:	893b      	ldrh	r3, [r7, #8]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f68:	69fa      	ldr	r2, [r7, #28]
 8001f6a:	69b9      	ldr	r1, [r7, #24]
 8001f6c:	68f8      	ldr	r0, [r7, #12]
 8001f6e:	f000 f892 	bl	8002096 <I2C_WaitOnTXISFlagUntilTimeout>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e012      	b.n	8001fa2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001f7c:	893b      	ldrh	r3, [r7, #8]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2140      	movs	r1, #64	; 0x40
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 f831 	bl	8001ff8 <I2C_WaitOnFlagUntilTimeout>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	80002000 	.word	0x80002000

08001fb0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	699b      	ldr	r3, [r3, #24]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d103      	bne.n	8001fce <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	699b      	ldr	r3, [r3, #24]
 8001fd4:	f003 0301 	and.w	r3, r3, #1
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d007      	beq.n	8001fec <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f042 0201 	orr.w	r2, r2, #1
 8001fea:	619a      	str	r2, [r3, #24]
  }
}
 8001fec:	bf00      	nop
 8001fee:	370c      	adds	r7, #12
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b084      	sub	sp, #16
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	603b      	str	r3, [r7, #0]
 8002004:	4613      	mov	r3, r2
 8002006:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002008:	e031      	b.n	800206e <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002010:	d02d      	beq.n	800206e <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002012:	f7ff f9c7 	bl	80013a4 <HAL_GetTick>
 8002016:	4602      	mov	r2, r0
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	1ad3      	subs	r3, r2, r3
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d302      	bcc.n	8002028 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d122      	bne.n	800206e <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	699a      	ldr	r2, [r3, #24]
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	4013      	ands	r3, r2
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	429a      	cmp	r2, r3
 8002036:	bf0c      	ite	eq
 8002038:	2301      	moveq	r3, #1
 800203a:	2300      	movne	r3, #0
 800203c:	b2db      	uxtb	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	79fb      	ldrb	r3, [r7, #7]
 8002042:	429a      	cmp	r2, r3
 8002044:	d113      	bne.n	800206e <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f043 0220 	orr.w	r2, r3, #32
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2220      	movs	r2, #32
 8002056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e00f      	b.n	800208e <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	699a      	ldr	r2, [r3, #24]
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	4013      	ands	r3, r2
 8002078:	68ba      	ldr	r2, [r7, #8]
 800207a:	429a      	cmp	r2, r3
 800207c:	bf0c      	ite	eq
 800207e:	2301      	moveq	r3, #1
 8002080:	2300      	movne	r3, #0
 8002082:	b2db      	uxtb	r3, r3
 8002084:	461a      	mov	r2, r3
 8002086:	79fb      	ldrb	r3, [r7, #7]
 8002088:	429a      	cmp	r2, r3
 800208a:	d0be      	beq.n	800200a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800208c:	2300      	movs	r3, #0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002096:	b580      	push	{r7, lr}
 8002098:	b084      	sub	sp, #16
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020a2:	e033      	b.n	800210c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	68b9      	ldr	r1, [r7, #8]
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 f87f 	bl	80021ac <I2C_IsErrorOccurred>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d001      	beq.n	80020b8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e031      	b.n	800211c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020be:	d025      	beq.n	800210c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c0:	f7ff f970 	bl	80013a4 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	68ba      	ldr	r2, [r7, #8]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d302      	bcc.n	80020d6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d11a      	bne.n	800210c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	699b      	ldr	r3, [r3, #24]
 80020dc:	f003 0302 	and.w	r3, r3, #2
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d013      	beq.n	800210c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e8:	f043 0220 	orr.w	r2, r3, #32
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2220      	movs	r2, #32
 80020f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e007      	b.n	800211c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	699b      	ldr	r3, [r3, #24]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b02      	cmp	r3, #2
 8002118:	d1c4      	bne.n	80020a4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3710      	adds	r7, #16
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002130:	e02f      	b.n	8002192 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68b9      	ldr	r1, [r7, #8]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	f000 f838 	bl	80021ac <I2C_IsErrorOccurred>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e02d      	b.n	80021a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002146:	f7ff f92d 	bl	80013a4 <HAL_GetTick>
 800214a:	4602      	mov	r2, r0
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	1ad3      	subs	r3, r2, r3
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	429a      	cmp	r2, r3
 8002154:	d302      	bcc.n	800215c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d11a      	bne.n	8002192 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	f003 0320 	and.w	r3, r3, #32
 8002166:	2b20      	cmp	r3, #32
 8002168:	d013      	beq.n	8002192 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216e:	f043 0220 	orr.w	r2, r3, #32
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	2220      	movs	r2, #32
 800217a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e007      	b.n	80021a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f003 0320 	and.w	r3, r3, #32
 800219c:	2b20      	cmp	r3, #32
 800219e:	d1c8      	bne.n	8002132 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3710      	adds	r7, #16
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021b8:	2300      	movs	r3, #0
 80021ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80021c6:	2300      	movs	r3, #0
 80021c8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	f003 0310 	and.w	r3, r3, #16
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d068      	beq.n	80022aa <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2210      	movs	r2, #16
 80021de:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80021e0:	e049      	b.n	8002276 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021e8:	d045      	beq.n	8002276 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80021ea:	f7ff f8db 	bl	80013a4 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	68ba      	ldr	r2, [r7, #8]
 80021f6:	429a      	cmp	r2, r3
 80021f8:	d302      	bcc.n	8002200 <I2C_IsErrorOccurred+0x54>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d13a      	bne.n	8002276 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800220a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002212:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800221e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002222:	d121      	bne.n	8002268 <I2C_IsErrorOccurred+0xbc>
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800222a:	d01d      	beq.n	8002268 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800222c:	7cfb      	ldrb	r3, [r7, #19]
 800222e:	2b20      	cmp	r3, #32
 8002230:	d01a      	beq.n	8002268 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002240:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002242:	f7ff f8af 	bl	80013a4 <HAL_GetTick>
 8002246:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002248:	e00e      	b.n	8002268 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800224a:	f7ff f8ab 	bl	80013a4 <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b19      	cmp	r3, #25
 8002256:	d907      	bls.n	8002268 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	f043 0320 	orr.w	r3, r3, #32
 800225e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8002266:	e006      	b.n	8002276 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b20      	cmp	r3, #32
 8002274:	d1e9      	bne.n	800224a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	f003 0320 	and.w	r3, r3, #32
 8002280:	2b20      	cmp	r3, #32
 8002282:	d003      	beq.n	800228c <I2C_IsErrorOccurred+0xe0>
 8002284:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0aa      	beq.n	80021e2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800228c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002290:	2b00      	cmp	r3, #0
 8002292:	d103      	bne.n	800229c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2220      	movs	r2, #32
 800229a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800229c:	6a3b      	ldr	r3, [r7, #32]
 800229e:	f043 0304 	orr.w	r3, r3, #4
 80022a2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d00b      	beq.n	80022d4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80022bc:	6a3b      	ldr	r3, [r7, #32]
 80022be:	f043 0301 	orr.w	r3, r3, #1
 80022c2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00b      	beq.n	80022f6 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80022de:	6a3b      	ldr	r3, [r7, #32]
 80022e0:	f043 0308 	orr.w	r3, r3, #8
 80022e4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022ee:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d00b      	beq.n	8002318 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002300:	6a3b      	ldr	r3, [r7, #32]
 8002302:	f043 0302 	orr.w	r3, r3, #2
 8002306:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002310:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002318:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800231c:	2b00      	cmp	r3, #0
 800231e:	d01c      	beq.n	800235a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f7ff fe45 	bl	8001fb0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b0d      	ldr	r3, [pc, #52]	; (8002368 <I2C_IsErrorOccurred+0x1bc>)
 8002332:	400b      	ands	r3, r1
 8002334:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	431a      	orrs	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2220      	movs	r2, #32
 8002346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800235a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800235e:	4618      	mov	r0, r3
 8002360:	3728      	adds	r7, #40	; 0x28
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	fe00e800 	.word	0xfe00e800

0800236c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800236c:	b480      	push	{r7}
 800236e:	b087      	sub	sp, #28
 8002370:	af00      	add	r7, sp, #0
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	607b      	str	r3, [r7, #4]
 8002376:	460b      	mov	r3, r1
 8002378:	817b      	strh	r3, [r7, #10]
 800237a:	4613      	mov	r3, r2
 800237c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800237e:	897b      	ldrh	r3, [r7, #10]
 8002380:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002384:	7a7b      	ldrb	r3, [r7, #9]
 8002386:	041b      	lsls	r3, r3, #16
 8002388:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800238c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002392:	6a3b      	ldr	r3, [r7, #32]
 8002394:	4313      	orrs	r3, r2
 8002396:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800239a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	0d5b      	lsrs	r3, r3, #21
 80023a6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80023aa:	4b08      	ldr	r3, [pc, #32]	; (80023cc <I2C_TransferConfig+0x60>)
 80023ac:	430b      	orrs	r3, r1
 80023ae:	43db      	mvns	r3, r3
 80023b0:	ea02 0103 	and.w	r1, r2, r3
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	697a      	ldr	r2, [r7, #20]
 80023ba:	430a      	orrs	r2, r1
 80023bc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80023be:	bf00      	nop
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	03ff63ff 	.word	0x03ff63ff

080023d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b20      	cmp	r3, #32
 80023e4:	d138      	bne.n	8002458 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e032      	b.n	800245a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2224      	movs	r2, #36	; 0x24
 8002400:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f022 0201 	bic.w	r2, r2, #1
 8002412:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002422:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6819      	ldr	r1, [r3, #0]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	683a      	ldr	r2, [r7, #0]
 8002430:	430a      	orrs	r2, r1
 8002432:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2220      	movs	r2, #32
 8002448:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2200      	movs	r2, #0
 8002450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002454:	2300      	movs	r3, #0
 8002456:	e000      	b.n	800245a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002458:	2302      	movs	r3, #2
  }
}
 800245a:	4618      	mov	r0, r3
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr

08002466 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002466:	b480      	push	{r7}
 8002468:	b085      	sub	sp, #20
 800246a:	af00      	add	r7, sp, #0
 800246c:	6078      	str	r0, [r7, #4]
 800246e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b20      	cmp	r3, #32
 800247a:	d139      	bne.n	80024f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002482:	2b01      	cmp	r3, #1
 8002484:	d101      	bne.n	800248a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002486:	2302      	movs	r3, #2
 8002488:	e033      	b.n	80024f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2224      	movs	r2, #36	; 0x24
 8002496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f022 0201 	bic.w	r2, r2, #1
 80024a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80024b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	021b      	lsls	r3, r3, #8
 80024be:	68fa      	ldr	r2, [r7, #12]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	681a      	ldr	r2, [r3, #0]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f042 0201 	orr.w	r2, r2, #1
 80024da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e000      	b.n	80024f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024f0:	2302      	movs	r3, #2
  }
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002506:	af00      	add	r7, sp, #0
 8002508:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800250c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002510:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002512:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002516:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	f001 b823 	b.w	800356c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800252a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	2b00      	cmp	r3, #0
 8002538:	f000 817d 	beq.w	8002836 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800253c:	4bbc      	ldr	r3, [pc, #752]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 030c 	and.w	r3, r3, #12
 8002544:	2b04      	cmp	r3, #4
 8002546:	d00c      	beq.n	8002562 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002548:	4bb9      	ldr	r3, [pc, #740]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f003 030c 	and.w	r3, r3, #12
 8002550:	2b08      	cmp	r3, #8
 8002552:	d15c      	bne.n	800260e <HAL_RCC_OscConfig+0x10e>
 8002554:	4bb6      	ldr	r3, [pc, #728]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002560:	d155      	bne.n	800260e <HAL_RCC_OscConfig+0x10e>
 8002562:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002566:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002576:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	b2db      	uxtb	r3, r3
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	b2db      	uxtb	r3, r3
 800258a:	2b01      	cmp	r3, #1
 800258c:	d102      	bne.n	8002594 <HAL_RCC_OscConfig+0x94>
 800258e:	4ba8      	ldr	r3, [pc, #672]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	e015      	b.n	80025c0 <HAL_RCC_OscConfig+0xc0>
 8002594:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002598:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800259c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80025a0:	fa93 f3a3 	rbit	r3, r3
 80025a4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80025a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ac:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80025b0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80025b4:	fa93 f3a3 	rbit	r3, r3
 80025b8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80025bc:	4b9c      	ldr	r3, [pc, #624]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 80025be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025c4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 80025c8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80025cc:	fa92 f2a2 	rbit	r2, r2
 80025d0:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 80025d4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80025d8:	fab2 f282 	clz	r2, r2
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	f042 0220 	orr.w	r2, r2, #32
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	f002 021f 	and.w	r2, r2, #31
 80025e8:	2101      	movs	r1, #1
 80025ea:	fa01 f202 	lsl.w	r2, r1, r2
 80025ee:	4013      	ands	r3, r2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	f000 811f 	beq.w	8002834 <HAL_RCC_OscConfig+0x334>
 80025f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025fa:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	f040 8116 	bne.w	8002834 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	f000 bfaf 	b.w	800356c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800260e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002612:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800261e:	d106      	bne.n	800262e <HAL_RCC_OscConfig+0x12e>
 8002620:	4b83      	ldr	r3, [pc, #524]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a82      	ldr	r2, [pc, #520]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 8002626:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262a:	6013      	str	r3, [r2, #0]
 800262c:	e036      	b.n	800269c <HAL_RCC_OscConfig+0x19c>
 800262e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002632:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10c      	bne.n	8002658 <HAL_RCC_OscConfig+0x158>
 800263e:	4b7c      	ldr	r3, [pc, #496]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a7b      	ldr	r2, [pc, #492]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 8002644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002648:	6013      	str	r3, [r2, #0]
 800264a:	4b79      	ldr	r3, [pc, #484]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a78      	ldr	r2, [pc, #480]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 8002650:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	e021      	b.n	800269c <HAL_RCC_OscConfig+0x19c>
 8002658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002668:	d10c      	bne.n	8002684 <HAL_RCC_OscConfig+0x184>
 800266a:	4b71      	ldr	r3, [pc, #452]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a70      	ldr	r2, [pc, #448]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 8002670:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002674:	6013      	str	r3, [r2, #0]
 8002676:	4b6e      	ldr	r3, [pc, #440]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a6d      	ldr	r2, [pc, #436]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 800267c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	e00b      	b.n	800269c <HAL_RCC_OscConfig+0x19c>
 8002684:	4b6a      	ldr	r3, [pc, #424]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a69      	ldr	r2, [pc, #420]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 800268a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b67      	ldr	r3, [pc, #412]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a66      	ldr	r2, [pc, #408]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 8002696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800269a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800269c:	4b64      	ldr	r3, [pc, #400]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 800269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a0:	f023 020f 	bic.w	r2, r3, #15
 80026a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026a8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689b      	ldr	r3, [r3, #8]
 80026b0:	495f      	ldr	r1, [pc, #380]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026ba:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d059      	beq.n	800277a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c6:	f7fe fe6d 	bl	80013a4 <HAL_GetTick>
 80026ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ce:	e00a      	b.n	80026e6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d0:	f7fe fe68 	bl	80013a4 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b64      	cmp	r3, #100	; 0x64
 80026de:	d902      	bls.n	80026e6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	f000 bf43 	b.w	800356c <HAL_RCC_OscConfig+0x106c>
 80026e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026ea:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ee:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80026f2:	fa93 f3a3 	rbit	r3, r3
 80026f6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80026fa:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026fe:	fab3 f383 	clz	r3, r3
 8002702:	b2db      	uxtb	r3, r3
 8002704:	095b      	lsrs	r3, r3, #5
 8002706:	b2db      	uxtb	r3, r3
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b01      	cmp	r3, #1
 8002710:	d102      	bne.n	8002718 <HAL_RCC_OscConfig+0x218>
 8002712:	4b47      	ldr	r3, [pc, #284]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	e015      	b.n	8002744 <HAL_RCC_OscConfig+0x244>
 8002718:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800271c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002724:	fa93 f3a3 	rbit	r3, r3
 8002728:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 800272c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002730:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002734:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002740:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 8002742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002744:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002748:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 800274c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002750:	fa92 f2a2 	rbit	r2, r2
 8002754:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8002758:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 800275c:	fab2 f282 	clz	r2, r2
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	f042 0220 	orr.w	r2, r2, #32
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	f002 021f 	and.w	r2, r2, #31
 800276c:	2101      	movs	r1, #1
 800276e:	fa01 f202 	lsl.w	r2, r1, r2
 8002772:	4013      	ands	r3, r2
 8002774:	2b00      	cmp	r3, #0
 8002776:	d0ab      	beq.n	80026d0 <HAL_RCC_OscConfig+0x1d0>
 8002778:	e05d      	b.n	8002836 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277a:	f7fe fe13 	bl	80013a4 <HAL_GetTick>
 800277e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002782:	e00a      	b.n	800279a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002784:	f7fe fe0e 	bl	80013a4 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800278e:	1ad3      	subs	r3, r2, r3
 8002790:	2b64      	cmp	r3, #100	; 0x64
 8002792:	d902      	bls.n	800279a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	f000 bee9 	b.w	800356c <HAL_RCC_OscConfig+0x106c>
 800279a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800279e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80027a6:	fa93 f3a3 	rbit	r3, r3
 80027aa:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 80027ae:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027b2:	fab3 f383 	clz	r3, r3
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	b2db      	uxtb	r3, r3
 80027bc:	f043 0301 	orr.w	r3, r3, #1
 80027c0:	b2db      	uxtb	r3, r3
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d102      	bne.n	80027cc <HAL_RCC_OscConfig+0x2cc>
 80027c6:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	e015      	b.n	80027f8 <HAL_RCC_OscConfig+0x2f8>
 80027cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027d0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80027d8:	fa93 f3a3 	rbit	r3, r3
 80027dc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80027e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80027e4:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80027e8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80027ec:	fa93 f3a3 	rbit	r3, r3
 80027f0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80027f4:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <HAL_RCC_OscConfig+0x330>)
 80027f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027fc:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8002800:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002804:	fa92 f2a2 	rbit	r2, r2
 8002808:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 800280c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8002810:	fab2 f282 	clz	r2, r2
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	f042 0220 	orr.w	r2, r2, #32
 800281a:	b2d2      	uxtb	r2, r2
 800281c:	f002 021f 	and.w	r2, r2, #31
 8002820:	2101      	movs	r1, #1
 8002822:	fa01 f202 	lsl.w	r2, r1, r2
 8002826:	4013      	ands	r3, r2
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1ab      	bne.n	8002784 <HAL_RCC_OscConfig+0x284>
 800282c:	e003      	b.n	8002836 <HAL_RCC_OscConfig+0x336>
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002834:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 817d 	beq.w	8002b46 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800284c:	4ba6      	ldr	r3, [pc, #664]	; (8002ae8 <HAL_RCC_OscConfig+0x5e8>)
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 030c 	and.w	r3, r3, #12
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00b      	beq.n	8002870 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002858:	4ba3      	ldr	r3, [pc, #652]	; (8002ae8 <HAL_RCC_OscConfig+0x5e8>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f003 030c 	and.w	r3, r3, #12
 8002860:	2b08      	cmp	r3, #8
 8002862:	d172      	bne.n	800294a <HAL_RCC_OscConfig+0x44a>
 8002864:	4ba0      	ldr	r3, [pc, #640]	; (8002ae8 <HAL_RCC_OscConfig+0x5e8>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d16c      	bne.n	800294a <HAL_RCC_OscConfig+0x44a>
 8002870:	2302      	movs	r3, #2
 8002872:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002876:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800287a:	fa93 f3a3 	rbit	r3, r3
 800287e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8002882:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f043 0301 	orr.w	r3, r3, #1
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b01      	cmp	r3, #1
 8002898:	d102      	bne.n	80028a0 <HAL_RCC_OscConfig+0x3a0>
 800289a:	4b93      	ldr	r3, [pc, #588]	; (8002ae8 <HAL_RCC_OscConfig+0x5e8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	e013      	b.n	80028c8 <HAL_RCC_OscConfig+0x3c8>
 80028a0:	2302      	movs	r3, #2
 80028a2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80028aa:	fa93 f3a3 	rbit	r3, r3
 80028ae:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80028b2:	2302      	movs	r3, #2
 80028b4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80028b8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80028c4:	4b88      	ldr	r3, [pc, #544]	; (8002ae8 <HAL_RCC_OscConfig+0x5e8>)
 80028c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c8:	2202      	movs	r2, #2
 80028ca:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80028ce:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80028d2:	fa92 f2a2 	rbit	r2, r2
 80028d6:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80028da:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80028de:	fab2 f282 	clz	r2, r2
 80028e2:	b2d2      	uxtb	r2, r2
 80028e4:	f042 0220 	orr.w	r2, r2, #32
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	f002 021f 	and.w	r2, r2, #31
 80028ee:	2101      	movs	r1, #1
 80028f0:	fa01 f202 	lsl.w	r2, r1, r2
 80028f4:	4013      	ands	r3, r2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_RCC_OscConfig+0x410>
 80028fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d002      	beq.n	8002910 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	f000 be2e 	b.w	800356c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002910:	4b75      	ldr	r3, [pc, #468]	; (8002ae8 <HAL_RCC_OscConfig+0x5e8>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002918:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800291c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	21f8      	movs	r1, #248	; 0xf8
 8002926:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800292e:	fa91 f1a1 	rbit	r1, r1
 8002932:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002936:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800293a:	fab1 f181 	clz	r1, r1
 800293e:	b2c9      	uxtb	r1, r1
 8002940:	408b      	lsls	r3, r1
 8002942:	4969      	ldr	r1, [pc, #420]	; (8002ae8 <HAL_RCC_OscConfig+0x5e8>)
 8002944:	4313      	orrs	r3, r2
 8002946:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002948:	e0fd      	b.n	8002b46 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800294a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800294e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	691b      	ldr	r3, [r3, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	f000 8088 	beq.w	8002a6c <HAL_RCC_OscConfig+0x56c>
 800295c:	2301      	movs	r3, #1
 800295e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002962:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002966:	fa93 f3a3 	rbit	r3, r3
 800296a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800296e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	b2db      	uxtb	r3, r3
 8002978:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800297c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	461a      	mov	r2, r3
 8002984:	2301      	movs	r3, #1
 8002986:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002988:	f7fe fd0c 	bl	80013a4 <HAL_GetTick>
 800298c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002990:	e00a      	b.n	80029a8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002992:	f7fe fd07 	bl	80013a4 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d902      	bls.n	80029a8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	f000 bde2 	b.w	800356c <HAL_RCC_OscConfig+0x106c>
 80029a8:	2302      	movs	r3, #2
 80029aa:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80029b2:	fa93 f3a3 	rbit	r3, r3
 80029b6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80029ba:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	095b      	lsrs	r3, r3, #5
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d102      	bne.n	80029d8 <HAL_RCC_OscConfig+0x4d8>
 80029d2:	4b45      	ldr	r3, [pc, #276]	; (8002ae8 <HAL_RCC_OscConfig+0x5e8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	e013      	b.n	8002a00 <HAL_RCC_OscConfig+0x500>
 80029d8:	2302      	movs	r3, #2
 80029da:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029de:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80029e2:	fa93 f3a3 	rbit	r3, r3
 80029e6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80029ea:	2302      	movs	r3, #2
 80029ec:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80029f0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80029f4:	fa93 f3a3 	rbit	r3, r3
 80029f8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80029fc:	4b3a      	ldr	r3, [pc, #232]	; (8002ae8 <HAL_RCC_OscConfig+0x5e8>)
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	2202      	movs	r2, #2
 8002a02:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002a06:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002a0a:	fa92 f2a2 	rbit	r2, r2
 8002a0e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002a12:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002a16:	fab2 f282 	clz	r2, r2
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	f042 0220 	orr.w	r2, r2, #32
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	f002 021f 	and.w	r2, r2, #31
 8002a26:	2101      	movs	r1, #1
 8002a28:	fa01 f202 	lsl.w	r2, r1, r2
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0af      	beq.n	8002992 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a32:	4b2d      	ldr	r3, [pc, #180]	; (8002ae8 <HAL_RCC_OscConfig+0x5e8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	21f8      	movs	r1, #248	; 0xf8
 8002a48:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002a50:	fa91 f1a1 	rbit	r1, r1
 8002a54:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002a58:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8002a5c:	fab1 f181 	clz	r1, r1
 8002a60:	b2c9      	uxtb	r1, r1
 8002a62:	408b      	lsls	r3, r1
 8002a64:	4920      	ldr	r1, [pc, #128]	; (8002ae8 <HAL_RCC_OscConfig+0x5e8>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	600b      	str	r3, [r1, #0]
 8002a6a:	e06c      	b.n	8002b46 <HAL_RCC_OscConfig+0x646>
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a72:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8002a76:	fa93 f3a3 	rbit	r3, r3
 8002a7a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002a7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a82:	fab3 f383 	clz	r3, r3
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a8c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	461a      	mov	r2, r3
 8002a94:	2300      	movs	r3, #0
 8002a96:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a98:	f7fe fc84 	bl	80013a4 <HAL_GetTick>
 8002a9c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aa0:	e00a      	b.n	8002ab8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aa2:	f7fe fc7f 	bl	80013a4 <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d902      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	f000 bd5a 	b.w	800356c <HAL_RCC_OscConfig+0x106c>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002abe:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002ac2:	fa93 f3a3 	rbit	r3, r3
 8002ac6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002aca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ace:	fab3 f383 	clz	r3, r3
 8002ad2:	b2db      	uxtb	r3, r3
 8002ad4:	095b      	lsrs	r3, r3, #5
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d104      	bne.n	8002aec <HAL_RCC_OscConfig+0x5ec>
 8002ae2:	4b01      	ldr	r3, [pc, #4]	; (8002ae8 <HAL_RCC_OscConfig+0x5e8>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	e015      	b.n	8002b14 <HAL_RCC_OscConfig+0x614>
 8002ae8:	40021000 	.word	0x40021000
 8002aec:	2302      	movs	r3, #2
 8002aee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002af2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002af6:	fa93 f3a3 	rbit	r3, r3
 8002afa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002afe:	2302      	movs	r3, #2
 8002b00:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002b04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002b08:	fa93 f3a3 	rbit	r3, r3
 8002b0c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002b10:	4bc8      	ldr	r3, [pc, #800]	; (8002e34 <HAL_RCC_OscConfig+0x934>)
 8002b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b14:	2202      	movs	r2, #2
 8002b16:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002b1a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002b1e:	fa92 f2a2 	rbit	r2, r2
 8002b22:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002b26:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002b2a:	fab2 f282 	clz	r2, r2
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	f042 0220 	orr.w	r2, r2, #32
 8002b34:	b2d2      	uxtb	r2, r2
 8002b36:	f002 021f 	and.w	r2, r2, #31
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1ad      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b4a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	f000 8110 	beq.w	8002d7c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b60:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d079      	beq.n	8002c60 <HAL_RCC_OscConfig+0x760>
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8002b76:	fa93 f3a3 	rbit	r3, r3
 8002b7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002b7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b82:	fab3 f383 	clz	r3, r3
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	461a      	mov	r2, r3
 8002b8a:	4bab      	ldr	r3, [pc, #684]	; (8002e38 <HAL_RCC_OscConfig+0x938>)
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	461a      	mov	r2, r3
 8002b92:	2301      	movs	r3, #1
 8002b94:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b96:	f7fe fc05 	bl	80013a4 <HAL_GetTick>
 8002b9a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b9e:	e00a      	b.n	8002bb6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ba0:	f7fe fc00 	bl	80013a4 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d902      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	f000 bcdb 	b.w	800356c <HAL_RCC_OscConfig+0x106c>
 8002bb6:	2302      	movs	r3, #2
 8002bb8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bbc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002bc0:	fa93 f3a3 	rbit	r3, r3
 8002bc4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bcc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	fa93 f2a3 	rbit	r2, r3
 8002be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bfc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	fa93 f2a3 	rbit	r2, r3
 8002c06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c0a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002c0e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c10:	4b88      	ldr	r3, [pc, #544]	; (8002e34 <HAL_RCC_OscConfig+0x934>)
 8002c12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c18:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c1c:	2102      	movs	r1, #2
 8002c1e:	6019      	str	r1, [r3, #0]
 8002c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c24:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	fa93 f1a3 	rbit	r1, r3
 8002c2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c32:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c36:	6019      	str	r1, [r3, #0]
  return result;
 8002c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c3c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	fab3 f383 	clz	r3, r3
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	f003 031f 	and.w	r3, r3, #31
 8002c52:	2101      	movs	r1, #1
 8002c54:	fa01 f303 	lsl.w	r3, r1, r3
 8002c58:	4013      	ands	r3, r2
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d0a0      	beq.n	8002ba0 <HAL_RCC_OscConfig+0x6a0>
 8002c5e:	e08d      	b.n	8002d7c <HAL_RCC_OscConfig+0x87c>
 8002c60:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c64:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c68:	2201      	movs	r2, #1
 8002c6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c70:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	fa93 f2a3 	rbit	r2, r3
 8002c7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c7e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c82:	601a      	str	r2, [r3, #0]
  return result;
 8002c84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c88:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002c8c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	461a      	mov	r2, r3
 8002c96:	4b68      	ldr	r3, [pc, #416]	; (8002e38 <HAL_RCC_OscConfig+0x938>)
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ca2:	f7fe fb7f 	bl	80013a4 <HAL_GetTick>
 8002ca6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002caa:	e00a      	b.n	8002cc2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002cac:	f7fe fb7a 	bl	80013a4 <HAL_GetTick>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d902      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	f000 bc55 	b.w	800356c <HAL_RCC_OscConfig+0x106c>
 8002cc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cc6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002cca:	2202      	movs	r2, #2
 8002ccc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cd2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	fa93 f2a3 	rbit	r2, r3
 8002cdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ce0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002ce4:	601a      	str	r2, [r3, #0]
 8002ce6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cea:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002cee:	2202      	movs	r2, #2
 8002cf0:	601a      	str	r2, [r3, #0]
 8002cf2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002cf6:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	fa93 f2a3 	rbit	r2, r3
 8002d00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d04:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002d08:	601a      	str	r2, [r3, #0]
 8002d0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d12:	2202      	movs	r2, #2
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	fa93 f2a3 	rbit	r2, r3
 8002d24:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d28:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8002d2c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d2e:	4b41      	ldr	r3, [pc, #260]	; (8002e34 <HAL_RCC_OscConfig+0x934>)
 8002d30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d32:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d36:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	6019      	str	r1, [r3, #0]
 8002d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d42:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	fa93 f1a3 	rbit	r1, r3
 8002d4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d50:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d54:	6019      	str	r1, [r3, #0]
  return result;
 8002d56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d5a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	fab3 f383 	clz	r3, r3
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	f003 031f 	and.w	r3, r3, #31
 8002d70:	2101      	movs	r1, #1
 8002d72:	fa01 f303 	lsl.w	r3, r1, r3
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d197      	bne.n	8002cac <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002d80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 81a1 	beq.w	80030d4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d92:	2300      	movs	r3, #0
 8002d94:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d98:	4b26      	ldr	r3, [pc, #152]	; (8002e34 <HAL_RCC_OscConfig+0x934>)
 8002d9a:	69db      	ldr	r3, [r3, #28]
 8002d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d116      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da4:	4b23      	ldr	r3, [pc, #140]	; (8002e34 <HAL_RCC_OscConfig+0x934>)
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	4a22      	ldr	r2, [pc, #136]	; (8002e34 <HAL_RCC_OscConfig+0x934>)
 8002daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dae:	61d3      	str	r3, [r2, #28]
 8002db0:	4b20      	ldr	r3, [pc, #128]	; (8002e34 <HAL_RCC_OscConfig+0x934>)
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dbc:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002dc0:	601a      	str	r2, [r3, #0]
 8002dc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dc6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002dca:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dd2:	4b1a      	ldr	r3, [pc, #104]	; (8002e3c <HAL_RCC_OscConfig+0x93c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d11a      	bne.n	8002e14 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dde:	4b17      	ldr	r3, [pc, #92]	; (8002e3c <HAL_RCC_OscConfig+0x93c>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a16      	ldr	r2, [pc, #88]	; (8002e3c <HAL_RCC_OscConfig+0x93c>)
 8002de4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dea:	f7fe fadb 	bl	80013a4 <HAL_GetTick>
 8002dee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df2:	e009      	b.n	8002e08 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df4:	f7fe fad6 	bl	80013a4 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b64      	cmp	r3, #100	; 0x64
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e3b1      	b.n	800356c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e08:	4b0c      	ldr	r3, [pc, #48]	; (8002e3c <HAL_RCC_OscConfig+0x93c>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d0ef      	beq.n	8002df4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e18:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d10d      	bne.n	8002e40 <HAL_RCC_OscConfig+0x940>
 8002e24:	4b03      	ldr	r3, [pc, #12]	; (8002e34 <HAL_RCC_OscConfig+0x934>)
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	4a02      	ldr	r2, [pc, #8]	; (8002e34 <HAL_RCC_OscConfig+0x934>)
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6213      	str	r3, [r2, #32]
 8002e30:	e03c      	b.n	8002eac <HAL_RCC_OscConfig+0x9ac>
 8002e32:	bf00      	nop
 8002e34:	40021000 	.word	0x40021000
 8002e38:	10908120 	.word	0x10908120
 8002e3c:	40007000 	.word	0x40007000
 8002e40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d10c      	bne.n	8002e6a <HAL_RCC_OscConfig+0x96a>
 8002e50:	4bc1      	ldr	r3, [pc, #772]	; (8003158 <HAL_RCC_OscConfig+0xc58>)
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	4ac0      	ldr	r2, [pc, #768]	; (8003158 <HAL_RCC_OscConfig+0xc58>)
 8002e56:	f023 0301 	bic.w	r3, r3, #1
 8002e5a:	6213      	str	r3, [r2, #32]
 8002e5c:	4bbe      	ldr	r3, [pc, #760]	; (8003158 <HAL_RCC_OscConfig+0xc58>)
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	4abd      	ldr	r2, [pc, #756]	; (8003158 <HAL_RCC_OscConfig+0xc58>)
 8002e62:	f023 0304 	bic.w	r3, r3, #4
 8002e66:	6213      	str	r3, [r2, #32]
 8002e68:	e020      	b.n	8002eac <HAL_RCC_OscConfig+0x9ac>
 8002e6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	2b05      	cmp	r3, #5
 8002e78:	d10c      	bne.n	8002e94 <HAL_RCC_OscConfig+0x994>
 8002e7a:	4bb7      	ldr	r3, [pc, #732]	; (8003158 <HAL_RCC_OscConfig+0xc58>)
 8002e7c:	6a1b      	ldr	r3, [r3, #32]
 8002e7e:	4ab6      	ldr	r2, [pc, #728]	; (8003158 <HAL_RCC_OscConfig+0xc58>)
 8002e80:	f043 0304 	orr.w	r3, r3, #4
 8002e84:	6213      	str	r3, [r2, #32]
 8002e86:	4bb4      	ldr	r3, [pc, #720]	; (8003158 <HAL_RCC_OscConfig+0xc58>)
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	4ab3      	ldr	r2, [pc, #716]	; (8003158 <HAL_RCC_OscConfig+0xc58>)
 8002e8c:	f043 0301 	orr.w	r3, r3, #1
 8002e90:	6213      	str	r3, [r2, #32]
 8002e92:	e00b      	b.n	8002eac <HAL_RCC_OscConfig+0x9ac>
 8002e94:	4bb0      	ldr	r3, [pc, #704]	; (8003158 <HAL_RCC_OscConfig+0xc58>)
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	4aaf      	ldr	r2, [pc, #700]	; (8003158 <HAL_RCC_OscConfig+0xc58>)
 8002e9a:	f023 0301 	bic.w	r3, r3, #1
 8002e9e:	6213      	str	r3, [r2, #32]
 8002ea0:	4bad      	ldr	r3, [pc, #692]	; (8003158 <HAL_RCC_OscConfig+0xc58>)
 8002ea2:	6a1b      	ldr	r3, [r3, #32]
 8002ea4:	4aac      	ldr	r2, [pc, #688]	; (8003158 <HAL_RCC_OscConfig+0xc58>)
 8002ea6:	f023 0304 	bic.w	r3, r3, #4
 8002eaa:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002eac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eb0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	f000 8081 	beq.w	8002fc0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ebe:	f7fe fa71 	bl	80013a4 <HAL_GetTick>
 8002ec2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ec6:	e00b      	b.n	8002ee0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec8:	f7fe fa6c 	bl	80013a4 <HAL_GetTick>
 8002ecc:	4602      	mov	r2, r0
 8002ece:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d901      	bls.n	8002ee0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002edc:	2303      	movs	r3, #3
 8002ede:	e345      	b.n	800356c <HAL_RCC_OscConfig+0x106c>
 8002ee0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ee4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ee8:	2202      	movs	r2, #2
 8002eea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ef0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	fa93 f2a3 	rbit	r2, r3
 8002efa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002efe:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002f02:	601a      	str	r2, [r3, #0]
 8002f04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f08:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f0c:	2202      	movs	r2, #2
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f14:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	fa93 f2a3 	rbit	r2, r3
 8002f1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f22:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f26:	601a      	str	r2, [r3, #0]
  return result;
 8002f28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f2c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002f30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f32:	fab3 f383 	clz	r3, r3
 8002f36:	b2db      	uxtb	r3, r3
 8002f38:	095b      	lsrs	r3, r3, #5
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	f043 0302 	orr.w	r3, r3, #2
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b02      	cmp	r3, #2
 8002f44:	d102      	bne.n	8002f4c <HAL_RCC_OscConfig+0xa4c>
 8002f46:	4b84      	ldr	r3, [pc, #528]	; (8003158 <HAL_RCC_OscConfig+0xc58>)
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	e013      	b.n	8002f74 <HAL_RCC_OscConfig+0xa74>
 8002f4c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f50:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002f54:	2202      	movs	r2, #2
 8002f56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f5c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	fa93 f2a3 	rbit	r2, r3
 8002f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f6a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	4b79      	ldr	r3, [pc, #484]	; (8003158 <HAL_RCC_OscConfig+0xc58>)
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f78:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002f7c:	2102      	movs	r1, #2
 8002f7e:	6011      	str	r1, [r2, #0]
 8002f80:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f84:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002f88:	6812      	ldr	r2, [r2, #0]
 8002f8a:	fa92 f1a2 	rbit	r1, r2
 8002f8e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f92:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002f96:	6011      	str	r1, [r2, #0]
  return result;
 8002f98:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002f9c:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002fa0:	6812      	ldr	r2, [r2, #0]
 8002fa2:	fab2 f282 	clz	r2, r2
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	f002 021f 	and.w	r2, r2, #31
 8002fb2:	2101      	movs	r1, #1
 8002fb4:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d084      	beq.n	8002ec8 <HAL_RCC_OscConfig+0x9c8>
 8002fbe:	e07f      	b.n	80030c0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fc0:	f7fe f9f0 	bl	80013a4 <HAL_GetTick>
 8002fc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fc8:	e00b      	b.n	8002fe2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fca:	f7fe f9eb 	bl	80013a4 <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e2c4      	b.n	800356c <HAL_RCC_OscConfig+0x106c>
 8002fe2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002fe6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002fea:	2202      	movs	r2, #2
 8002fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ff2:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	fa93 f2a3 	rbit	r2, r3
 8002ffc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003000:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800300a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800300e:	2202      	movs	r2, #2
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003016:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	fa93 f2a3 	rbit	r2, r3
 8003020:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003024:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003028:	601a      	str	r2, [r3, #0]
  return result;
 800302a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800302e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003032:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003034:	fab3 f383 	clz	r3, r3
 8003038:	b2db      	uxtb	r3, r3
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f043 0302 	orr.w	r3, r3, #2
 8003042:	b2db      	uxtb	r3, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d102      	bne.n	800304e <HAL_RCC_OscConfig+0xb4e>
 8003048:	4b43      	ldr	r3, [pc, #268]	; (8003158 <HAL_RCC_OscConfig+0xc58>)
 800304a:	6a1b      	ldr	r3, [r3, #32]
 800304c:	e013      	b.n	8003076 <HAL_RCC_OscConfig+0xb76>
 800304e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003052:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003056:	2202      	movs	r2, #2
 8003058:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800305e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	fa93 f2a3 	rbit	r2, r3
 8003068:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800306c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	4b39      	ldr	r3, [pc, #228]	; (8003158 <HAL_RCC_OscConfig+0xc58>)
 8003074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003076:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800307a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800307e:	2102      	movs	r1, #2
 8003080:	6011      	str	r1, [r2, #0]
 8003082:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003086:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800308a:	6812      	ldr	r2, [r2, #0]
 800308c:	fa92 f1a2 	rbit	r1, r2
 8003090:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003094:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003098:	6011      	str	r1, [r2, #0]
  return result;
 800309a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800309e:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80030a2:	6812      	ldr	r2, [r2, #0]
 80030a4:	fab2 f282 	clz	r2, r2
 80030a8:	b2d2      	uxtb	r2, r2
 80030aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030ae:	b2d2      	uxtb	r2, r2
 80030b0:	f002 021f 	and.w	r2, r2, #31
 80030b4:	2101      	movs	r1, #1
 80030b6:	fa01 f202 	lsl.w	r2, r1, r2
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d184      	bne.n	8002fca <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80030c0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d105      	bne.n	80030d4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030c8:	4b23      	ldr	r3, [pc, #140]	; (8003158 <HAL_RCC_OscConfig+0xc58>)
 80030ca:	69db      	ldr	r3, [r3, #28]
 80030cc:	4a22      	ldr	r2, [pc, #136]	; (8003158 <HAL_RCC_OscConfig+0xc58>)
 80030ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030d2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030d8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	f000 8242 	beq.w	800356a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030e6:	4b1c      	ldr	r3, [pc, #112]	; (8003158 <HAL_RCC_OscConfig+0xc58>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 030c 	and.w	r3, r3, #12
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	f000 8213 	beq.w	800351a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80030f8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	2b02      	cmp	r3, #2
 8003102:	f040 8162 	bne.w	80033ca <HAL_RCC_OscConfig+0xeca>
 8003106:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800310a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800310e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003112:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003118:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	fa93 f2a3 	rbit	r2, r3
 8003122:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003126:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800312a:	601a      	str	r2, [r3, #0]
  return result;
 800312c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003130:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003134:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003136:	fab3 f383 	clz	r3, r3
 800313a:	b2db      	uxtb	r3, r3
 800313c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003140:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	461a      	mov	r2, r3
 8003148:	2300      	movs	r3, #0
 800314a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800314c:	f7fe f92a 	bl	80013a4 <HAL_GetTick>
 8003150:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003154:	e00c      	b.n	8003170 <HAL_RCC_OscConfig+0xc70>
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800315c:	f7fe f922 	bl	80013a4 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d901      	bls.n	8003170 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800316c:	2303      	movs	r3, #3
 800316e:	e1fd      	b.n	800356c <HAL_RCC_OscConfig+0x106c>
 8003170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003174:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003178:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800317c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003182:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	fa93 f2a3 	rbit	r2, r3
 800318c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003190:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003194:	601a      	str	r2, [r3, #0]
  return result;
 8003196:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800319a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800319e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a0:	fab3 f383 	clz	r3, r3
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	095b      	lsrs	r3, r3, #5
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d102      	bne.n	80031ba <HAL_RCC_OscConfig+0xcba>
 80031b4:	4bb0      	ldr	r3, [pc, #704]	; (8003478 <HAL_RCC_OscConfig+0xf78>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	e027      	b.n	800320a <HAL_RCC_OscConfig+0xd0a>
 80031ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031be:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80031c2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031cc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	fa93 f2a3 	rbit	r2, r3
 80031d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031da:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031e4:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80031e8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f2:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	fa93 f2a3 	rbit	r2, r3
 80031fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003200:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003204:	601a      	str	r2, [r3, #0]
 8003206:	4b9c      	ldr	r3, [pc, #624]	; (8003478 <HAL_RCC_OscConfig+0xf78>)
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800320e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003212:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003216:	6011      	str	r1, [r2, #0]
 8003218:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800321c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003220:	6812      	ldr	r2, [r2, #0]
 8003222:	fa92 f1a2 	rbit	r1, r2
 8003226:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800322a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800322e:	6011      	str	r1, [r2, #0]
  return result;
 8003230:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003234:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003238:	6812      	ldr	r2, [r2, #0]
 800323a:	fab2 f282 	clz	r2, r2
 800323e:	b2d2      	uxtb	r2, r2
 8003240:	f042 0220 	orr.w	r2, r2, #32
 8003244:	b2d2      	uxtb	r2, r2
 8003246:	f002 021f 	and.w	r2, r2, #31
 800324a:	2101      	movs	r1, #1
 800324c:	fa01 f202 	lsl.w	r2, r1, r2
 8003250:	4013      	ands	r3, r2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d182      	bne.n	800315c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003256:	4b88      	ldr	r3, [pc, #544]	; (8003478 <HAL_RCC_OscConfig+0xf78>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800325e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003262:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800326a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800326e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	430b      	orrs	r3, r1
 8003278:	497f      	ldr	r1, [pc, #508]	; (8003478 <HAL_RCC_OscConfig+0xf78>)
 800327a:	4313      	orrs	r3, r2
 800327c:	604b      	str	r3, [r1, #4]
 800327e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003282:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003286:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800328a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003290:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	fa93 f2a3 	rbit	r2, r3
 800329a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800329e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80032a2:	601a      	str	r2, [r3, #0]
  return result;
 80032a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032a8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80032ac:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80032b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	461a      	mov	r2, r3
 80032c0:	2301      	movs	r3, #1
 80032c2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032c4:	f7fe f86e 	bl	80013a4 <HAL_GetTick>
 80032c8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032cc:	e009      	b.n	80032e2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032ce:	f7fe f869 	bl	80013a4 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e144      	b.n	800356c <HAL_RCC_OscConfig+0x106c>
 80032e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032e6:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80032ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80032ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f4:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	fa93 f2a3 	rbit	r2, r3
 80032fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003302:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003306:	601a      	str	r2, [r3, #0]
  return result;
 8003308:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800330c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003310:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003312:	fab3 f383 	clz	r3, r3
 8003316:	b2db      	uxtb	r3, r3
 8003318:	095b      	lsrs	r3, r3, #5
 800331a:	b2db      	uxtb	r3, r3
 800331c:	f043 0301 	orr.w	r3, r3, #1
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d102      	bne.n	800332c <HAL_RCC_OscConfig+0xe2c>
 8003326:	4b54      	ldr	r3, [pc, #336]	; (8003478 <HAL_RCC_OscConfig+0xf78>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	e027      	b.n	800337c <HAL_RCC_OscConfig+0xe7c>
 800332c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003330:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003334:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003338:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800333e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	fa93 f2a3 	rbit	r2, r3
 8003348:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800334c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003356:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800335a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800335e:	601a      	str	r2, [r3, #0]
 8003360:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003364:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	fa93 f2a3 	rbit	r2, r3
 800336e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003372:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003376:	601a      	str	r2, [r3, #0]
 8003378:	4b3f      	ldr	r3, [pc, #252]	; (8003478 <HAL_RCC_OscConfig+0xf78>)
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003380:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003384:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003388:	6011      	str	r1, [r2, #0]
 800338a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800338e:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	fa92 f1a2 	rbit	r1, r2
 8003398:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800339c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80033a0:	6011      	str	r1, [r2, #0]
  return result;
 80033a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80033a6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	fab2 f282 	clz	r2, r2
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	f042 0220 	orr.w	r2, r2, #32
 80033b6:	b2d2      	uxtb	r2, r2
 80033b8:	f002 021f 	and.w	r2, r2, #31
 80033bc:	2101      	movs	r1, #1
 80033be:	fa01 f202 	lsl.w	r2, r1, r2
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d082      	beq.n	80032ce <HAL_RCC_OscConfig+0xdce>
 80033c8:	e0cf      	b.n	800356a <HAL_RCC_OscConfig+0x106a>
 80033ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ce:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80033d2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80033d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033dc:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	fa93 f2a3 	rbit	r2, r3
 80033e6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033ea:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80033ee:	601a      	str	r2, [r3, #0]
  return result;
 80033f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80033f4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80033f8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fa:	fab3 f383 	clz	r3, r3
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003404:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	461a      	mov	r2, r3
 800340c:	2300      	movs	r3, #0
 800340e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003410:	f7fd ffc8 	bl	80013a4 <HAL_GetTick>
 8003414:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003418:	e009      	b.n	800342e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800341a:	f7fd ffc3 	bl	80013a4 <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e09e      	b.n	800356c <HAL_RCC_OscConfig+0x106c>
 800342e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003432:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003436:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800343a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003440:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	fa93 f2a3 	rbit	r2, r3
 800344a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800344e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003452:	601a      	str	r2, [r3, #0]
  return result;
 8003454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003458:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 800345c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	095b      	lsrs	r3, r3, #5
 8003466:	b2db      	uxtb	r3, r3
 8003468:	f043 0301 	orr.w	r3, r3, #1
 800346c:	b2db      	uxtb	r3, r3
 800346e:	2b01      	cmp	r3, #1
 8003470:	d104      	bne.n	800347c <HAL_RCC_OscConfig+0xf7c>
 8003472:	4b01      	ldr	r3, [pc, #4]	; (8003478 <HAL_RCC_OscConfig+0xf78>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	e029      	b.n	80034cc <HAL_RCC_OscConfig+0xfcc>
 8003478:	40021000 	.word	0x40021000
 800347c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003480:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003484:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003488:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800348e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	fa93 f2a3 	rbit	r2, r3
 8003498:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800349c:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80034a0:	601a      	str	r2, [r3, #0]
 80034a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80034aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80034ae:	601a      	str	r2, [r3, #0]
 80034b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	fa93 f2a3 	rbit	r2, r3
 80034be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	4b2b      	ldr	r3, [pc, #172]	; (8003578 <HAL_RCC_OscConfig+0x1078>)
 80034ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034cc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034d0:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80034d4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80034d8:	6011      	str	r1, [r2, #0]
 80034da:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034de:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80034e2:	6812      	ldr	r2, [r2, #0]
 80034e4:	fa92 f1a2 	rbit	r1, r2
 80034e8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034ec:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80034f0:	6011      	str	r1, [r2, #0]
  return result;
 80034f2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80034f6:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80034fa:	6812      	ldr	r2, [r2, #0]
 80034fc:	fab2 f282 	clz	r2, r2
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	f042 0220 	orr.w	r2, r2, #32
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	f002 021f 	and.w	r2, r2, #31
 800350c:	2101      	movs	r1, #1
 800350e:	fa01 f202 	lsl.w	r2, r1, r2
 8003512:	4013      	ands	r3, r2
 8003514:	2b00      	cmp	r3, #0
 8003516:	d180      	bne.n	800341a <HAL_RCC_OscConfig+0xf1a>
 8003518:	e027      	b.n	800356a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800351a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800351e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	69db      	ldr	r3, [r3, #28]
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e01e      	b.n	800356c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800352e:	4b12      	ldr	r3, [pc, #72]	; (8003578 <HAL_RCC_OscConfig+0x1078>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003536:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800353a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800353e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003542:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6a1b      	ldr	r3, [r3, #32]
 800354a:	429a      	cmp	r2, r3
 800354c:	d10b      	bne.n	8003566 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800354e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003552:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003556:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800355a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003562:	429a      	cmp	r2, r3
 8003564:	d001      	beq.n	800356a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e000      	b.n	800356c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40021000 	.word	0x40021000

0800357c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b09e      	sub	sp, #120	; 0x78
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003586:	2300      	movs	r3, #0
 8003588:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d101      	bne.n	8003594 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	e162      	b.n	800385a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003594:	4b90      	ldr	r3, [pc, #576]	; (80037d8 <HAL_RCC_ClockConfig+0x25c>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d910      	bls.n	80035c4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b8d      	ldr	r3, [pc, #564]	; (80037d8 <HAL_RCC_ClockConfig+0x25c>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f023 0207 	bic.w	r2, r3, #7
 80035aa:	498b      	ldr	r1, [pc, #556]	; (80037d8 <HAL_RCC_ClockConfig+0x25c>)
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b2:	4b89      	ldr	r3, [pc, #548]	; (80037d8 <HAL_RCC_ClockConfig+0x25c>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e14a      	b.n	800385a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0302 	and.w	r3, r3, #2
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035d0:	4b82      	ldr	r3, [pc, #520]	; (80037dc <HAL_RCC_ClockConfig+0x260>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	497f      	ldr	r1, [pc, #508]	; (80037dc <HAL_RCC_ClockConfig+0x260>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f000 80dc 	beq.w	80037a8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d13c      	bne.n	8003672 <HAL_RCC_ClockConfig+0xf6>
 80035f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80035fc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003600:	fa93 f3a3 	rbit	r3, r3
 8003604:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003608:	fab3 f383 	clz	r3, r3
 800360c:	b2db      	uxtb	r3, r3
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	b2db      	uxtb	r3, r3
 8003612:	f043 0301 	orr.w	r3, r3, #1
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b01      	cmp	r3, #1
 800361a:	d102      	bne.n	8003622 <HAL_RCC_ClockConfig+0xa6>
 800361c:	4b6f      	ldr	r3, [pc, #444]	; (80037dc <HAL_RCC_ClockConfig+0x260>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	e00f      	b.n	8003642 <HAL_RCC_ClockConfig+0xc6>
 8003622:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003626:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003628:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	667b      	str	r3, [r7, #100]	; 0x64
 8003630:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003634:	663b      	str	r3, [r7, #96]	; 0x60
 8003636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003638:	fa93 f3a3 	rbit	r3, r3
 800363c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800363e:	4b67      	ldr	r3, [pc, #412]	; (80037dc <HAL_RCC_ClockConfig+0x260>)
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003646:	65ba      	str	r2, [r7, #88]	; 0x58
 8003648:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800364a:	fa92 f2a2 	rbit	r2, r2
 800364e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003650:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003652:	fab2 f282 	clz	r2, r2
 8003656:	b2d2      	uxtb	r2, r2
 8003658:	f042 0220 	orr.w	r2, r2, #32
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	f002 021f 	and.w	r2, r2, #31
 8003662:	2101      	movs	r1, #1
 8003664:	fa01 f202 	lsl.w	r2, r1, r2
 8003668:	4013      	ands	r3, r2
 800366a:	2b00      	cmp	r3, #0
 800366c:	d17b      	bne.n	8003766 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e0f3      	b.n	800385a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b02      	cmp	r3, #2
 8003678:	d13c      	bne.n	80036f4 <HAL_RCC_ClockConfig+0x178>
 800367a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800367e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003682:	fa93 f3a3 	rbit	r3, r3
 8003686:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003688:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800368a:	fab3 f383 	clz	r3, r3
 800368e:	b2db      	uxtb	r3, r3
 8003690:	095b      	lsrs	r3, r3, #5
 8003692:	b2db      	uxtb	r3, r3
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b01      	cmp	r3, #1
 800369c:	d102      	bne.n	80036a4 <HAL_RCC_ClockConfig+0x128>
 800369e:	4b4f      	ldr	r3, [pc, #316]	; (80037dc <HAL_RCC_ClockConfig+0x260>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	e00f      	b.n	80036c4 <HAL_RCC_ClockConfig+0x148>
 80036a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80036ac:	fa93 f3a3 	rbit	r3, r3
 80036b0:	647b      	str	r3, [r7, #68]	; 0x44
 80036b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80036b6:	643b      	str	r3, [r7, #64]	; 0x40
 80036b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ba:	fa93 f3a3 	rbit	r3, r3
 80036be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036c0:	4b46      	ldr	r3, [pc, #280]	; (80037dc <HAL_RCC_ClockConfig+0x260>)
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80036c8:	63ba      	str	r2, [r7, #56]	; 0x38
 80036ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036cc:	fa92 f2a2 	rbit	r2, r2
 80036d0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 80036d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036d4:	fab2 f282 	clz	r2, r2
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	f042 0220 	orr.w	r2, r2, #32
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	f002 021f 	and.w	r2, r2, #31
 80036e4:	2101      	movs	r1, #1
 80036e6:	fa01 f202 	lsl.w	r2, r1, r2
 80036ea:	4013      	ands	r3, r2
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d13a      	bne.n	8003766 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0b2      	b.n	800385a <HAL_RCC_ClockConfig+0x2de>
 80036f4:	2302      	movs	r3, #2
 80036f6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036fa:	fa93 f3a3 	rbit	r3, r3
 80036fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	095b      	lsrs	r3, r3, #5
 800370a:	b2db      	uxtb	r3, r3
 800370c:	f043 0301 	orr.w	r3, r3, #1
 8003710:	b2db      	uxtb	r3, r3
 8003712:	2b01      	cmp	r3, #1
 8003714:	d102      	bne.n	800371c <HAL_RCC_ClockConfig+0x1a0>
 8003716:	4b31      	ldr	r3, [pc, #196]	; (80037dc <HAL_RCC_ClockConfig+0x260>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	e00d      	b.n	8003738 <HAL_RCC_ClockConfig+0x1bc>
 800371c:	2302      	movs	r3, #2
 800371e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003722:	fa93 f3a3 	rbit	r3, r3
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
 8003728:	2302      	movs	r3, #2
 800372a:	623b      	str	r3, [r7, #32]
 800372c:	6a3b      	ldr	r3, [r7, #32]
 800372e:	fa93 f3a3 	rbit	r3, r3
 8003732:	61fb      	str	r3, [r7, #28]
 8003734:	4b29      	ldr	r3, [pc, #164]	; (80037dc <HAL_RCC_ClockConfig+0x260>)
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	2202      	movs	r2, #2
 800373a:	61ba      	str	r2, [r7, #24]
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	fa92 f2a2 	rbit	r2, r2
 8003742:	617a      	str	r2, [r7, #20]
  return result;
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	fab2 f282 	clz	r2, r2
 800374a:	b2d2      	uxtb	r2, r2
 800374c:	f042 0220 	orr.w	r2, r2, #32
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	f002 021f 	and.w	r2, r2, #31
 8003756:	2101      	movs	r1, #1
 8003758:	fa01 f202 	lsl.w	r2, r1, r2
 800375c:	4013      	ands	r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e079      	b.n	800385a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003766:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <HAL_RCC_ClockConfig+0x260>)
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	f023 0203 	bic.w	r2, r3, #3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	491a      	ldr	r1, [pc, #104]	; (80037dc <HAL_RCC_ClockConfig+0x260>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003778:	f7fd fe14 	bl	80013a4 <HAL_GetTick>
 800377c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377e:	e00a      	b.n	8003796 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003780:	f7fd fe10 	bl	80013a4 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	f241 3288 	movw	r2, #5000	; 0x1388
 800378e:	4293      	cmp	r3, r2
 8003790:	d901      	bls.n	8003796 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e061      	b.n	800385a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003796:	4b11      	ldr	r3, [pc, #68]	; (80037dc <HAL_RCC_ClockConfig+0x260>)
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f003 020c 	and.w	r2, r3, #12
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	009b      	lsls	r3, r3, #2
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d1eb      	bne.n	8003780 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037a8:	4b0b      	ldr	r3, [pc, #44]	; (80037d8 <HAL_RCC_ClockConfig+0x25c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0307 	and.w	r3, r3, #7
 80037b0:	683a      	ldr	r2, [r7, #0]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d214      	bcs.n	80037e0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b6:	4b08      	ldr	r3, [pc, #32]	; (80037d8 <HAL_RCC_ClockConfig+0x25c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f023 0207 	bic.w	r2, r3, #7
 80037be:	4906      	ldr	r1, [pc, #24]	; (80037d8 <HAL_RCC_ClockConfig+0x25c>)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c6:	4b04      	ldr	r3, [pc, #16]	; (80037d8 <HAL_RCC_ClockConfig+0x25c>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	683a      	ldr	r2, [r7, #0]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d005      	beq.n	80037e0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80037d4:	2301      	movs	r3, #1
 80037d6:	e040      	b.n	800385a <HAL_RCC_ClockConfig+0x2de>
 80037d8:	40022000 	.word	0x40022000
 80037dc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f003 0304 	and.w	r3, r3, #4
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d008      	beq.n	80037fe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037ec:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HAL_RCC_ClockConfig+0x2e8>)
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	491a      	ldr	r1, [pc, #104]	; (8003864 <HAL_RCC_ClockConfig+0x2e8>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d009      	beq.n	800381e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800380a:	4b16      	ldr	r3, [pc, #88]	; (8003864 <HAL_RCC_ClockConfig+0x2e8>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	691b      	ldr	r3, [r3, #16]
 8003816:	00db      	lsls	r3, r3, #3
 8003818:	4912      	ldr	r1, [pc, #72]	; (8003864 <HAL_RCC_ClockConfig+0x2e8>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800381e:	f000 f829 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 8003822:	4601      	mov	r1, r0
 8003824:	4b0f      	ldr	r3, [pc, #60]	; (8003864 <HAL_RCC_ClockConfig+0x2e8>)
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800382c:	22f0      	movs	r2, #240	; 0xf0
 800382e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003830:	693a      	ldr	r2, [r7, #16]
 8003832:	fa92 f2a2 	rbit	r2, r2
 8003836:	60fa      	str	r2, [r7, #12]
  return result;
 8003838:	68fa      	ldr	r2, [r7, #12]
 800383a:	fab2 f282 	clz	r2, r2
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	40d3      	lsrs	r3, r2
 8003842:	4a09      	ldr	r2, [pc, #36]	; (8003868 <HAL_RCC_ClockConfig+0x2ec>)
 8003844:	5cd3      	ldrb	r3, [r2, r3]
 8003846:	fa21 f303 	lsr.w	r3, r1, r3
 800384a:	4a08      	ldr	r2, [pc, #32]	; (800386c <HAL_RCC_ClockConfig+0x2f0>)
 800384c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800384e:	4b08      	ldr	r3, [pc, #32]	; (8003870 <HAL_RCC_ClockConfig+0x2f4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fd fd62 	bl	800131c <HAL_InitTick>
  
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3778      	adds	r7, #120	; 0x78
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
 8003868:	080054f4 	.word	0x080054f4
 800386c:	20000004 	.word	0x20000004
 8003870:	20000008 	.word	0x20000008

08003874 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003874:	b480      	push	{r7}
 8003876:	b08b      	sub	sp, #44	; 0x2c
 8003878:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	61fb      	str	r3, [r7, #28]
 800387e:	2300      	movs	r3, #0
 8003880:	61bb      	str	r3, [r7, #24]
 8003882:	2300      	movs	r3, #0
 8003884:	627b      	str	r3, [r7, #36]	; 0x24
 8003886:	2300      	movs	r3, #0
 8003888:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800388a:	2300      	movs	r3, #0
 800388c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800388e:	4b29      	ldr	r3, [pc, #164]	; (8003934 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	f003 030c 	and.w	r3, r3, #12
 800389a:	2b04      	cmp	r3, #4
 800389c:	d002      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x30>
 800389e:	2b08      	cmp	r3, #8
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_GetSysClockFreq+0x36>
 80038a2:	e03c      	b.n	800391e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038a4:	4b24      	ldr	r3, [pc, #144]	; (8003938 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038a6:	623b      	str	r3, [r7, #32]
      break;
 80038a8:	e03c      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80038aa:	69fb      	ldr	r3, [r7, #28]
 80038ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80038b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80038b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b6:	68ba      	ldr	r2, [r7, #8]
 80038b8:	fa92 f2a2 	rbit	r2, r2
 80038bc:	607a      	str	r2, [r7, #4]
  return result;
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	fab2 f282 	clz	r2, r2
 80038c4:	b2d2      	uxtb	r2, r2
 80038c6:	40d3      	lsrs	r3, r2
 80038c8:	4a1c      	ldr	r2, [pc, #112]	; (800393c <HAL_RCC_GetSysClockFreq+0xc8>)
 80038ca:	5cd3      	ldrb	r3, [r2, r3]
 80038cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80038ce:	4b19      	ldr	r3, [pc, #100]	; (8003934 <HAL_RCC_GetSysClockFreq+0xc0>)
 80038d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d2:	f003 030f 	and.w	r3, r3, #15
 80038d6:	220f      	movs	r2, #15
 80038d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	fa92 f2a2 	rbit	r2, r2
 80038e0:	60fa      	str	r2, [r7, #12]
  return result;
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	fab2 f282 	clz	r2, r2
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	40d3      	lsrs	r3, r2
 80038ec:	4a14      	ldr	r2, [pc, #80]	; (8003940 <HAL_RCC_GetSysClockFreq+0xcc>)
 80038ee:	5cd3      	ldrb	r3, [r2, r3]
 80038f0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80038fc:	4a0e      	ldr	r2, [pc, #56]	; (8003938 <HAL_RCC_GetSysClockFreq+0xc4>)
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	fbb2 f2f3 	udiv	r2, r2, r3
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	fb02 f303 	mul.w	r3, r2, r3
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
 800390c:	e004      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	4a0c      	ldr	r2, [pc, #48]	; (8003944 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003912:	fb02 f303 	mul.w	r3, r2, r3
 8003916:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800391a:	623b      	str	r3, [r7, #32]
      break;
 800391c:	e002      	b.n	8003924 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800391e:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003920:	623b      	str	r3, [r7, #32]
      break;
 8003922:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003924:	6a3b      	ldr	r3, [r7, #32]
}
 8003926:	4618      	mov	r0, r3
 8003928:	372c      	adds	r7, #44	; 0x2c
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	40021000 	.word	0x40021000
 8003938:	007a1200 	.word	0x007a1200
 800393c:	0800550c 	.word	0x0800550c
 8003940:	0800551c 	.word	0x0800551c
 8003944:	003d0900 	.word	0x003d0900

08003948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800394c:	4b03      	ldr	r3, [pc, #12]	; (800395c <HAL_RCC_GetHCLKFreq+0x14>)
 800394e:	681b      	ldr	r3, [r3, #0]
}
 8003950:	4618      	mov	r0, r3
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	20000004 	.word	0x20000004

08003960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b082      	sub	sp, #8
 8003964:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003966:	f7ff ffef 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 800396a:	4601      	mov	r1, r0
 800396c:	4b0b      	ldr	r3, [pc, #44]	; (800399c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003974:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8003978:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	fa92 f2a2 	rbit	r2, r2
 8003980:	603a      	str	r2, [r7, #0]
  return result;
 8003982:	683a      	ldr	r2, [r7, #0]
 8003984:	fab2 f282 	clz	r2, r2
 8003988:	b2d2      	uxtb	r2, r2
 800398a:	40d3      	lsrs	r3, r2
 800398c:	4a04      	ldr	r2, [pc, #16]	; (80039a0 <HAL_RCC_GetPCLK1Freq+0x40>)
 800398e:	5cd3      	ldrb	r3, [r2, r3]
 8003990:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003994:	4618      	mov	r0, r3
 8003996:	3708      	adds	r7, #8
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40021000 	.word	0x40021000
 80039a0:	08005504 	.word	0x08005504

080039a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b082      	sub	sp, #8
 80039a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80039aa:	f7ff ffcd 	bl	8003948 <HAL_RCC_GetHCLKFreq>
 80039ae:	4601      	mov	r1, r0
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80039b8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80039bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	fa92 f2a2 	rbit	r2, r2
 80039c4:	603a      	str	r2, [r7, #0]
  return result;
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	fab2 f282 	clz	r2, r2
 80039cc:	b2d2      	uxtb	r2, r2
 80039ce:	40d3      	lsrs	r3, r2
 80039d0:	4a04      	ldr	r2, [pc, #16]	; (80039e4 <HAL_RCC_GetPCLK2Freq+0x40>)
 80039d2:	5cd3      	ldrb	r3, [r2, r3]
 80039d4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80039d8:	4618      	mov	r0, r3
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40021000 	.word	0x40021000
 80039e4:	08005504 	.word	0x08005504

080039e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b092      	sub	sp, #72	; 0x48
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039f0:	2300      	movs	r3, #0
 80039f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80039f4:	2300      	movs	r3, #0
 80039f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80039f8:	2300      	movs	r3, #0
 80039fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 80d4 	beq.w	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a0c:	4b4e      	ldr	r3, [pc, #312]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a0e:	69db      	ldr	r3, [r3, #28]
 8003a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d10e      	bne.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a18:	4b4b      	ldr	r3, [pc, #300]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1a:	69db      	ldr	r3, [r3, #28]
 8003a1c:	4a4a      	ldr	r2, [pc, #296]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a22:	61d3      	str	r3, [r2, #28]
 8003a24:	4b48      	ldr	r3, [pc, #288]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a2c:	60bb      	str	r3, [r7, #8]
 8003a2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a30:	2301      	movs	r3, #1
 8003a32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a36:	4b45      	ldr	r3, [pc, #276]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d118      	bne.n	8003a74 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a42:	4b42      	ldr	r3, [pc, #264]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a41      	ldr	r2, [pc, #260]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a4c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a4e:	f7fd fca9 	bl	80013a4 <HAL_GetTick>
 8003a52:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a54:	e008      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a56:	f7fd fca5 	bl	80013a4 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	2b64      	cmp	r3, #100	; 0x64
 8003a62:	d901      	bls.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	e14b      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a68:	4b38      	ldr	r3, [pc, #224]	; (8003b4c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d0f0      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a74:	4b34      	ldr	r3, [pc, #208]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	f000 8084 	beq.w	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d07c      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a94:	4b2c      	ldr	r3, [pc, #176]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003a96:	6a1b      	ldr	r3, [r3, #32]
 8003a98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003aa2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	fa93 f3a3 	rbit	r3, r3
 8003aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003aac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003aae:	fab3 f383 	clz	r3, r3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003ab8:	4413      	add	r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	461a      	mov	r2, r3
 8003abe:	2301      	movs	r3, #1
 8003ac0:	6013      	str	r3, [r2, #0]
 8003ac2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ac6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aca:	fa93 f3a3 	rbit	r3, r3
 8003ace:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ad2:	fab3 f383 	clz	r3, r3
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	461a      	mov	r2, r3
 8003ada:	4b1d      	ldr	r3, [pc, #116]	; (8003b50 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003adc:	4413      	add	r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003ae6:	4a18      	ldr	r2, [pc, #96]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aea:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d04b      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003af6:	f7fd fc55 	bl	80013a4 <HAL_GetTick>
 8003afa:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afc:	e00a      	b.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003afe:	f7fd fc51 	bl	80013a4 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e0f5      	b.n	8003d00 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003b14:	2302      	movs	r3, #2
 8003b16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1a:	fa93 f3a3 	rbit	r3, r3
 8003b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8003b20:	2302      	movs	r3, #2
 8003b22:	623b      	str	r3, [r7, #32]
 8003b24:	6a3b      	ldr	r3, [r7, #32]
 8003b26:	fa93 f3a3 	rbit	r3, r3
 8003b2a:	61fb      	str	r3, [r7, #28]
  return result;
 8003b2c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b2e:	fab3 f383 	clz	r3, r3
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	095b      	lsrs	r3, r3, #5
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	f043 0302 	orr.w	r3, r3, #2
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d108      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003b42:	4b01      	ldr	r3, [pc, #4]	; (8003b48 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	e00d      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	40007000 	.word	0x40007000
 8003b50:	10908100 	.word	0x10908100
 8003b54:	2302      	movs	r3, #2
 8003b56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	fa93 f3a3 	rbit	r3, r3
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	4b69      	ldr	r3, [pc, #420]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	2202      	movs	r2, #2
 8003b66:	613a      	str	r2, [r7, #16]
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	fa92 f2a2 	rbit	r2, r2
 8003b6e:	60fa      	str	r2, [r7, #12]
  return result;
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	fab2 f282 	clz	r2, r2
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	f002 021f 	and.w	r2, r2, #31
 8003b82:	2101      	movs	r1, #1
 8003b84:	fa01 f202 	lsl.w	r2, r1, r2
 8003b88:	4013      	ands	r3, r2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0b7      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003b8e:	4b5e      	ldr	r3, [pc, #376]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	495b      	ldr	r1, [pc, #364]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003ba0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d105      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ba8:	4b57      	ldr	r3, [pc, #348]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003baa:	69db      	ldr	r3, [r3, #28]
 8003bac:	4a56      	ldr	r2, [pc, #344]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bc0:	4b51      	ldr	r3, [pc, #324]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc4:	f023 0203 	bic.w	r2, r3, #3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	494e      	ldr	r1, [pc, #312]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0320 	and.w	r3, r3, #32
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d008      	beq.n	8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bde:	4b4a      	ldr	r3, [pc, #296]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	f023 0210 	bic.w	r2, r3, #16
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	4947      	ldr	r1, [pc, #284]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d008      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003bfc:	4b42      	ldr	r3, [pc, #264]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c08:	493f      	ldr	r1, [pc, #252]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d008      	beq.n	8003c2c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003c1a:	4b3b      	ldr	r3, [pc, #236]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	f023 0220 	bic.w	r2, r3, #32
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	4938      	ldr	r1, [pc, #224]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d008      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c38:	4b33      	ldr	r3, [pc, #204]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	4930      	ldr	r1, [pc, #192]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d008      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c56:	4b2c      	ldr	r3, [pc, #176]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	4929      	ldr	r1, [pc, #164]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c64:	4313      	orrs	r3, r2
 8003c66:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d008      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003c74:	4b24      	ldr	r3, [pc, #144]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	4921      	ldr	r1, [pc, #132]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d008      	beq.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003c92:	4b1d      	ldr	r3, [pc, #116]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6a1b      	ldr	r3, [r3, #32]
 8003c9e:	491a      	ldr	r1, [pc, #104]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d008      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003cb0:	4b15      	ldr	r3, [pc, #84]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	4912      	ldr	r1, [pc, #72]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d008      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003cce:	4b0e      	ldr	r3, [pc, #56]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cda:	490b      	ldr	r1, [pc, #44]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d008      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003cec:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cf8:	4903      	ldr	r1, [pc, #12]	; (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3748      	adds	r7, #72	; 0x48
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40021000 	.word	0x40021000

08003d0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d101      	bne.n	8003d1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e040      	b.n	8003da0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d106      	bne.n	8003d34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f7fd fa72 	bl	8001218 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2224      	movs	r2, #36	; 0x24
 8003d38:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0201 	bic.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f000 f8b6 	bl	8003ebc <UART_SetConfig>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d101      	bne.n	8003d5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	e022      	b.n	8003da0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d002      	beq.n	8003d68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 f9e0 	bl	8004128 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681a      	ldr	r2, [r3, #0]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f042 0201 	orr.w	r2, r2, #1
 8003d96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f000 fa67 	bl	800426c <UART_CheckIdleState>
 8003d9e:	4603      	mov	r3, r0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}

08003da8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b08a      	sub	sp, #40	; 0x28
 8003dac:	af02      	add	r7, sp, #8
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	603b      	str	r3, [r7, #0]
 8003db4:	4613      	mov	r3, r2
 8003db6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dbc:	2b20      	cmp	r3, #32
 8003dbe:	d178      	bne.n	8003eb2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <HAL_UART_Transmit+0x24>
 8003dc6:	88fb      	ldrh	r3, [r7, #6]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003dcc:	2301      	movs	r3, #1
 8003dce:	e071      	b.n	8003eb4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2221      	movs	r2, #33	; 0x21
 8003ddc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dde:	f7fd fae1 	bl	80013a4 <HAL_GetTick>
 8003de2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	88fa      	ldrh	r2, [r7, #6]
 8003de8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	88fa      	ldrh	r2, [r7, #6]
 8003df0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dfc:	d108      	bne.n	8003e10 <HAL_UART_Transmit+0x68>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d104      	bne.n	8003e10 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003e06:	2300      	movs	r3, #0
 8003e08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	61bb      	str	r3, [r7, #24]
 8003e0e:	e003      	b.n	8003e18 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e14:	2300      	movs	r3, #0
 8003e16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e18:	e030      	b.n	8003e7c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	2200      	movs	r2, #0
 8003e22:	2180      	movs	r1, #128	; 0x80
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 fac9 	bl	80043bc <UART_WaitOnFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d004      	beq.n	8003e3a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2220      	movs	r2, #32
 8003e34:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003e36:	2303      	movs	r3, #3
 8003e38:	e03c      	b.n	8003eb4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d10b      	bne.n	8003e58 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	881a      	ldrh	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e4c:	b292      	uxth	r2, r2
 8003e4e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	3302      	adds	r3, #2
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	e008      	b.n	8003e6a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	781a      	ldrb	r2, [r3, #0]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	b292      	uxth	r2, r2
 8003e62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	3301      	adds	r3, #1
 8003e68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	3b01      	subs	r3, #1
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1c8      	bne.n	8003e1a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	9300      	str	r3, [sp, #0]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2140      	movs	r1, #64	; 0x40
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f000 fa92 	bl	80043bc <UART_WaitOnFlagUntilTimeout>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d004      	beq.n	8003ea8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e005      	b.n	8003eb4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2220      	movs	r2, #32
 8003eac:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	e000      	b.n	8003eb4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003eb2:	2302      	movs	r3, #2
  }
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3720      	adds	r7, #32
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b088      	sub	sp, #32
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	689a      	ldr	r2, [r3, #8]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	695b      	ldr	r3, [r3, #20]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	69db      	ldr	r3, [r3, #28]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	4b8a      	ldr	r3, [pc, #552]	; (8004110 <UART_SetConfig+0x254>)
 8003ee8:	4013      	ands	r3, r2
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6812      	ldr	r2, [r2, #0]
 8003eee:	6979      	ldr	r1, [r7, #20]
 8003ef0:	430b      	orrs	r3, r1
 8003ef2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68da      	ldr	r2, [r3, #12]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	430a      	orrs	r2, r1
 8003f08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a1b      	ldr	r3, [r3, #32]
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	430a      	orrs	r2, r1
 8003f2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4a78      	ldr	r2, [pc, #480]	; (8004114 <UART_SetConfig+0x258>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d120      	bne.n	8003f7a <UART_SetConfig+0xbe>
 8003f38:	4b77      	ldr	r3, [pc, #476]	; (8004118 <UART_SetConfig+0x25c>)
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d817      	bhi.n	8003f74 <UART_SetConfig+0xb8>
 8003f44:	a201      	add	r2, pc, #4	; (adr r2, 8003f4c <UART_SetConfig+0x90>)
 8003f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4a:	bf00      	nop
 8003f4c:	08003f5d 	.word	0x08003f5d
 8003f50:	08003f69 	.word	0x08003f69
 8003f54:	08003f6f 	.word	0x08003f6f
 8003f58:	08003f63 	.word	0x08003f63
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	77fb      	strb	r3, [r7, #31]
 8003f60:	e01d      	b.n	8003f9e <UART_SetConfig+0xe2>
 8003f62:	2302      	movs	r3, #2
 8003f64:	77fb      	strb	r3, [r7, #31]
 8003f66:	e01a      	b.n	8003f9e <UART_SetConfig+0xe2>
 8003f68:	2304      	movs	r3, #4
 8003f6a:	77fb      	strb	r3, [r7, #31]
 8003f6c:	e017      	b.n	8003f9e <UART_SetConfig+0xe2>
 8003f6e:	2308      	movs	r3, #8
 8003f70:	77fb      	strb	r3, [r7, #31]
 8003f72:	e014      	b.n	8003f9e <UART_SetConfig+0xe2>
 8003f74:	2310      	movs	r3, #16
 8003f76:	77fb      	strb	r3, [r7, #31]
 8003f78:	e011      	b.n	8003f9e <UART_SetConfig+0xe2>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a67      	ldr	r2, [pc, #412]	; (800411c <UART_SetConfig+0x260>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d102      	bne.n	8003f8a <UART_SetConfig+0xce>
 8003f84:	2300      	movs	r3, #0
 8003f86:	77fb      	strb	r3, [r7, #31]
 8003f88:	e009      	b.n	8003f9e <UART_SetConfig+0xe2>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a64      	ldr	r2, [pc, #400]	; (8004120 <UART_SetConfig+0x264>)
 8003f90:	4293      	cmp	r3, r2
 8003f92:	d102      	bne.n	8003f9a <UART_SetConfig+0xde>
 8003f94:	2300      	movs	r3, #0
 8003f96:	77fb      	strb	r3, [r7, #31]
 8003f98:	e001      	b.n	8003f9e <UART_SetConfig+0xe2>
 8003f9a:	2310      	movs	r3, #16
 8003f9c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69db      	ldr	r3, [r3, #28]
 8003fa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fa6:	d15a      	bne.n	800405e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003fa8:	7ffb      	ldrb	r3, [r7, #31]
 8003faa:	2b08      	cmp	r3, #8
 8003fac:	d827      	bhi.n	8003ffe <UART_SetConfig+0x142>
 8003fae:	a201      	add	r2, pc, #4	; (adr r2, 8003fb4 <UART_SetConfig+0xf8>)
 8003fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fb4:	08003fd9 	.word	0x08003fd9
 8003fb8:	08003fe1 	.word	0x08003fe1
 8003fbc:	08003fe9 	.word	0x08003fe9
 8003fc0:	08003fff 	.word	0x08003fff
 8003fc4:	08003fef 	.word	0x08003fef
 8003fc8:	08003fff 	.word	0x08003fff
 8003fcc:	08003fff 	.word	0x08003fff
 8003fd0:	08003fff 	.word	0x08003fff
 8003fd4:	08003ff7 	.word	0x08003ff7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fd8:	f7ff fcc2 	bl	8003960 <HAL_RCC_GetPCLK1Freq>
 8003fdc:	61b8      	str	r0, [r7, #24]
        break;
 8003fde:	e013      	b.n	8004008 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fe0:	f7ff fce0 	bl	80039a4 <HAL_RCC_GetPCLK2Freq>
 8003fe4:	61b8      	str	r0, [r7, #24]
        break;
 8003fe6:	e00f      	b.n	8004008 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fe8:	4b4e      	ldr	r3, [pc, #312]	; (8004124 <UART_SetConfig+0x268>)
 8003fea:	61bb      	str	r3, [r7, #24]
        break;
 8003fec:	e00c      	b.n	8004008 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fee:	f7ff fc41 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 8003ff2:	61b8      	str	r0, [r7, #24]
        break;
 8003ff4:	e008      	b.n	8004008 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ff6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ffa:	61bb      	str	r3, [r7, #24]
        break;
 8003ffc:	e004      	b.n	8004008 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	77bb      	strb	r3, [r7, #30]
        break;
 8004006:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d074      	beq.n	80040f8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	005a      	lsls	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	085b      	lsrs	r3, r3, #1
 8004018:	441a      	add	r2, r3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004022:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	2b0f      	cmp	r3, #15
 8004028:	d916      	bls.n	8004058 <UART_SetConfig+0x19c>
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004030:	d212      	bcs.n	8004058 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	b29b      	uxth	r3, r3
 8004036:	f023 030f 	bic.w	r3, r3, #15
 800403a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	085b      	lsrs	r3, r3, #1
 8004040:	b29b      	uxth	r3, r3
 8004042:	f003 0307 	and.w	r3, r3, #7
 8004046:	b29a      	uxth	r2, r3
 8004048:	89fb      	ldrh	r3, [r7, #14]
 800404a:	4313      	orrs	r3, r2
 800404c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	89fa      	ldrh	r2, [r7, #14]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	e04f      	b.n	80040f8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	77bb      	strb	r3, [r7, #30]
 800405c:	e04c      	b.n	80040f8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800405e:	7ffb      	ldrb	r3, [r7, #31]
 8004060:	2b08      	cmp	r3, #8
 8004062:	d828      	bhi.n	80040b6 <UART_SetConfig+0x1fa>
 8004064:	a201      	add	r2, pc, #4	; (adr r2, 800406c <UART_SetConfig+0x1b0>)
 8004066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800406a:	bf00      	nop
 800406c:	08004091 	.word	0x08004091
 8004070:	08004099 	.word	0x08004099
 8004074:	080040a1 	.word	0x080040a1
 8004078:	080040b7 	.word	0x080040b7
 800407c:	080040a7 	.word	0x080040a7
 8004080:	080040b7 	.word	0x080040b7
 8004084:	080040b7 	.word	0x080040b7
 8004088:	080040b7 	.word	0x080040b7
 800408c:	080040af 	.word	0x080040af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004090:	f7ff fc66 	bl	8003960 <HAL_RCC_GetPCLK1Freq>
 8004094:	61b8      	str	r0, [r7, #24]
        break;
 8004096:	e013      	b.n	80040c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004098:	f7ff fc84 	bl	80039a4 <HAL_RCC_GetPCLK2Freq>
 800409c:	61b8      	str	r0, [r7, #24]
        break;
 800409e:	e00f      	b.n	80040c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a0:	4b20      	ldr	r3, [pc, #128]	; (8004124 <UART_SetConfig+0x268>)
 80040a2:	61bb      	str	r3, [r7, #24]
        break;
 80040a4:	e00c      	b.n	80040c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a6:	f7ff fbe5 	bl	8003874 <HAL_RCC_GetSysClockFreq>
 80040aa:	61b8      	str	r0, [r7, #24]
        break;
 80040ac:	e008      	b.n	80040c0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040b2:	61bb      	str	r3, [r7, #24]
        break;
 80040b4:	e004      	b.n	80040c0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	77bb      	strb	r3, [r7, #30]
        break;
 80040be:	bf00      	nop
    }

    if (pclk != 0U)
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d018      	beq.n	80040f8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	085a      	lsrs	r2, r3, #1
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	441a      	add	r2, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b0f      	cmp	r3, #15
 80040de:	d909      	bls.n	80040f4 <UART_SetConfig+0x238>
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e6:	d205      	bcs.n	80040f4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	60da      	str	r2, [r3, #12]
 80040f2:	e001      	b.n	80040f8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004104:	7fbb      	ldrb	r3, [r7, #30]
}
 8004106:	4618      	mov	r0, r3
 8004108:	3720      	adds	r7, #32
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	efff69f3 	.word	0xefff69f3
 8004114:	40013800 	.word	0x40013800
 8004118:	40021000 	.word	0x40021000
 800411c:	40004400 	.word	0x40004400
 8004120:	40004800 	.word	0x40004800
 8004124:	007a1200 	.word	0x007a1200

08004128 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d00a      	beq.n	8004152 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00a      	beq.n	8004174 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	430a      	orrs	r2, r1
 8004172:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d00a      	beq.n	8004196 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	430a      	orrs	r2, r1
 8004194:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	f003 0308 	and.w	r3, r3, #8
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00a      	beq.n	80041b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	430a      	orrs	r2, r1
 80041b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	f003 0310 	and.w	r3, r3, #16
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00a      	beq.n	80041da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	430a      	orrs	r2, r1
 80041d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041de:	f003 0320 	and.w	r3, r3, #32
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d00a      	beq.n	80041fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	430a      	orrs	r2, r1
 80041fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d01a      	beq.n	800423e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004222:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004226:	d10a      	bne.n	800423e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	605a      	str	r2, [r3, #4]
  }
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b098      	sub	sp, #96	; 0x60
 8004270:	af02      	add	r7, sp, #8
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800427c:	f7fd f892 	bl	80013a4 <HAL_GetTick>
 8004280:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b08      	cmp	r3, #8
 800428e:	d12e      	bne.n	80042ee <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004290:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004294:	9300      	str	r3, [sp, #0]
 8004296:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004298:	2200      	movs	r2, #0
 800429a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f88c 	bl	80043bc <UART_WaitOnFlagUntilTimeout>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d021      	beq.n	80042ee <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b2:	e853 3f00 	ldrex	r3, [r3]
 80042b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042be:	653b      	str	r3, [r7, #80]	; 0x50
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	461a      	mov	r2, r3
 80042c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c8:	647b      	str	r3, [r7, #68]	; 0x44
 80042ca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042d0:	e841 2300 	strex	r3, r2, [r1]
 80042d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d1e6      	bne.n	80042aa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e062      	b.n	80043b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b04      	cmp	r3, #4
 80042fa:	d149      	bne.n	8004390 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004304:	2200      	movs	r2, #0
 8004306:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f856 	bl	80043bc <UART_WaitOnFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d03c      	beq.n	8004390 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431e:	e853 3f00 	ldrex	r3, [r3]
 8004322:	623b      	str	r3, [r7, #32]
   return(result);
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800432a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	461a      	mov	r2, r3
 8004332:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004334:	633b      	str	r3, [r7, #48]	; 0x30
 8004336:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800433a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e6      	bne.n	8004316 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3308      	adds	r3, #8
 800434e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	e853 3f00 	ldrex	r3, [r3]
 8004356:	60fb      	str	r3, [r7, #12]
   return(result);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0301 	bic.w	r3, r3, #1
 800435e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	3308      	adds	r3, #8
 8004366:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004368:	61fa      	str	r2, [r7, #28]
 800436a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436c:	69b9      	ldr	r1, [r7, #24]
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	e841 2300 	strex	r3, r2, [r1]
 8004374:	617b      	str	r3, [r7, #20]
   return(result);
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1e5      	bne.n	8004348 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2220      	movs	r2, #32
 8004380:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e011      	b.n	80043b4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2220      	movs	r2, #32
 8004394:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2220      	movs	r2, #32
 800439a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3758      	adds	r7, #88	; 0x58
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b084      	sub	sp, #16
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	603b      	str	r3, [r7, #0]
 80043c8:	4613      	mov	r3, r2
 80043ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043cc:	e049      	b.n	8004462 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043d4:	d045      	beq.n	8004462 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043d6:	f7fc ffe5 	bl	80013a4 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d302      	bcc.n	80043ec <UART_WaitOnFlagUntilTimeout+0x30>
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043ec:	2303      	movs	r3, #3
 80043ee:	e048      	b.n	8004482 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f003 0304 	and.w	r3, r3, #4
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d031      	beq.n	8004462 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b08      	cmp	r3, #8
 800440a:	d110      	bne.n	800442e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2208      	movs	r2, #8
 8004412:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f000 f838 	bl	800448a <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2208      	movs	r2, #8
 800441e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	e029      	b.n	8004482 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	69db      	ldr	r3, [r3, #28]
 8004434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004438:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800443c:	d111      	bne.n	8004462 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004446:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004448:	68f8      	ldr	r0, [r7, #12]
 800444a:	f000 f81e 	bl	800448a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2220      	movs	r2, #32
 8004452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e00f      	b.n	8004482 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	69da      	ldr	r2, [r3, #28]
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	4013      	ands	r3, r2
 800446c:	68ba      	ldr	r2, [r7, #8]
 800446e:	429a      	cmp	r2, r3
 8004470:	bf0c      	ite	eq
 8004472:	2301      	moveq	r3, #1
 8004474:	2300      	movne	r3, #0
 8004476:	b2db      	uxtb	r3, r3
 8004478:	461a      	mov	r2, r3
 800447a:	79fb      	ldrb	r3, [r7, #7]
 800447c:	429a      	cmp	r2, r3
 800447e:	d0a6      	beq.n	80043ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800448a:	b480      	push	{r7}
 800448c:	b095      	sub	sp, #84	; 0x54
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	461a      	mov	r2, r3
 80044ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b0:	643b      	str	r3, [r7, #64]	; 0x40
 80044b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e6      	bne.n	8004492 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	3308      	adds	r3, #8
 80044ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	6a3b      	ldr	r3, [r7, #32]
 80044ce:	e853 3f00 	ldrex	r3, [r3]
 80044d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	f023 0301 	bic.w	r3, r3, #1
 80044da:	64bb      	str	r3, [r7, #72]	; 0x48
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3308      	adds	r3, #8
 80044e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044ec:	e841 2300 	strex	r3, r2, [r1]
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1e5      	bne.n	80044c4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d118      	bne.n	8004532 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	e853 3f00 	ldrex	r3, [r3]
 800450c:	60bb      	str	r3, [r7, #8]
   return(result);
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	f023 0310 	bic.w	r3, r3, #16
 8004514:	647b      	str	r3, [r7, #68]	; 0x44
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	461a      	mov	r2, r3
 800451c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800451e:	61bb      	str	r3, [r7, #24]
 8004520:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004522:	6979      	ldr	r1, [r7, #20]
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	e841 2300 	strex	r3, r2, [r1]
 800452a:	613b      	str	r3, [r7, #16]
   return(result);
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1e6      	bne.n	8004500 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004546:	bf00      	nop
 8004548:	3754      	adds	r7, #84	; 0x54
 800454a:	46bd      	mov	sp, r7
 800454c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004550:	4770      	bx	lr
	...

08004554 <std>:
 8004554:	2300      	movs	r3, #0
 8004556:	b510      	push	{r4, lr}
 8004558:	4604      	mov	r4, r0
 800455a:	e9c0 3300 	strd	r3, r3, [r0]
 800455e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004562:	6083      	str	r3, [r0, #8]
 8004564:	8181      	strh	r1, [r0, #12]
 8004566:	6643      	str	r3, [r0, #100]	; 0x64
 8004568:	81c2      	strh	r2, [r0, #14]
 800456a:	6183      	str	r3, [r0, #24]
 800456c:	4619      	mov	r1, r3
 800456e:	2208      	movs	r2, #8
 8004570:	305c      	adds	r0, #92	; 0x5c
 8004572:	f000 f9f7 	bl	8004964 <memset>
 8004576:	4b0d      	ldr	r3, [pc, #52]	; (80045ac <std+0x58>)
 8004578:	6263      	str	r3, [r4, #36]	; 0x24
 800457a:	4b0d      	ldr	r3, [pc, #52]	; (80045b0 <std+0x5c>)
 800457c:	62a3      	str	r3, [r4, #40]	; 0x28
 800457e:	4b0d      	ldr	r3, [pc, #52]	; (80045b4 <std+0x60>)
 8004580:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004582:	4b0d      	ldr	r3, [pc, #52]	; (80045b8 <std+0x64>)
 8004584:	6323      	str	r3, [r4, #48]	; 0x30
 8004586:	4b0d      	ldr	r3, [pc, #52]	; (80045bc <std+0x68>)
 8004588:	6224      	str	r4, [r4, #32]
 800458a:	429c      	cmp	r4, r3
 800458c:	d006      	beq.n	800459c <std+0x48>
 800458e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004592:	4294      	cmp	r4, r2
 8004594:	d002      	beq.n	800459c <std+0x48>
 8004596:	33d0      	adds	r3, #208	; 0xd0
 8004598:	429c      	cmp	r4, r3
 800459a:	d105      	bne.n	80045a8 <std+0x54>
 800459c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80045a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045a4:	f000 ba56 	b.w	8004a54 <__retarget_lock_init_recursive>
 80045a8:	bd10      	pop	{r4, pc}
 80045aa:	bf00      	nop
 80045ac:	080047b5 	.word	0x080047b5
 80045b0:	080047d7 	.word	0x080047d7
 80045b4:	0800480f 	.word	0x0800480f
 80045b8:	08004833 	.word	0x08004833
 80045bc:	20000190 	.word	0x20000190

080045c0 <stdio_exit_handler>:
 80045c0:	4a02      	ldr	r2, [pc, #8]	; (80045cc <stdio_exit_handler+0xc>)
 80045c2:	4903      	ldr	r1, [pc, #12]	; (80045d0 <stdio_exit_handler+0x10>)
 80045c4:	4803      	ldr	r0, [pc, #12]	; (80045d4 <stdio_exit_handler+0x14>)
 80045c6:	f000 b869 	b.w	800469c <_fwalk_sglue>
 80045ca:	bf00      	nop
 80045cc:	20000010 	.word	0x20000010
 80045d0:	08005301 	.word	0x08005301
 80045d4:	2000001c 	.word	0x2000001c

080045d8 <cleanup_stdio>:
 80045d8:	6841      	ldr	r1, [r0, #4]
 80045da:	4b0c      	ldr	r3, [pc, #48]	; (800460c <cleanup_stdio+0x34>)
 80045dc:	4299      	cmp	r1, r3
 80045de:	b510      	push	{r4, lr}
 80045e0:	4604      	mov	r4, r0
 80045e2:	d001      	beq.n	80045e8 <cleanup_stdio+0x10>
 80045e4:	f000 fe8c 	bl	8005300 <_fflush_r>
 80045e8:	68a1      	ldr	r1, [r4, #8]
 80045ea:	4b09      	ldr	r3, [pc, #36]	; (8004610 <cleanup_stdio+0x38>)
 80045ec:	4299      	cmp	r1, r3
 80045ee:	d002      	beq.n	80045f6 <cleanup_stdio+0x1e>
 80045f0:	4620      	mov	r0, r4
 80045f2:	f000 fe85 	bl	8005300 <_fflush_r>
 80045f6:	68e1      	ldr	r1, [r4, #12]
 80045f8:	4b06      	ldr	r3, [pc, #24]	; (8004614 <cleanup_stdio+0x3c>)
 80045fa:	4299      	cmp	r1, r3
 80045fc:	d004      	beq.n	8004608 <cleanup_stdio+0x30>
 80045fe:	4620      	mov	r0, r4
 8004600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004604:	f000 be7c 	b.w	8005300 <_fflush_r>
 8004608:	bd10      	pop	{r4, pc}
 800460a:	bf00      	nop
 800460c:	20000190 	.word	0x20000190
 8004610:	200001f8 	.word	0x200001f8
 8004614:	20000260 	.word	0x20000260

08004618 <global_stdio_init.part.0>:
 8004618:	b510      	push	{r4, lr}
 800461a:	4b0b      	ldr	r3, [pc, #44]	; (8004648 <global_stdio_init.part.0+0x30>)
 800461c:	4c0b      	ldr	r4, [pc, #44]	; (800464c <global_stdio_init.part.0+0x34>)
 800461e:	4a0c      	ldr	r2, [pc, #48]	; (8004650 <global_stdio_init.part.0+0x38>)
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	4620      	mov	r0, r4
 8004624:	2200      	movs	r2, #0
 8004626:	2104      	movs	r1, #4
 8004628:	f7ff ff94 	bl	8004554 <std>
 800462c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004630:	2201      	movs	r2, #1
 8004632:	2109      	movs	r1, #9
 8004634:	f7ff ff8e 	bl	8004554 <std>
 8004638:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800463c:	2202      	movs	r2, #2
 800463e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004642:	2112      	movs	r1, #18
 8004644:	f7ff bf86 	b.w	8004554 <std>
 8004648:	200002c8 	.word	0x200002c8
 800464c:	20000190 	.word	0x20000190
 8004650:	080045c1 	.word	0x080045c1

08004654 <__sfp_lock_acquire>:
 8004654:	4801      	ldr	r0, [pc, #4]	; (800465c <__sfp_lock_acquire+0x8>)
 8004656:	f000 b9fe 	b.w	8004a56 <__retarget_lock_acquire_recursive>
 800465a:	bf00      	nop
 800465c:	200002d1 	.word	0x200002d1

08004660 <__sfp_lock_release>:
 8004660:	4801      	ldr	r0, [pc, #4]	; (8004668 <__sfp_lock_release+0x8>)
 8004662:	f000 b9f9 	b.w	8004a58 <__retarget_lock_release_recursive>
 8004666:	bf00      	nop
 8004668:	200002d1 	.word	0x200002d1

0800466c <__sinit>:
 800466c:	b510      	push	{r4, lr}
 800466e:	4604      	mov	r4, r0
 8004670:	f7ff fff0 	bl	8004654 <__sfp_lock_acquire>
 8004674:	6a23      	ldr	r3, [r4, #32]
 8004676:	b11b      	cbz	r3, 8004680 <__sinit+0x14>
 8004678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800467c:	f7ff bff0 	b.w	8004660 <__sfp_lock_release>
 8004680:	4b04      	ldr	r3, [pc, #16]	; (8004694 <__sinit+0x28>)
 8004682:	6223      	str	r3, [r4, #32]
 8004684:	4b04      	ldr	r3, [pc, #16]	; (8004698 <__sinit+0x2c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1f5      	bne.n	8004678 <__sinit+0xc>
 800468c:	f7ff ffc4 	bl	8004618 <global_stdio_init.part.0>
 8004690:	e7f2      	b.n	8004678 <__sinit+0xc>
 8004692:	bf00      	nop
 8004694:	080045d9 	.word	0x080045d9
 8004698:	200002c8 	.word	0x200002c8

0800469c <_fwalk_sglue>:
 800469c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046a0:	4607      	mov	r7, r0
 80046a2:	4688      	mov	r8, r1
 80046a4:	4614      	mov	r4, r2
 80046a6:	2600      	movs	r6, #0
 80046a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80046ac:	f1b9 0901 	subs.w	r9, r9, #1
 80046b0:	d505      	bpl.n	80046be <_fwalk_sglue+0x22>
 80046b2:	6824      	ldr	r4, [r4, #0]
 80046b4:	2c00      	cmp	r4, #0
 80046b6:	d1f7      	bne.n	80046a8 <_fwalk_sglue+0xc>
 80046b8:	4630      	mov	r0, r6
 80046ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046be:	89ab      	ldrh	r3, [r5, #12]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d907      	bls.n	80046d4 <_fwalk_sglue+0x38>
 80046c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80046c8:	3301      	adds	r3, #1
 80046ca:	d003      	beq.n	80046d4 <_fwalk_sglue+0x38>
 80046cc:	4629      	mov	r1, r5
 80046ce:	4638      	mov	r0, r7
 80046d0:	47c0      	blx	r8
 80046d2:	4306      	orrs	r6, r0
 80046d4:	3568      	adds	r5, #104	; 0x68
 80046d6:	e7e9      	b.n	80046ac <_fwalk_sglue+0x10>

080046d8 <iprintf>:
 80046d8:	b40f      	push	{r0, r1, r2, r3}
 80046da:	b507      	push	{r0, r1, r2, lr}
 80046dc:	4906      	ldr	r1, [pc, #24]	; (80046f8 <iprintf+0x20>)
 80046de:	ab04      	add	r3, sp, #16
 80046e0:	6808      	ldr	r0, [r1, #0]
 80046e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80046e6:	6881      	ldr	r1, [r0, #8]
 80046e8:	9301      	str	r3, [sp, #4]
 80046ea:	f000 fad9 	bl	8004ca0 <_vfiprintf_r>
 80046ee:	b003      	add	sp, #12
 80046f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80046f4:	b004      	add	sp, #16
 80046f6:	4770      	bx	lr
 80046f8:	20000068 	.word	0x20000068

080046fc <_puts_r>:
 80046fc:	6a03      	ldr	r3, [r0, #32]
 80046fe:	b570      	push	{r4, r5, r6, lr}
 8004700:	6884      	ldr	r4, [r0, #8]
 8004702:	4605      	mov	r5, r0
 8004704:	460e      	mov	r6, r1
 8004706:	b90b      	cbnz	r3, 800470c <_puts_r+0x10>
 8004708:	f7ff ffb0 	bl	800466c <__sinit>
 800470c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800470e:	07db      	lsls	r3, r3, #31
 8004710:	d405      	bmi.n	800471e <_puts_r+0x22>
 8004712:	89a3      	ldrh	r3, [r4, #12]
 8004714:	0598      	lsls	r0, r3, #22
 8004716:	d402      	bmi.n	800471e <_puts_r+0x22>
 8004718:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800471a:	f000 f99c 	bl	8004a56 <__retarget_lock_acquire_recursive>
 800471e:	89a3      	ldrh	r3, [r4, #12]
 8004720:	0719      	lsls	r1, r3, #28
 8004722:	d513      	bpl.n	800474c <_puts_r+0x50>
 8004724:	6923      	ldr	r3, [r4, #16]
 8004726:	b18b      	cbz	r3, 800474c <_puts_r+0x50>
 8004728:	3e01      	subs	r6, #1
 800472a:	68a3      	ldr	r3, [r4, #8]
 800472c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004730:	3b01      	subs	r3, #1
 8004732:	60a3      	str	r3, [r4, #8]
 8004734:	b9e9      	cbnz	r1, 8004772 <_puts_r+0x76>
 8004736:	2b00      	cmp	r3, #0
 8004738:	da2e      	bge.n	8004798 <_puts_r+0x9c>
 800473a:	4622      	mov	r2, r4
 800473c:	210a      	movs	r1, #10
 800473e:	4628      	mov	r0, r5
 8004740:	f000 f87b 	bl	800483a <__swbuf_r>
 8004744:	3001      	adds	r0, #1
 8004746:	d007      	beq.n	8004758 <_puts_r+0x5c>
 8004748:	250a      	movs	r5, #10
 800474a:	e007      	b.n	800475c <_puts_r+0x60>
 800474c:	4621      	mov	r1, r4
 800474e:	4628      	mov	r0, r5
 8004750:	f000 f8b0 	bl	80048b4 <__swsetup_r>
 8004754:	2800      	cmp	r0, #0
 8004756:	d0e7      	beq.n	8004728 <_puts_r+0x2c>
 8004758:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800475c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800475e:	07da      	lsls	r2, r3, #31
 8004760:	d405      	bmi.n	800476e <_puts_r+0x72>
 8004762:	89a3      	ldrh	r3, [r4, #12]
 8004764:	059b      	lsls	r3, r3, #22
 8004766:	d402      	bmi.n	800476e <_puts_r+0x72>
 8004768:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800476a:	f000 f975 	bl	8004a58 <__retarget_lock_release_recursive>
 800476e:	4628      	mov	r0, r5
 8004770:	bd70      	pop	{r4, r5, r6, pc}
 8004772:	2b00      	cmp	r3, #0
 8004774:	da04      	bge.n	8004780 <_puts_r+0x84>
 8004776:	69a2      	ldr	r2, [r4, #24]
 8004778:	429a      	cmp	r2, r3
 800477a:	dc06      	bgt.n	800478a <_puts_r+0x8e>
 800477c:	290a      	cmp	r1, #10
 800477e:	d004      	beq.n	800478a <_puts_r+0x8e>
 8004780:	6823      	ldr	r3, [r4, #0]
 8004782:	1c5a      	adds	r2, r3, #1
 8004784:	6022      	str	r2, [r4, #0]
 8004786:	7019      	strb	r1, [r3, #0]
 8004788:	e7cf      	b.n	800472a <_puts_r+0x2e>
 800478a:	4622      	mov	r2, r4
 800478c:	4628      	mov	r0, r5
 800478e:	f000 f854 	bl	800483a <__swbuf_r>
 8004792:	3001      	adds	r0, #1
 8004794:	d1c9      	bne.n	800472a <_puts_r+0x2e>
 8004796:	e7df      	b.n	8004758 <_puts_r+0x5c>
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	250a      	movs	r5, #10
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	6022      	str	r2, [r4, #0]
 80047a0:	701d      	strb	r5, [r3, #0]
 80047a2:	e7db      	b.n	800475c <_puts_r+0x60>

080047a4 <puts>:
 80047a4:	4b02      	ldr	r3, [pc, #8]	; (80047b0 <puts+0xc>)
 80047a6:	4601      	mov	r1, r0
 80047a8:	6818      	ldr	r0, [r3, #0]
 80047aa:	f7ff bfa7 	b.w	80046fc <_puts_r>
 80047ae:	bf00      	nop
 80047b0:	20000068 	.word	0x20000068

080047b4 <__sread>:
 80047b4:	b510      	push	{r4, lr}
 80047b6:	460c      	mov	r4, r1
 80047b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047bc:	f000 f8fc 	bl	80049b8 <_read_r>
 80047c0:	2800      	cmp	r0, #0
 80047c2:	bfab      	itete	ge
 80047c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047c6:	89a3      	ldrhlt	r3, [r4, #12]
 80047c8:	181b      	addge	r3, r3, r0
 80047ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047ce:	bfac      	ite	ge
 80047d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80047d2:	81a3      	strhlt	r3, [r4, #12]
 80047d4:	bd10      	pop	{r4, pc}

080047d6 <__swrite>:
 80047d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047da:	461f      	mov	r7, r3
 80047dc:	898b      	ldrh	r3, [r1, #12]
 80047de:	05db      	lsls	r3, r3, #23
 80047e0:	4605      	mov	r5, r0
 80047e2:	460c      	mov	r4, r1
 80047e4:	4616      	mov	r6, r2
 80047e6:	d505      	bpl.n	80047f4 <__swrite+0x1e>
 80047e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ec:	2302      	movs	r3, #2
 80047ee:	2200      	movs	r2, #0
 80047f0:	f000 f8d0 	bl	8004994 <_lseek_r>
 80047f4:	89a3      	ldrh	r3, [r4, #12]
 80047f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047fe:	81a3      	strh	r3, [r4, #12]
 8004800:	4632      	mov	r2, r6
 8004802:	463b      	mov	r3, r7
 8004804:	4628      	mov	r0, r5
 8004806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800480a:	f000 b8e7 	b.w	80049dc <_write_r>

0800480e <__sseek>:
 800480e:	b510      	push	{r4, lr}
 8004810:	460c      	mov	r4, r1
 8004812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004816:	f000 f8bd 	bl	8004994 <_lseek_r>
 800481a:	1c43      	adds	r3, r0, #1
 800481c:	89a3      	ldrh	r3, [r4, #12]
 800481e:	bf15      	itete	ne
 8004820:	6560      	strne	r0, [r4, #84]	; 0x54
 8004822:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004826:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800482a:	81a3      	strheq	r3, [r4, #12]
 800482c:	bf18      	it	ne
 800482e:	81a3      	strhne	r3, [r4, #12]
 8004830:	bd10      	pop	{r4, pc}

08004832 <__sclose>:
 8004832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004836:	f000 b89d 	b.w	8004974 <_close_r>

0800483a <__swbuf_r>:
 800483a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483c:	460e      	mov	r6, r1
 800483e:	4614      	mov	r4, r2
 8004840:	4605      	mov	r5, r0
 8004842:	b118      	cbz	r0, 800484c <__swbuf_r+0x12>
 8004844:	6a03      	ldr	r3, [r0, #32]
 8004846:	b90b      	cbnz	r3, 800484c <__swbuf_r+0x12>
 8004848:	f7ff ff10 	bl	800466c <__sinit>
 800484c:	69a3      	ldr	r3, [r4, #24]
 800484e:	60a3      	str	r3, [r4, #8]
 8004850:	89a3      	ldrh	r3, [r4, #12]
 8004852:	071a      	lsls	r2, r3, #28
 8004854:	d525      	bpl.n	80048a2 <__swbuf_r+0x68>
 8004856:	6923      	ldr	r3, [r4, #16]
 8004858:	b31b      	cbz	r3, 80048a2 <__swbuf_r+0x68>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	6922      	ldr	r2, [r4, #16]
 800485e:	1a98      	subs	r0, r3, r2
 8004860:	6963      	ldr	r3, [r4, #20]
 8004862:	b2f6      	uxtb	r6, r6
 8004864:	4283      	cmp	r3, r0
 8004866:	4637      	mov	r7, r6
 8004868:	dc04      	bgt.n	8004874 <__swbuf_r+0x3a>
 800486a:	4621      	mov	r1, r4
 800486c:	4628      	mov	r0, r5
 800486e:	f000 fd47 	bl	8005300 <_fflush_r>
 8004872:	b9e0      	cbnz	r0, 80048ae <__swbuf_r+0x74>
 8004874:	68a3      	ldr	r3, [r4, #8]
 8004876:	3b01      	subs	r3, #1
 8004878:	60a3      	str	r3, [r4, #8]
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	6022      	str	r2, [r4, #0]
 8004880:	701e      	strb	r6, [r3, #0]
 8004882:	6962      	ldr	r2, [r4, #20]
 8004884:	1c43      	adds	r3, r0, #1
 8004886:	429a      	cmp	r2, r3
 8004888:	d004      	beq.n	8004894 <__swbuf_r+0x5a>
 800488a:	89a3      	ldrh	r3, [r4, #12]
 800488c:	07db      	lsls	r3, r3, #31
 800488e:	d506      	bpl.n	800489e <__swbuf_r+0x64>
 8004890:	2e0a      	cmp	r6, #10
 8004892:	d104      	bne.n	800489e <__swbuf_r+0x64>
 8004894:	4621      	mov	r1, r4
 8004896:	4628      	mov	r0, r5
 8004898:	f000 fd32 	bl	8005300 <_fflush_r>
 800489c:	b938      	cbnz	r0, 80048ae <__swbuf_r+0x74>
 800489e:	4638      	mov	r0, r7
 80048a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048a2:	4621      	mov	r1, r4
 80048a4:	4628      	mov	r0, r5
 80048a6:	f000 f805 	bl	80048b4 <__swsetup_r>
 80048aa:	2800      	cmp	r0, #0
 80048ac:	d0d5      	beq.n	800485a <__swbuf_r+0x20>
 80048ae:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80048b2:	e7f4      	b.n	800489e <__swbuf_r+0x64>

080048b4 <__swsetup_r>:
 80048b4:	b538      	push	{r3, r4, r5, lr}
 80048b6:	4b2a      	ldr	r3, [pc, #168]	; (8004960 <__swsetup_r+0xac>)
 80048b8:	4605      	mov	r5, r0
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	460c      	mov	r4, r1
 80048be:	b118      	cbz	r0, 80048c8 <__swsetup_r+0x14>
 80048c0:	6a03      	ldr	r3, [r0, #32]
 80048c2:	b90b      	cbnz	r3, 80048c8 <__swsetup_r+0x14>
 80048c4:	f7ff fed2 	bl	800466c <__sinit>
 80048c8:	89a3      	ldrh	r3, [r4, #12]
 80048ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80048ce:	0718      	lsls	r0, r3, #28
 80048d0:	d422      	bmi.n	8004918 <__swsetup_r+0x64>
 80048d2:	06d9      	lsls	r1, r3, #27
 80048d4:	d407      	bmi.n	80048e6 <__swsetup_r+0x32>
 80048d6:	2309      	movs	r3, #9
 80048d8:	602b      	str	r3, [r5, #0]
 80048da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80048de:	81a3      	strh	r3, [r4, #12]
 80048e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048e4:	e034      	b.n	8004950 <__swsetup_r+0x9c>
 80048e6:	0758      	lsls	r0, r3, #29
 80048e8:	d512      	bpl.n	8004910 <__swsetup_r+0x5c>
 80048ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048ec:	b141      	cbz	r1, 8004900 <__swsetup_r+0x4c>
 80048ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048f2:	4299      	cmp	r1, r3
 80048f4:	d002      	beq.n	80048fc <__swsetup_r+0x48>
 80048f6:	4628      	mov	r0, r5
 80048f8:	f000 f8b0 	bl	8004a5c <_free_r>
 80048fc:	2300      	movs	r3, #0
 80048fe:	6363      	str	r3, [r4, #52]	; 0x34
 8004900:	89a3      	ldrh	r3, [r4, #12]
 8004902:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004906:	81a3      	strh	r3, [r4, #12]
 8004908:	2300      	movs	r3, #0
 800490a:	6063      	str	r3, [r4, #4]
 800490c:	6923      	ldr	r3, [r4, #16]
 800490e:	6023      	str	r3, [r4, #0]
 8004910:	89a3      	ldrh	r3, [r4, #12]
 8004912:	f043 0308 	orr.w	r3, r3, #8
 8004916:	81a3      	strh	r3, [r4, #12]
 8004918:	6923      	ldr	r3, [r4, #16]
 800491a:	b94b      	cbnz	r3, 8004930 <__swsetup_r+0x7c>
 800491c:	89a3      	ldrh	r3, [r4, #12]
 800491e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004922:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004926:	d003      	beq.n	8004930 <__swsetup_r+0x7c>
 8004928:	4621      	mov	r1, r4
 800492a:	4628      	mov	r0, r5
 800492c:	f000 fd36 	bl	800539c <__smakebuf_r>
 8004930:	89a0      	ldrh	r0, [r4, #12]
 8004932:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004936:	f010 0301 	ands.w	r3, r0, #1
 800493a:	d00a      	beq.n	8004952 <__swsetup_r+0x9e>
 800493c:	2300      	movs	r3, #0
 800493e:	60a3      	str	r3, [r4, #8]
 8004940:	6963      	ldr	r3, [r4, #20]
 8004942:	425b      	negs	r3, r3
 8004944:	61a3      	str	r3, [r4, #24]
 8004946:	6923      	ldr	r3, [r4, #16]
 8004948:	b943      	cbnz	r3, 800495c <__swsetup_r+0xa8>
 800494a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800494e:	d1c4      	bne.n	80048da <__swsetup_r+0x26>
 8004950:	bd38      	pop	{r3, r4, r5, pc}
 8004952:	0781      	lsls	r1, r0, #30
 8004954:	bf58      	it	pl
 8004956:	6963      	ldrpl	r3, [r4, #20]
 8004958:	60a3      	str	r3, [r4, #8]
 800495a:	e7f4      	b.n	8004946 <__swsetup_r+0x92>
 800495c:	2000      	movs	r0, #0
 800495e:	e7f7      	b.n	8004950 <__swsetup_r+0x9c>
 8004960:	20000068 	.word	0x20000068

08004964 <memset>:
 8004964:	4402      	add	r2, r0
 8004966:	4603      	mov	r3, r0
 8004968:	4293      	cmp	r3, r2
 800496a:	d100      	bne.n	800496e <memset+0xa>
 800496c:	4770      	bx	lr
 800496e:	f803 1b01 	strb.w	r1, [r3], #1
 8004972:	e7f9      	b.n	8004968 <memset+0x4>

08004974 <_close_r>:
 8004974:	b538      	push	{r3, r4, r5, lr}
 8004976:	4d06      	ldr	r5, [pc, #24]	; (8004990 <_close_r+0x1c>)
 8004978:	2300      	movs	r3, #0
 800497a:	4604      	mov	r4, r0
 800497c:	4608      	mov	r0, r1
 800497e:	602b      	str	r3, [r5, #0]
 8004980:	f7fc fb9e 	bl	80010c0 <_close>
 8004984:	1c43      	adds	r3, r0, #1
 8004986:	d102      	bne.n	800498e <_close_r+0x1a>
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	b103      	cbz	r3, 800498e <_close_r+0x1a>
 800498c:	6023      	str	r3, [r4, #0]
 800498e:	bd38      	pop	{r3, r4, r5, pc}
 8004990:	200002cc 	.word	0x200002cc

08004994 <_lseek_r>:
 8004994:	b538      	push	{r3, r4, r5, lr}
 8004996:	4d07      	ldr	r5, [pc, #28]	; (80049b4 <_lseek_r+0x20>)
 8004998:	4604      	mov	r4, r0
 800499a:	4608      	mov	r0, r1
 800499c:	4611      	mov	r1, r2
 800499e:	2200      	movs	r2, #0
 80049a0:	602a      	str	r2, [r5, #0]
 80049a2:	461a      	mov	r2, r3
 80049a4:	f7fc fbb3 	bl	800110e <_lseek>
 80049a8:	1c43      	adds	r3, r0, #1
 80049aa:	d102      	bne.n	80049b2 <_lseek_r+0x1e>
 80049ac:	682b      	ldr	r3, [r5, #0]
 80049ae:	b103      	cbz	r3, 80049b2 <_lseek_r+0x1e>
 80049b0:	6023      	str	r3, [r4, #0]
 80049b2:	bd38      	pop	{r3, r4, r5, pc}
 80049b4:	200002cc 	.word	0x200002cc

080049b8 <_read_r>:
 80049b8:	b538      	push	{r3, r4, r5, lr}
 80049ba:	4d07      	ldr	r5, [pc, #28]	; (80049d8 <_read_r+0x20>)
 80049bc:	4604      	mov	r4, r0
 80049be:	4608      	mov	r0, r1
 80049c0:	4611      	mov	r1, r2
 80049c2:	2200      	movs	r2, #0
 80049c4:	602a      	str	r2, [r5, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	f7fc f96e 	bl	8000ca8 <_read>
 80049cc:	1c43      	adds	r3, r0, #1
 80049ce:	d102      	bne.n	80049d6 <_read_r+0x1e>
 80049d0:	682b      	ldr	r3, [r5, #0]
 80049d2:	b103      	cbz	r3, 80049d6 <_read_r+0x1e>
 80049d4:	6023      	str	r3, [r4, #0]
 80049d6:	bd38      	pop	{r3, r4, r5, pc}
 80049d8:	200002cc 	.word	0x200002cc

080049dc <_write_r>:
 80049dc:	b538      	push	{r3, r4, r5, lr}
 80049de:	4d07      	ldr	r5, [pc, #28]	; (80049fc <_write_r+0x20>)
 80049e0:	4604      	mov	r4, r0
 80049e2:	4608      	mov	r0, r1
 80049e4:	4611      	mov	r1, r2
 80049e6:	2200      	movs	r2, #0
 80049e8:	602a      	str	r2, [r5, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	f7fc fb4c 	bl	8001088 <_write>
 80049f0:	1c43      	adds	r3, r0, #1
 80049f2:	d102      	bne.n	80049fa <_write_r+0x1e>
 80049f4:	682b      	ldr	r3, [r5, #0]
 80049f6:	b103      	cbz	r3, 80049fa <_write_r+0x1e>
 80049f8:	6023      	str	r3, [r4, #0]
 80049fa:	bd38      	pop	{r3, r4, r5, pc}
 80049fc:	200002cc 	.word	0x200002cc

08004a00 <__errno>:
 8004a00:	4b01      	ldr	r3, [pc, #4]	; (8004a08 <__errno+0x8>)
 8004a02:	6818      	ldr	r0, [r3, #0]
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	20000068 	.word	0x20000068

08004a0c <__libc_init_array>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	4d0d      	ldr	r5, [pc, #52]	; (8004a44 <__libc_init_array+0x38>)
 8004a10:	4c0d      	ldr	r4, [pc, #52]	; (8004a48 <__libc_init_array+0x3c>)
 8004a12:	1b64      	subs	r4, r4, r5
 8004a14:	10a4      	asrs	r4, r4, #2
 8004a16:	2600      	movs	r6, #0
 8004a18:	42a6      	cmp	r6, r4
 8004a1a:	d109      	bne.n	8004a30 <__libc_init_array+0x24>
 8004a1c:	4d0b      	ldr	r5, [pc, #44]	; (8004a4c <__libc_init_array+0x40>)
 8004a1e:	4c0c      	ldr	r4, [pc, #48]	; (8004a50 <__libc_init_array+0x44>)
 8004a20:	f000 fd2a 	bl	8005478 <_init>
 8004a24:	1b64      	subs	r4, r4, r5
 8004a26:	10a4      	asrs	r4, r4, #2
 8004a28:	2600      	movs	r6, #0
 8004a2a:	42a6      	cmp	r6, r4
 8004a2c:	d105      	bne.n	8004a3a <__libc_init_array+0x2e>
 8004a2e:	bd70      	pop	{r4, r5, r6, pc}
 8004a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a34:	4798      	blx	r3
 8004a36:	3601      	adds	r6, #1
 8004a38:	e7ee      	b.n	8004a18 <__libc_init_array+0xc>
 8004a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a3e:	4798      	blx	r3
 8004a40:	3601      	adds	r6, #1
 8004a42:	e7f2      	b.n	8004a2a <__libc_init_array+0x1e>
 8004a44:	08005560 	.word	0x08005560
 8004a48:	08005560 	.word	0x08005560
 8004a4c:	08005560 	.word	0x08005560
 8004a50:	08005564 	.word	0x08005564

08004a54 <__retarget_lock_init_recursive>:
 8004a54:	4770      	bx	lr

08004a56 <__retarget_lock_acquire_recursive>:
 8004a56:	4770      	bx	lr

08004a58 <__retarget_lock_release_recursive>:
 8004a58:	4770      	bx	lr
	...

08004a5c <_free_r>:
 8004a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a5e:	2900      	cmp	r1, #0
 8004a60:	d044      	beq.n	8004aec <_free_r+0x90>
 8004a62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a66:	9001      	str	r0, [sp, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f1a1 0404 	sub.w	r4, r1, #4
 8004a6e:	bfb8      	it	lt
 8004a70:	18e4      	addlt	r4, r4, r3
 8004a72:	f000 f8df 	bl	8004c34 <__malloc_lock>
 8004a76:	4a1e      	ldr	r2, [pc, #120]	; (8004af0 <_free_r+0x94>)
 8004a78:	9801      	ldr	r0, [sp, #4]
 8004a7a:	6813      	ldr	r3, [r2, #0]
 8004a7c:	b933      	cbnz	r3, 8004a8c <_free_r+0x30>
 8004a7e:	6063      	str	r3, [r4, #4]
 8004a80:	6014      	str	r4, [r2, #0]
 8004a82:	b003      	add	sp, #12
 8004a84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a88:	f000 b8da 	b.w	8004c40 <__malloc_unlock>
 8004a8c:	42a3      	cmp	r3, r4
 8004a8e:	d908      	bls.n	8004aa2 <_free_r+0x46>
 8004a90:	6825      	ldr	r5, [r4, #0]
 8004a92:	1961      	adds	r1, r4, r5
 8004a94:	428b      	cmp	r3, r1
 8004a96:	bf01      	itttt	eq
 8004a98:	6819      	ldreq	r1, [r3, #0]
 8004a9a:	685b      	ldreq	r3, [r3, #4]
 8004a9c:	1949      	addeq	r1, r1, r5
 8004a9e:	6021      	streq	r1, [r4, #0]
 8004aa0:	e7ed      	b.n	8004a7e <_free_r+0x22>
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	b10b      	cbz	r3, 8004aac <_free_r+0x50>
 8004aa8:	42a3      	cmp	r3, r4
 8004aaa:	d9fa      	bls.n	8004aa2 <_free_r+0x46>
 8004aac:	6811      	ldr	r1, [r2, #0]
 8004aae:	1855      	adds	r5, r2, r1
 8004ab0:	42a5      	cmp	r5, r4
 8004ab2:	d10b      	bne.n	8004acc <_free_r+0x70>
 8004ab4:	6824      	ldr	r4, [r4, #0]
 8004ab6:	4421      	add	r1, r4
 8004ab8:	1854      	adds	r4, r2, r1
 8004aba:	42a3      	cmp	r3, r4
 8004abc:	6011      	str	r1, [r2, #0]
 8004abe:	d1e0      	bne.n	8004a82 <_free_r+0x26>
 8004ac0:	681c      	ldr	r4, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	6053      	str	r3, [r2, #4]
 8004ac6:	440c      	add	r4, r1
 8004ac8:	6014      	str	r4, [r2, #0]
 8004aca:	e7da      	b.n	8004a82 <_free_r+0x26>
 8004acc:	d902      	bls.n	8004ad4 <_free_r+0x78>
 8004ace:	230c      	movs	r3, #12
 8004ad0:	6003      	str	r3, [r0, #0]
 8004ad2:	e7d6      	b.n	8004a82 <_free_r+0x26>
 8004ad4:	6825      	ldr	r5, [r4, #0]
 8004ad6:	1961      	adds	r1, r4, r5
 8004ad8:	428b      	cmp	r3, r1
 8004ada:	bf04      	itt	eq
 8004adc:	6819      	ldreq	r1, [r3, #0]
 8004ade:	685b      	ldreq	r3, [r3, #4]
 8004ae0:	6063      	str	r3, [r4, #4]
 8004ae2:	bf04      	itt	eq
 8004ae4:	1949      	addeq	r1, r1, r5
 8004ae6:	6021      	streq	r1, [r4, #0]
 8004ae8:	6054      	str	r4, [r2, #4]
 8004aea:	e7ca      	b.n	8004a82 <_free_r+0x26>
 8004aec:	b003      	add	sp, #12
 8004aee:	bd30      	pop	{r4, r5, pc}
 8004af0:	200002d4 	.word	0x200002d4

08004af4 <sbrk_aligned>:
 8004af4:	b570      	push	{r4, r5, r6, lr}
 8004af6:	4e0e      	ldr	r6, [pc, #56]	; (8004b30 <sbrk_aligned+0x3c>)
 8004af8:	460c      	mov	r4, r1
 8004afa:	6831      	ldr	r1, [r6, #0]
 8004afc:	4605      	mov	r5, r0
 8004afe:	b911      	cbnz	r1, 8004b06 <sbrk_aligned+0x12>
 8004b00:	f000 fcaa 	bl	8005458 <_sbrk_r>
 8004b04:	6030      	str	r0, [r6, #0]
 8004b06:	4621      	mov	r1, r4
 8004b08:	4628      	mov	r0, r5
 8004b0a:	f000 fca5 	bl	8005458 <_sbrk_r>
 8004b0e:	1c43      	adds	r3, r0, #1
 8004b10:	d00a      	beq.n	8004b28 <sbrk_aligned+0x34>
 8004b12:	1cc4      	adds	r4, r0, #3
 8004b14:	f024 0403 	bic.w	r4, r4, #3
 8004b18:	42a0      	cmp	r0, r4
 8004b1a:	d007      	beq.n	8004b2c <sbrk_aligned+0x38>
 8004b1c:	1a21      	subs	r1, r4, r0
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f000 fc9a 	bl	8005458 <_sbrk_r>
 8004b24:	3001      	adds	r0, #1
 8004b26:	d101      	bne.n	8004b2c <sbrk_aligned+0x38>
 8004b28:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004b2c:	4620      	mov	r0, r4
 8004b2e:	bd70      	pop	{r4, r5, r6, pc}
 8004b30:	200002d8 	.word	0x200002d8

08004b34 <_malloc_r>:
 8004b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b38:	1ccd      	adds	r5, r1, #3
 8004b3a:	f025 0503 	bic.w	r5, r5, #3
 8004b3e:	3508      	adds	r5, #8
 8004b40:	2d0c      	cmp	r5, #12
 8004b42:	bf38      	it	cc
 8004b44:	250c      	movcc	r5, #12
 8004b46:	2d00      	cmp	r5, #0
 8004b48:	4607      	mov	r7, r0
 8004b4a:	db01      	blt.n	8004b50 <_malloc_r+0x1c>
 8004b4c:	42a9      	cmp	r1, r5
 8004b4e:	d905      	bls.n	8004b5c <_malloc_r+0x28>
 8004b50:	230c      	movs	r3, #12
 8004b52:	603b      	str	r3, [r7, #0]
 8004b54:	2600      	movs	r6, #0
 8004b56:	4630      	mov	r0, r6
 8004b58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004c30 <_malloc_r+0xfc>
 8004b60:	f000 f868 	bl	8004c34 <__malloc_lock>
 8004b64:	f8d8 3000 	ldr.w	r3, [r8]
 8004b68:	461c      	mov	r4, r3
 8004b6a:	bb5c      	cbnz	r4, 8004bc4 <_malloc_r+0x90>
 8004b6c:	4629      	mov	r1, r5
 8004b6e:	4638      	mov	r0, r7
 8004b70:	f7ff ffc0 	bl	8004af4 <sbrk_aligned>
 8004b74:	1c43      	adds	r3, r0, #1
 8004b76:	4604      	mov	r4, r0
 8004b78:	d155      	bne.n	8004c26 <_malloc_r+0xf2>
 8004b7a:	f8d8 4000 	ldr.w	r4, [r8]
 8004b7e:	4626      	mov	r6, r4
 8004b80:	2e00      	cmp	r6, #0
 8004b82:	d145      	bne.n	8004c10 <_malloc_r+0xdc>
 8004b84:	2c00      	cmp	r4, #0
 8004b86:	d048      	beq.n	8004c1a <_malloc_r+0xe6>
 8004b88:	6823      	ldr	r3, [r4, #0]
 8004b8a:	4631      	mov	r1, r6
 8004b8c:	4638      	mov	r0, r7
 8004b8e:	eb04 0903 	add.w	r9, r4, r3
 8004b92:	f000 fc61 	bl	8005458 <_sbrk_r>
 8004b96:	4581      	cmp	r9, r0
 8004b98:	d13f      	bne.n	8004c1a <_malloc_r+0xe6>
 8004b9a:	6821      	ldr	r1, [r4, #0]
 8004b9c:	1a6d      	subs	r5, r5, r1
 8004b9e:	4629      	mov	r1, r5
 8004ba0:	4638      	mov	r0, r7
 8004ba2:	f7ff ffa7 	bl	8004af4 <sbrk_aligned>
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	d037      	beq.n	8004c1a <_malloc_r+0xe6>
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	442b      	add	r3, r5
 8004bae:	6023      	str	r3, [r4, #0]
 8004bb0:	f8d8 3000 	ldr.w	r3, [r8]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d038      	beq.n	8004c2a <_malloc_r+0xf6>
 8004bb8:	685a      	ldr	r2, [r3, #4]
 8004bba:	42a2      	cmp	r2, r4
 8004bbc:	d12b      	bne.n	8004c16 <_malloc_r+0xe2>
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	605a      	str	r2, [r3, #4]
 8004bc2:	e00f      	b.n	8004be4 <_malloc_r+0xb0>
 8004bc4:	6822      	ldr	r2, [r4, #0]
 8004bc6:	1b52      	subs	r2, r2, r5
 8004bc8:	d41f      	bmi.n	8004c0a <_malloc_r+0xd6>
 8004bca:	2a0b      	cmp	r2, #11
 8004bcc:	d917      	bls.n	8004bfe <_malloc_r+0xca>
 8004bce:	1961      	adds	r1, r4, r5
 8004bd0:	42a3      	cmp	r3, r4
 8004bd2:	6025      	str	r5, [r4, #0]
 8004bd4:	bf18      	it	ne
 8004bd6:	6059      	strne	r1, [r3, #4]
 8004bd8:	6863      	ldr	r3, [r4, #4]
 8004bda:	bf08      	it	eq
 8004bdc:	f8c8 1000 	streq.w	r1, [r8]
 8004be0:	5162      	str	r2, [r4, r5]
 8004be2:	604b      	str	r3, [r1, #4]
 8004be4:	4638      	mov	r0, r7
 8004be6:	f104 060b 	add.w	r6, r4, #11
 8004bea:	f000 f829 	bl	8004c40 <__malloc_unlock>
 8004bee:	f026 0607 	bic.w	r6, r6, #7
 8004bf2:	1d23      	adds	r3, r4, #4
 8004bf4:	1af2      	subs	r2, r6, r3
 8004bf6:	d0ae      	beq.n	8004b56 <_malloc_r+0x22>
 8004bf8:	1b9b      	subs	r3, r3, r6
 8004bfa:	50a3      	str	r3, [r4, r2]
 8004bfc:	e7ab      	b.n	8004b56 <_malloc_r+0x22>
 8004bfe:	42a3      	cmp	r3, r4
 8004c00:	6862      	ldr	r2, [r4, #4]
 8004c02:	d1dd      	bne.n	8004bc0 <_malloc_r+0x8c>
 8004c04:	f8c8 2000 	str.w	r2, [r8]
 8004c08:	e7ec      	b.n	8004be4 <_malloc_r+0xb0>
 8004c0a:	4623      	mov	r3, r4
 8004c0c:	6864      	ldr	r4, [r4, #4]
 8004c0e:	e7ac      	b.n	8004b6a <_malloc_r+0x36>
 8004c10:	4634      	mov	r4, r6
 8004c12:	6876      	ldr	r6, [r6, #4]
 8004c14:	e7b4      	b.n	8004b80 <_malloc_r+0x4c>
 8004c16:	4613      	mov	r3, r2
 8004c18:	e7cc      	b.n	8004bb4 <_malloc_r+0x80>
 8004c1a:	230c      	movs	r3, #12
 8004c1c:	603b      	str	r3, [r7, #0]
 8004c1e:	4638      	mov	r0, r7
 8004c20:	f000 f80e 	bl	8004c40 <__malloc_unlock>
 8004c24:	e797      	b.n	8004b56 <_malloc_r+0x22>
 8004c26:	6025      	str	r5, [r4, #0]
 8004c28:	e7dc      	b.n	8004be4 <_malloc_r+0xb0>
 8004c2a:	605b      	str	r3, [r3, #4]
 8004c2c:	deff      	udf	#255	; 0xff
 8004c2e:	bf00      	nop
 8004c30:	200002d4 	.word	0x200002d4

08004c34 <__malloc_lock>:
 8004c34:	4801      	ldr	r0, [pc, #4]	; (8004c3c <__malloc_lock+0x8>)
 8004c36:	f7ff bf0e 	b.w	8004a56 <__retarget_lock_acquire_recursive>
 8004c3a:	bf00      	nop
 8004c3c:	200002d0 	.word	0x200002d0

08004c40 <__malloc_unlock>:
 8004c40:	4801      	ldr	r0, [pc, #4]	; (8004c48 <__malloc_unlock+0x8>)
 8004c42:	f7ff bf09 	b.w	8004a58 <__retarget_lock_release_recursive>
 8004c46:	bf00      	nop
 8004c48:	200002d0 	.word	0x200002d0

08004c4c <__sfputc_r>:
 8004c4c:	6893      	ldr	r3, [r2, #8]
 8004c4e:	3b01      	subs	r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	b410      	push	{r4}
 8004c54:	6093      	str	r3, [r2, #8]
 8004c56:	da08      	bge.n	8004c6a <__sfputc_r+0x1e>
 8004c58:	6994      	ldr	r4, [r2, #24]
 8004c5a:	42a3      	cmp	r3, r4
 8004c5c:	db01      	blt.n	8004c62 <__sfputc_r+0x16>
 8004c5e:	290a      	cmp	r1, #10
 8004c60:	d103      	bne.n	8004c6a <__sfputc_r+0x1e>
 8004c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c66:	f7ff bde8 	b.w	800483a <__swbuf_r>
 8004c6a:	6813      	ldr	r3, [r2, #0]
 8004c6c:	1c58      	adds	r0, r3, #1
 8004c6e:	6010      	str	r0, [r2, #0]
 8004c70:	7019      	strb	r1, [r3, #0]
 8004c72:	4608      	mov	r0, r1
 8004c74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c78:	4770      	bx	lr

08004c7a <__sfputs_r>:
 8004c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c7c:	4606      	mov	r6, r0
 8004c7e:	460f      	mov	r7, r1
 8004c80:	4614      	mov	r4, r2
 8004c82:	18d5      	adds	r5, r2, r3
 8004c84:	42ac      	cmp	r4, r5
 8004c86:	d101      	bne.n	8004c8c <__sfputs_r+0x12>
 8004c88:	2000      	movs	r0, #0
 8004c8a:	e007      	b.n	8004c9c <__sfputs_r+0x22>
 8004c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c90:	463a      	mov	r2, r7
 8004c92:	4630      	mov	r0, r6
 8004c94:	f7ff ffda 	bl	8004c4c <__sfputc_r>
 8004c98:	1c43      	adds	r3, r0, #1
 8004c9a:	d1f3      	bne.n	8004c84 <__sfputs_r+0xa>
 8004c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ca0 <_vfiprintf_r>:
 8004ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca4:	460d      	mov	r5, r1
 8004ca6:	b09d      	sub	sp, #116	; 0x74
 8004ca8:	4614      	mov	r4, r2
 8004caa:	4698      	mov	r8, r3
 8004cac:	4606      	mov	r6, r0
 8004cae:	b118      	cbz	r0, 8004cb8 <_vfiprintf_r+0x18>
 8004cb0:	6a03      	ldr	r3, [r0, #32]
 8004cb2:	b90b      	cbnz	r3, 8004cb8 <_vfiprintf_r+0x18>
 8004cb4:	f7ff fcda 	bl	800466c <__sinit>
 8004cb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cba:	07d9      	lsls	r1, r3, #31
 8004cbc:	d405      	bmi.n	8004cca <_vfiprintf_r+0x2a>
 8004cbe:	89ab      	ldrh	r3, [r5, #12]
 8004cc0:	059a      	lsls	r2, r3, #22
 8004cc2:	d402      	bmi.n	8004cca <_vfiprintf_r+0x2a>
 8004cc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cc6:	f7ff fec6 	bl	8004a56 <__retarget_lock_acquire_recursive>
 8004cca:	89ab      	ldrh	r3, [r5, #12]
 8004ccc:	071b      	lsls	r3, r3, #28
 8004cce:	d501      	bpl.n	8004cd4 <_vfiprintf_r+0x34>
 8004cd0:	692b      	ldr	r3, [r5, #16]
 8004cd2:	b99b      	cbnz	r3, 8004cfc <_vfiprintf_r+0x5c>
 8004cd4:	4629      	mov	r1, r5
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	f7ff fdec 	bl	80048b4 <__swsetup_r>
 8004cdc:	b170      	cbz	r0, 8004cfc <_vfiprintf_r+0x5c>
 8004cde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ce0:	07dc      	lsls	r4, r3, #31
 8004ce2:	d504      	bpl.n	8004cee <_vfiprintf_r+0x4e>
 8004ce4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ce8:	b01d      	add	sp, #116	; 0x74
 8004cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cee:	89ab      	ldrh	r3, [r5, #12]
 8004cf0:	0598      	lsls	r0, r3, #22
 8004cf2:	d4f7      	bmi.n	8004ce4 <_vfiprintf_r+0x44>
 8004cf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cf6:	f7ff feaf 	bl	8004a58 <__retarget_lock_release_recursive>
 8004cfa:	e7f3      	b.n	8004ce4 <_vfiprintf_r+0x44>
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8004d00:	2320      	movs	r3, #32
 8004d02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d06:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d0a:	2330      	movs	r3, #48	; 0x30
 8004d0c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004ec0 <_vfiprintf_r+0x220>
 8004d10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d14:	f04f 0901 	mov.w	r9, #1
 8004d18:	4623      	mov	r3, r4
 8004d1a:	469a      	mov	sl, r3
 8004d1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d20:	b10a      	cbz	r2, 8004d26 <_vfiprintf_r+0x86>
 8004d22:	2a25      	cmp	r2, #37	; 0x25
 8004d24:	d1f9      	bne.n	8004d1a <_vfiprintf_r+0x7a>
 8004d26:	ebba 0b04 	subs.w	fp, sl, r4
 8004d2a:	d00b      	beq.n	8004d44 <_vfiprintf_r+0xa4>
 8004d2c:	465b      	mov	r3, fp
 8004d2e:	4622      	mov	r2, r4
 8004d30:	4629      	mov	r1, r5
 8004d32:	4630      	mov	r0, r6
 8004d34:	f7ff ffa1 	bl	8004c7a <__sfputs_r>
 8004d38:	3001      	adds	r0, #1
 8004d3a:	f000 80a9 	beq.w	8004e90 <_vfiprintf_r+0x1f0>
 8004d3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d40:	445a      	add	r2, fp
 8004d42:	9209      	str	r2, [sp, #36]	; 0x24
 8004d44:	f89a 3000 	ldrb.w	r3, [sl]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 80a1 	beq.w	8004e90 <_vfiprintf_r+0x1f0>
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d58:	f10a 0a01 	add.w	sl, sl, #1
 8004d5c:	9304      	str	r3, [sp, #16]
 8004d5e:	9307      	str	r3, [sp, #28]
 8004d60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004d64:	931a      	str	r3, [sp, #104]	; 0x68
 8004d66:	4654      	mov	r4, sl
 8004d68:	2205      	movs	r2, #5
 8004d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d6e:	4854      	ldr	r0, [pc, #336]	; (8004ec0 <_vfiprintf_r+0x220>)
 8004d70:	f7fb fa2e 	bl	80001d0 <memchr>
 8004d74:	9a04      	ldr	r2, [sp, #16]
 8004d76:	b9d8      	cbnz	r0, 8004db0 <_vfiprintf_r+0x110>
 8004d78:	06d1      	lsls	r1, r2, #27
 8004d7a:	bf44      	itt	mi
 8004d7c:	2320      	movmi	r3, #32
 8004d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d82:	0713      	lsls	r3, r2, #28
 8004d84:	bf44      	itt	mi
 8004d86:	232b      	movmi	r3, #43	; 0x2b
 8004d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d90:	2b2a      	cmp	r3, #42	; 0x2a
 8004d92:	d015      	beq.n	8004dc0 <_vfiprintf_r+0x120>
 8004d94:	9a07      	ldr	r2, [sp, #28]
 8004d96:	4654      	mov	r4, sl
 8004d98:	2000      	movs	r0, #0
 8004d9a:	f04f 0c0a 	mov.w	ip, #10
 8004d9e:	4621      	mov	r1, r4
 8004da0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004da4:	3b30      	subs	r3, #48	; 0x30
 8004da6:	2b09      	cmp	r3, #9
 8004da8:	d94d      	bls.n	8004e46 <_vfiprintf_r+0x1a6>
 8004daa:	b1b0      	cbz	r0, 8004dda <_vfiprintf_r+0x13a>
 8004dac:	9207      	str	r2, [sp, #28]
 8004dae:	e014      	b.n	8004dda <_vfiprintf_r+0x13a>
 8004db0:	eba0 0308 	sub.w	r3, r0, r8
 8004db4:	fa09 f303 	lsl.w	r3, r9, r3
 8004db8:	4313      	orrs	r3, r2
 8004dba:	9304      	str	r3, [sp, #16]
 8004dbc:	46a2      	mov	sl, r4
 8004dbe:	e7d2      	b.n	8004d66 <_vfiprintf_r+0xc6>
 8004dc0:	9b03      	ldr	r3, [sp, #12]
 8004dc2:	1d19      	adds	r1, r3, #4
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	9103      	str	r1, [sp, #12]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bfbb      	ittet	lt
 8004dcc:	425b      	neglt	r3, r3
 8004dce:	f042 0202 	orrlt.w	r2, r2, #2
 8004dd2:	9307      	strge	r3, [sp, #28]
 8004dd4:	9307      	strlt	r3, [sp, #28]
 8004dd6:	bfb8      	it	lt
 8004dd8:	9204      	strlt	r2, [sp, #16]
 8004dda:	7823      	ldrb	r3, [r4, #0]
 8004ddc:	2b2e      	cmp	r3, #46	; 0x2e
 8004dde:	d10c      	bne.n	8004dfa <_vfiprintf_r+0x15a>
 8004de0:	7863      	ldrb	r3, [r4, #1]
 8004de2:	2b2a      	cmp	r3, #42	; 0x2a
 8004de4:	d134      	bne.n	8004e50 <_vfiprintf_r+0x1b0>
 8004de6:	9b03      	ldr	r3, [sp, #12]
 8004de8:	1d1a      	adds	r2, r3, #4
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	9203      	str	r2, [sp, #12]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	bfb8      	it	lt
 8004df2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004df6:	3402      	adds	r4, #2
 8004df8:	9305      	str	r3, [sp, #20]
 8004dfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004ed0 <_vfiprintf_r+0x230>
 8004dfe:	7821      	ldrb	r1, [r4, #0]
 8004e00:	2203      	movs	r2, #3
 8004e02:	4650      	mov	r0, sl
 8004e04:	f7fb f9e4 	bl	80001d0 <memchr>
 8004e08:	b138      	cbz	r0, 8004e1a <_vfiprintf_r+0x17a>
 8004e0a:	9b04      	ldr	r3, [sp, #16]
 8004e0c:	eba0 000a 	sub.w	r0, r0, sl
 8004e10:	2240      	movs	r2, #64	; 0x40
 8004e12:	4082      	lsls	r2, r0
 8004e14:	4313      	orrs	r3, r2
 8004e16:	3401      	adds	r4, #1
 8004e18:	9304      	str	r3, [sp, #16]
 8004e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e1e:	4829      	ldr	r0, [pc, #164]	; (8004ec4 <_vfiprintf_r+0x224>)
 8004e20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e24:	2206      	movs	r2, #6
 8004e26:	f7fb f9d3 	bl	80001d0 <memchr>
 8004e2a:	2800      	cmp	r0, #0
 8004e2c:	d03f      	beq.n	8004eae <_vfiprintf_r+0x20e>
 8004e2e:	4b26      	ldr	r3, [pc, #152]	; (8004ec8 <_vfiprintf_r+0x228>)
 8004e30:	bb1b      	cbnz	r3, 8004e7a <_vfiprintf_r+0x1da>
 8004e32:	9b03      	ldr	r3, [sp, #12]
 8004e34:	3307      	adds	r3, #7
 8004e36:	f023 0307 	bic.w	r3, r3, #7
 8004e3a:	3308      	adds	r3, #8
 8004e3c:	9303      	str	r3, [sp, #12]
 8004e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e40:	443b      	add	r3, r7
 8004e42:	9309      	str	r3, [sp, #36]	; 0x24
 8004e44:	e768      	b.n	8004d18 <_vfiprintf_r+0x78>
 8004e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e4a:	460c      	mov	r4, r1
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	e7a6      	b.n	8004d9e <_vfiprintf_r+0xfe>
 8004e50:	2300      	movs	r3, #0
 8004e52:	3401      	adds	r4, #1
 8004e54:	9305      	str	r3, [sp, #20]
 8004e56:	4619      	mov	r1, r3
 8004e58:	f04f 0c0a 	mov.w	ip, #10
 8004e5c:	4620      	mov	r0, r4
 8004e5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004e62:	3a30      	subs	r2, #48	; 0x30
 8004e64:	2a09      	cmp	r2, #9
 8004e66:	d903      	bls.n	8004e70 <_vfiprintf_r+0x1d0>
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0c6      	beq.n	8004dfa <_vfiprintf_r+0x15a>
 8004e6c:	9105      	str	r1, [sp, #20]
 8004e6e:	e7c4      	b.n	8004dfa <_vfiprintf_r+0x15a>
 8004e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8004e74:	4604      	mov	r4, r0
 8004e76:	2301      	movs	r3, #1
 8004e78:	e7f0      	b.n	8004e5c <_vfiprintf_r+0x1bc>
 8004e7a:	ab03      	add	r3, sp, #12
 8004e7c:	9300      	str	r3, [sp, #0]
 8004e7e:	462a      	mov	r2, r5
 8004e80:	4b12      	ldr	r3, [pc, #72]	; (8004ecc <_vfiprintf_r+0x22c>)
 8004e82:	a904      	add	r1, sp, #16
 8004e84:	4630      	mov	r0, r6
 8004e86:	f3af 8000 	nop.w
 8004e8a:	4607      	mov	r7, r0
 8004e8c:	1c78      	adds	r0, r7, #1
 8004e8e:	d1d6      	bne.n	8004e3e <_vfiprintf_r+0x19e>
 8004e90:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004e92:	07d9      	lsls	r1, r3, #31
 8004e94:	d405      	bmi.n	8004ea2 <_vfiprintf_r+0x202>
 8004e96:	89ab      	ldrh	r3, [r5, #12]
 8004e98:	059a      	lsls	r2, r3, #22
 8004e9a:	d402      	bmi.n	8004ea2 <_vfiprintf_r+0x202>
 8004e9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004e9e:	f7ff fddb 	bl	8004a58 <__retarget_lock_release_recursive>
 8004ea2:	89ab      	ldrh	r3, [r5, #12]
 8004ea4:	065b      	lsls	r3, r3, #25
 8004ea6:	f53f af1d 	bmi.w	8004ce4 <_vfiprintf_r+0x44>
 8004eaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004eac:	e71c      	b.n	8004ce8 <_vfiprintf_r+0x48>
 8004eae:	ab03      	add	r3, sp, #12
 8004eb0:	9300      	str	r3, [sp, #0]
 8004eb2:	462a      	mov	r2, r5
 8004eb4:	4b05      	ldr	r3, [pc, #20]	; (8004ecc <_vfiprintf_r+0x22c>)
 8004eb6:	a904      	add	r1, sp, #16
 8004eb8:	4630      	mov	r0, r6
 8004eba:	f000 f879 	bl	8004fb0 <_printf_i>
 8004ebe:	e7e4      	b.n	8004e8a <_vfiprintf_r+0x1ea>
 8004ec0:	0800552c 	.word	0x0800552c
 8004ec4:	08005536 	.word	0x08005536
 8004ec8:	00000000 	.word	0x00000000
 8004ecc:	08004c7b 	.word	0x08004c7b
 8004ed0:	08005532 	.word	0x08005532

08004ed4 <_printf_common>:
 8004ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ed8:	4616      	mov	r6, r2
 8004eda:	4699      	mov	r9, r3
 8004edc:	688a      	ldr	r2, [r1, #8]
 8004ede:	690b      	ldr	r3, [r1, #16]
 8004ee0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	bfb8      	it	lt
 8004ee8:	4613      	movlt	r3, r2
 8004eea:	6033      	str	r3, [r6, #0]
 8004eec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ef0:	4607      	mov	r7, r0
 8004ef2:	460c      	mov	r4, r1
 8004ef4:	b10a      	cbz	r2, 8004efa <_printf_common+0x26>
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	6033      	str	r3, [r6, #0]
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	0699      	lsls	r1, r3, #26
 8004efe:	bf42      	ittt	mi
 8004f00:	6833      	ldrmi	r3, [r6, #0]
 8004f02:	3302      	addmi	r3, #2
 8004f04:	6033      	strmi	r3, [r6, #0]
 8004f06:	6825      	ldr	r5, [r4, #0]
 8004f08:	f015 0506 	ands.w	r5, r5, #6
 8004f0c:	d106      	bne.n	8004f1c <_printf_common+0x48>
 8004f0e:	f104 0a19 	add.w	sl, r4, #25
 8004f12:	68e3      	ldr	r3, [r4, #12]
 8004f14:	6832      	ldr	r2, [r6, #0]
 8004f16:	1a9b      	subs	r3, r3, r2
 8004f18:	42ab      	cmp	r3, r5
 8004f1a:	dc26      	bgt.n	8004f6a <_printf_common+0x96>
 8004f1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f20:	1e13      	subs	r3, r2, #0
 8004f22:	6822      	ldr	r2, [r4, #0]
 8004f24:	bf18      	it	ne
 8004f26:	2301      	movne	r3, #1
 8004f28:	0692      	lsls	r2, r2, #26
 8004f2a:	d42b      	bmi.n	8004f84 <_printf_common+0xb0>
 8004f2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f30:	4649      	mov	r1, r9
 8004f32:	4638      	mov	r0, r7
 8004f34:	47c0      	blx	r8
 8004f36:	3001      	adds	r0, #1
 8004f38:	d01e      	beq.n	8004f78 <_printf_common+0xa4>
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	6922      	ldr	r2, [r4, #16]
 8004f3e:	f003 0306 	and.w	r3, r3, #6
 8004f42:	2b04      	cmp	r3, #4
 8004f44:	bf02      	ittt	eq
 8004f46:	68e5      	ldreq	r5, [r4, #12]
 8004f48:	6833      	ldreq	r3, [r6, #0]
 8004f4a:	1aed      	subeq	r5, r5, r3
 8004f4c:	68a3      	ldr	r3, [r4, #8]
 8004f4e:	bf0c      	ite	eq
 8004f50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f54:	2500      	movne	r5, #0
 8004f56:	4293      	cmp	r3, r2
 8004f58:	bfc4      	itt	gt
 8004f5a:	1a9b      	subgt	r3, r3, r2
 8004f5c:	18ed      	addgt	r5, r5, r3
 8004f5e:	2600      	movs	r6, #0
 8004f60:	341a      	adds	r4, #26
 8004f62:	42b5      	cmp	r5, r6
 8004f64:	d11a      	bne.n	8004f9c <_printf_common+0xc8>
 8004f66:	2000      	movs	r0, #0
 8004f68:	e008      	b.n	8004f7c <_printf_common+0xa8>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	4652      	mov	r2, sl
 8004f6e:	4649      	mov	r1, r9
 8004f70:	4638      	mov	r0, r7
 8004f72:	47c0      	blx	r8
 8004f74:	3001      	adds	r0, #1
 8004f76:	d103      	bne.n	8004f80 <_printf_common+0xac>
 8004f78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f80:	3501      	adds	r5, #1
 8004f82:	e7c6      	b.n	8004f12 <_printf_common+0x3e>
 8004f84:	18e1      	adds	r1, r4, r3
 8004f86:	1c5a      	adds	r2, r3, #1
 8004f88:	2030      	movs	r0, #48	; 0x30
 8004f8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f8e:	4422      	add	r2, r4
 8004f90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f98:	3302      	adds	r3, #2
 8004f9a:	e7c7      	b.n	8004f2c <_printf_common+0x58>
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	4622      	mov	r2, r4
 8004fa0:	4649      	mov	r1, r9
 8004fa2:	4638      	mov	r0, r7
 8004fa4:	47c0      	blx	r8
 8004fa6:	3001      	adds	r0, #1
 8004fa8:	d0e6      	beq.n	8004f78 <_printf_common+0xa4>
 8004faa:	3601      	adds	r6, #1
 8004fac:	e7d9      	b.n	8004f62 <_printf_common+0x8e>
	...

08004fb0 <_printf_i>:
 8004fb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb4:	7e0f      	ldrb	r7, [r1, #24]
 8004fb6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fb8:	2f78      	cmp	r7, #120	; 0x78
 8004fba:	4691      	mov	r9, r2
 8004fbc:	4680      	mov	r8, r0
 8004fbe:	460c      	mov	r4, r1
 8004fc0:	469a      	mov	sl, r3
 8004fc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004fc6:	d807      	bhi.n	8004fd8 <_printf_i+0x28>
 8004fc8:	2f62      	cmp	r7, #98	; 0x62
 8004fca:	d80a      	bhi.n	8004fe2 <_printf_i+0x32>
 8004fcc:	2f00      	cmp	r7, #0
 8004fce:	f000 80d4 	beq.w	800517a <_printf_i+0x1ca>
 8004fd2:	2f58      	cmp	r7, #88	; 0x58
 8004fd4:	f000 80c0 	beq.w	8005158 <_printf_i+0x1a8>
 8004fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fdc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fe0:	e03a      	b.n	8005058 <_printf_i+0xa8>
 8004fe2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fe6:	2b15      	cmp	r3, #21
 8004fe8:	d8f6      	bhi.n	8004fd8 <_printf_i+0x28>
 8004fea:	a101      	add	r1, pc, #4	; (adr r1, 8004ff0 <_printf_i+0x40>)
 8004fec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ff0:	08005049 	.word	0x08005049
 8004ff4:	0800505d 	.word	0x0800505d
 8004ff8:	08004fd9 	.word	0x08004fd9
 8004ffc:	08004fd9 	.word	0x08004fd9
 8005000:	08004fd9 	.word	0x08004fd9
 8005004:	08004fd9 	.word	0x08004fd9
 8005008:	0800505d 	.word	0x0800505d
 800500c:	08004fd9 	.word	0x08004fd9
 8005010:	08004fd9 	.word	0x08004fd9
 8005014:	08004fd9 	.word	0x08004fd9
 8005018:	08004fd9 	.word	0x08004fd9
 800501c:	08005161 	.word	0x08005161
 8005020:	08005089 	.word	0x08005089
 8005024:	0800511b 	.word	0x0800511b
 8005028:	08004fd9 	.word	0x08004fd9
 800502c:	08004fd9 	.word	0x08004fd9
 8005030:	08005183 	.word	0x08005183
 8005034:	08004fd9 	.word	0x08004fd9
 8005038:	08005089 	.word	0x08005089
 800503c:	08004fd9 	.word	0x08004fd9
 8005040:	08004fd9 	.word	0x08004fd9
 8005044:	08005123 	.word	0x08005123
 8005048:	682b      	ldr	r3, [r5, #0]
 800504a:	1d1a      	adds	r2, r3, #4
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	602a      	str	r2, [r5, #0]
 8005050:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005054:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005058:	2301      	movs	r3, #1
 800505a:	e09f      	b.n	800519c <_printf_i+0x1ec>
 800505c:	6820      	ldr	r0, [r4, #0]
 800505e:	682b      	ldr	r3, [r5, #0]
 8005060:	0607      	lsls	r7, r0, #24
 8005062:	f103 0104 	add.w	r1, r3, #4
 8005066:	6029      	str	r1, [r5, #0]
 8005068:	d501      	bpl.n	800506e <_printf_i+0xbe>
 800506a:	681e      	ldr	r6, [r3, #0]
 800506c:	e003      	b.n	8005076 <_printf_i+0xc6>
 800506e:	0646      	lsls	r6, r0, #25
 8005070:	d5fb      	bpl.n	800506a <_printf_i+0xba>
 8005072:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005076:	2e00      	cmp	r6, #0
 8005078:	da03      	bge.n	8005082 <_printf_i+0xd2>
 800507a:	232d      	movs	r3, #45	; 0x2d
 800507c:	4276      	negs	r6, r6
 800507e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005082:	485a      	ldr	r0, [pc, #360]	; (80051ec <_printf_i+0x23c>)
 8005084:	230a      	movs	r3, #10
 8005086:	e012      	b.n	80050ae <_printf_i+0xfe>
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	6820      	ldr	r0, [r4, #0]
 800508c:	1d19      	adds	r1, r3, #4
 800508e:	6029      	str	r1, [r5, #0]
 8005090:	0605      	lsls	r5, r0, #24
 8005092:	d501      	bpl.n	8005098 <_printf_i+0xe8>
 8005094:	681e      	ldr	r6, [r3, #0]
 8005096:	e002      	b.n	800509e <_printf_i+0xee>
 8005098:	0641      	lsls	r1, r0, #25
 800509a:	d5fb      	bpl.n	8005094 <_printf_i+0xe4>
 800509c:	881e      	ldrh	r6, [r3, #0]
 800509e:	4853      	ldr	r0, [pc, #332]	; (80051ec <_printf_i+0x23c>)
 80050a0:	2f6f      	cmp	r7, #111	; 0x6f
 80050a2:	bf0c      	ite	eq
 80050a4:	2308      	moveq	r3, #8
 80050a6:	230a      	movne	r3, #10
 80050a8:	2100      	movs	r1, #0
 80050aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80050ae:	6865      	ldr	r5, [r4, #4]
 80050b0:	60a5      	str	r5, [r4, #8]
 80050b2:	2d00      	cmp	r5, #0
 80050b4:	bfa2      	ittt	ge
 80050b6:	6821      	ldrge	r1, [r4, #0]
 80050b8:	f021 0104 	bicge.w	r1, r1, #4
 80050bc:	6021      	strge	r1, [r4, #0]
 80050be:	b90e      	cbnz	r6, 80050c4 <_printf_i+0x114>
 80050c0:	2d00      	cmp	r5, #0
 80050c2:	d04b      	beq.n	800515c <_printf_i+0x1ac>
 80050c4:	4615      	mov	r5, r2
 80050c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80050ca:	fb03 6711 	mls	r7, r3, r1, r6
 80050ce:	5dc7      	ldrb	r7, [r0, r7]
 80050d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050d4:	4637      	mov	r7, r6
 80050d6:	42bb      	cmp	r3, r7
 80050d8:	460e      	mov	r6, r1
 80050da:	d9f4      	bls.n	80050c6 <_printf_i+0x116>
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d10b      	bne.n	80050f8 <_printf_i+0x148>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	07de      	lsls	r6, r3, #31
 80050e4:	d508      	bpl.n	80050f8 <_printf_i+0x148>
 80050e6:	6923      	ldr	r3, [r4, #16]
 80050e8:	6861      	ldr	r1, [r4, #4]
 80050ea:	4299      	cmp	r1, r3
 80050ec:	bfde      	ittt	le
 80050ee:	2330      	movle	r3, #48	; 0x30
 80050f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050f4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80050f8:	1b52      	subs	r2, r2, r5
 80050fa:	6122      	str	r2, [r4, #16]
 80050fc:	f8cd a000 	str.w	sl, [sp]
 8005100:	464b      	mov	r3, r9
 8005102:	aa03      	add	r2, sp, #12
 8005104:	4621      	mov	r1, r4
 8005106:	4640      	mov	r0, r8
 8005108:	f7ff fee4 	bl	8004ed4 <_printf_common>
 800510c:	3001      	adds	r0, #1
 800510e:	d14a      	bne.n	80051a6 <_printf_i+0x1f6>
 8005110:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005114:	b004      	add	sp, #16
 8005116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	f043 0320 	orr.w	r3, r3, #32
 8005120:	6023      	str	r3, [r4, #0]
 8005122:	4833      	ldr	r0, [pc, #204]	; (80051f0 <_printf_i+0x240>)
 8005124:	2778      	movs	r7, #120	; 0x78
 8005126:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800512a:	6823      	ldr	r3, [r4, #0]
 800512c:	6829      	ldr	r1, [r5, #0]
 800512e:	061f      	lsls	r7, r3, #24
 8005130:	f851 6b04 	ldr.w	r6, [r1], #4
 8005134:	d402      	bmi.n	800513c <_printf_i+0x18c>
 8005136:	065f      	lsls	r7, r3, #25
 8005138:	bf48      	it	mi
 800513a:	b2b6      	uxthmi	r6, r6
 800513c:	07df      	lsls	r7, r3, #31
 800513e:	bf48      	it	mi
 8005140:	f043 0320 	orrmi.w	r3, r3, #32
 8005144:	6029      	str	r1, [r5, #0]
 8005146:	bf48      	it	mi
 8005148:	6023      	strmi	r3, [r4, #0]
 800514a:	b91e      	cbnz	r6, 8005154 <_printf_i+0x1a4>
 800514c:	6823      	ldr	r3, [r4, #0]
 800514e:	f023 0320 	bic.w	r3, r3, #32
 8005152:	6023      	str	r3, [r4, #0]
 8005154:	2310      	movs	r3, #16
 8005156:	e7a7      	b.n	80050a8 <_printf_i+0xf8>
 8005158:	4824      	ldr	r0, [pc, #144]	; (80051ec <_printf_i+0x23c>)
 800515a:	e7e4      	b.n	8005126 <_printf_i+0x176>
 800515c:	4615      	mov	r5, r2
 800515e:	e7bd      	b.n	80050dc <_printf_i+0x12c>
 8005160:	682b      	ldr	r3, [r5, #0]
 8005162:	6826      	ldr	r6, [r4, #0]
 8005164:	6961      	ldr	r1, [r4, #20]
 8005166:	1d18      	adds	r0, r3, #4
 8005168:	6028      	str	r0, [r5, #0]
 800516a:	0635      	lsls	r5, r6, #24
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	d501      	bpl.n	8005174 <_printf_i+0x1c4>
 8005170:	6019      	str	r1, [r3, #0]
 8005172:	e002      	b.n	800517a <_printf_i+0x1ca>
 8005174:	0670      	lsls	r0, r6, #25
 8005176:	d5fb      	bpl.n	8005170 <_printf_i+0x1c0>
 8005178:	8019      	strh	r1, [r3, #0]
 800517a:	2300      	movs	r3, #0
 800517c:	6123      	str	r3, [r4, #16]
 800517e:	4615      	mov	r5, r2
 8005180:	e7bc      	b.n	80050fc <_printf_i+0x14c>
 8005182:	682b      	ldr	r3, [r5, #0]
 8005184:	1d1a      	adds	r2, r3, #4
 8005186:	602a      	str	r2, [r5, #0]
 8005188:	681d      	ldr	r5, [r3, #0]
 800518a:	6862      	ldr	r2, [r4, #4]
 800518c:	2100      	movs	r1, #0
 800518e:	4628      	mov	r0, r5
 8005190:	f7fb f81e 	bl	80001d0 <memchr>
 8005194:	b108      	cbz	r0, 800519a <_printf_i+0x1ea>
 8005196:	1b40      	subs	r0, r0, r5
 8005198:	6060      	str	r0, [r4, #4]
 800519a:	6863      	ldr	r3, [r4, #4]
 800519c:	6123      	str	r3, [r4, #16]
 800519e:	2300      	movs	r3, #0
 80051a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051a4:	e7aa      	b.n	80050fc <_printf_i+0x14c>
 80051a6:	6923      	ldr	r3, [r4, #16]
 80051a8:	462a      	mov	r2, r5
 80051aa:	4649      	mov	r1, r9
 80051ac:	4640      	mov	r0, r8
 80051ae:	47d0      	blx	sl
 80051b0:	3001      	adds	r0, #1
 80051b2:	d0ad      	beq.n	8005110 <_printf_i+0x160>
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	079b      	lsls	r3, r3, #30
 80051b8:	d413      	bmi.n	80051e2 <_printf_i+0x232>
 80051ba:	68e0      	ldr	r0, [r4, #12]
 80051bc:	9b03      	ldr	r3, [sp, #12]
 80051be:	4298      	cmp	r0, r3
 80051c0:	bfb8      	it	lt
 80051c2:	4618      	movlt	r0, r3
 80051c4:	e7a6      	b.n	8005114 <_printf_i+0x164>
 80051c6:	2301      	movs	r3, #1
 80051c8:	4632      	mov	r2, r6
 80051ca:	4649      	mov	r1, r9
 80051cc:	4640      	mov	r0, r8
 80051ce:	47d0      	blx	sl
 80051d0:	3001      	adds	r0, #1
 80051d2:	d09d      	beq.n	8005110 <_printf_i+0x160>
 80051d4:	3501      	adds	r5, #1
 80051d6:	68e3      	ldr	r3, [r4, #12]
 80051d8:	9903      	ldr	r1, [sp, #12]
 80051da:	1a5b      	subs	r3, r3, r1
 80051dc:	42ab      	cmp	r3, r5
 80051de:	dcf2      	bgt.n	80051c6 <_printf_i+0x216>
 80051e0:	e7eb      	b.n	80051ba <_printf_i+0x20a>
 80051e2:	2500      	movs	r5, #0
 80051e4:	f104 0619 	add.w	r6, r4, #25
 80051e8:	e7f5      	b.n	80051d6 <_printf_i+0x226>
 80051ea:	bf00      	nop
 80051ec:	0800553d 	.word	0x0800553d
 80051f0:	0800554e 	.word	0x0800554e

080051f4 <__sflush_r>:
 80051f4:	898a      	ldrh	r2, [r1, #12]
 80051f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051fa:	4605      	mov	r5, r0
 80051fc:	0710      	lsls	r0, r2, #28
 80051fe:	460c      	mov	r4, r1
 8005200:	d458      	bmi.n	80052b4 <__sflush_r+0xc0>
 8005202:	684b      	ldr	r3, [r1, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	dc05      	bgt.n	8005214 <__sflush_r+0x20>
 8005208:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800520a:	2b00      	cmp	r3, #0
 800520c:	dc02      	bgt.n	8005214 <__sflush_r+0x20>
 800520e:	2000      	movs	r0, #0
 8005210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005216:	2e00      	cmp	r6, #0
 8005218:	d0f9      	beq.n	800520e <__sflush_r+0x1a>
 800521a:	2300      	movs	r3, #0
 800521c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005220:	682f      	ldr	r7, [r5, #0]
 8005222:	6a21      	ldr	r1, [r4, #32]
 8005224:	602b      	str	r3, [r5, #0]
 8005226:	d032      	beq.n	800528e <__sflush_r+0x9a>
 8005228:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800522a:	89a3      	ldrh	r3, [r4, #12]
 800522c:	075a      	lsls	r2, r3, #29
 800522e:	d505      	bpl.n	800523c <__sflush_r+0x48>
 8005230:	6863      	ldr	r3, [r4, #4]
 8005232:	1ac0      	subs	r0, r0, r3
 8005234:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005236:	b10b      	cbz	r3, 800523c <__sflush_r+0x48>
 8005238:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800523a:	1ac0      	subs	r0, r0, r3
 800523c:	2300      	movs	r3, #0
 800523e:	4602      	mov	r2, r0
 8005240:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005242:	6a21      	ldr	r1, [r4, #32]
 8005244:	4628      	mov	r0, r5
 8005246:	47b0      	blx	r6
 8005248:	1c43      	adds	r3, r0, #1
 800524a:	89a3      	ldrh	r3, [r4, #12]
 800524c:	d106      	bne.n	800525c <__sflush_r+0x68>
 800524e:	6829      	ldr	r1, [r5, #0]
 8005250:	291d      	cmp	r1, #29
 8005252:	d82b      	bhi.n	80052ac <__sflush_r+0xb8>
 8005254:	4a29      	ldr	r2, [pc, #164]	; (80052fc <__sflush_r+0x108>)
 8005256:	410a      	asrs	r2, r1
 8005258:	07d6      	lsls	r6, r2, #31
 800525a:	d427      	bmi.n	80052ac <__sflush_r+0xb8>
 800525c:	2200      	movs	r2, #0
 800525e:	6062      	str	r2, [r4, #4]
 8005260:	04d9      	lsls	r1, r3, #19
 8005262:	6922      	ldr	r2, [r4, #16]
 8005264:	6022      	str	r2, [r4, #0]
 8005266:	d504      	bpl.n	8005272 <__sflush_r+0x7e>
 8005268:	1c42      	adds	r2, r0, #1
 800526a:	d101      	bne.n	8005270 <__sflush_r+0x7c>
 800526c:	682b      	ldr	r3, [r5, #0]
 800526e:	b903      	cbnz	r3, 8005272 <__sflush_r+0x7e>
 8005270:	6560      	str	r0, [r4, #84]	; 0x54
 8005272:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005274:	602f      	str	r7, [r5, #0]
 8005276:	2900      	cmp	r1, #0
 8005278:	d0c9      	beq.n	800520e <__sflush_r+0x1a>
 800527a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800527e:	4299      	cmp	r1, r3
 8005280:	d002      	beq.n	8005288 <__sflush_r+0x94>
 8005282:	4628      	mov	r0, r5
 8005284:	f7ff fbea 	bl	8004a5c <_free_r>
 8005288:	2000      	movs	r0, #0
 800528a:	6360      	str	r0, [r4, #52]	; 0x34
 800528c:	e7c0      	b.n	8005210 <__sflush_r+0x1c>
 800528e:	2301      	movs	r3, #1
 8005290:	4628      	mov	r0, r5
 8005292:	47b0      	blx	r6
 8005294:	1c41      	adds	r1, r0, #1
 8005296:	d1c8      	bne.n	800522a <__sflush_r+0x36>
 8005298:	682b      	ldr	r3, [r5, #0]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d0c5      	beq.n	800522a <__sflush_r+0x36>
 800529e:	2b1d      	cmp	r3, #29
 80052a0:	d001      	beq.n	80052a6 <__sflush_r+0xb2>
 80052a2:	2b16      	cmp	r3, #22
 80052a4:	d101      	bne.n	80052aa <__sflush_r+0xb6>
 80052a6:	602f      	str	r7, [r5, #0]
 80052a8:	e7b1      	b.n	800520e <__sflush_r+0x1a>
 80052aa:	89a3      	ldrh	r3, [r4, #12]
 80052ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052b0:	81a3      	strh	r3, [r4, #12]
 80052b2:	e7ad      	b.n	8005210 <__sflush_r+0x1c>
 80052b4:	690f      	ldr	r7, [r1, #16]
 80052b6:	2f00      	cmp	r7, #0
 80052b8:	d0a9      	beq.n	800520e <__sflush_r+0x1a>
 80052ba:	0793      	lsls	r3, r2, #30
 80052bc:	680e      	ldr	r6, [r1, #0]
 80052be:	bf08      	it	eq
 80052c0:	694b      	ldreq	r3, [r1, #20]
 80052c2:	600f      	str	r7, [r1, #0]
 80052c4:	bf18      	it	ne
 80052c6:	2300      	movne	r3, #0
 80052c8:	eba6 0807 	sub.w	r8, r6, r7
 80052cc:	608b      	str	r3, [r1, #8]
 80052ce:	f1b8 0f00 	cmp.w	r8, #0
 80052d2:	dd9c      	ble.n	800520e <__sflush_r+0x1a>
 80052d4:	6a21      	ldr	r1, [r4, #32]
 80052d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80052d8:	4643      	mov	r3, r8
 80052da:	463a      	mov	r2, r7
 80052dc:	4628      	mov	r0, r5
 80052de:	47b0      	blx	r6
 80052e0:	2800      	cmp	r0, #0
 80052e2:	dc06      	bgt.n	80052f2 <__sflush_r+0xfe>
 80052e4:	89a3      	ldrh	r3, [r4, #12]
 80052e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052ea:	81a3      	strh	r3, [r4, #12]
 80052ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80052f0:	e78e      	b.n	8005210 <__sflush_r+0x1c>
 80052f2:	4407      	add	r7, r0
 80052f4:	eba8 0800 	sub.w	r8, r8, r0
 80052f8:	e7e9      	b.n	80052ce <__sflush_r+0xda>
 80052fa:	bf00      	nop
 80052fc:	dfbffffe 	.word	0xdfbffffe

08005300 <_fflush_r>:
 8005300:	b538      	push	{r3, r4, r5, lr}
 8005302:	690b      	ldr	r3, [r1, #16]
 8005304:	4605      	mov	r5, r0
 8005306:	460c      	mov	r4, r1
 8005308:	b913      	cbnz	r3, 8005310 <_fflush_r+0x10>
 800530a:	2500      	movs	r5, #0
 800530c:	4628      	mov	r0, r5
 800530e:	bd38      	pop	{r3, r4, r5, pc}
 8005310:	b118      	cbz	r0, 800531a <_fflush_r+0x1a>
 8005312:	6a03      	ldr	r3, [r0, #32]
 8005314:	b90b      	cbnz	r3, 800531a <_fflush_r+0x1a>
 8005316:	f7ff f9a9 	bl	800466c <__sinit>
 800531a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0f3      	beq.n	800530a <_fflush_r+0xa>
 8005322:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005324:	07d0      	lsls	r0, r2, #31
 8005326:	d404      	bmi.n	8005332 <_fflush_r+0x32>
 8005328:	0599      	lsls	r1, r3, #22
 800532a:	d402      	bmi.n	8005332 <_fflush_r+0x32>
 800532c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800532e:	f7ff fb92 	bl	8004a56 <__retarget_lock_acquire_recursive>
 8005332:	4628      	mov	r0, r5
 8005334:	4621      	mov	r1, r4
 8005336:	f7ff ff5d 	bl	80051f4 <__sflush_r>
 800533a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800533c:	07da      	lsls	r2, r3, #31
 800533e:	4605      	mov	r5, r0
 8005340:	d4e4      	bmi.n	800530c <_fflush_r+0xc>
 8005342:	89a3      	ldrh	r3, [r4, #12]
 8005344:	059b      	lsls	r3, r3, #22
 8005346:	d4e1      	bmi.n	800530c <_fflush_r+0xc>
 8005348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800534a:	f7ff fb85 	bl	8004a58 <__retarget_lock_release_recursive>
 800534e:	e7dd      	b.n	800530c <_fflush_r+0xc>

08005350 <__swhatbuf_r>:
 8005350:	b570      	push	{r4, r5, r6, lr}
 8005352:	460c      	mov	r4, r1
 8005354:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005358:	2900      	cmp	r1, #0
 800535a:	b096      	sub	sp, #88	; 0x58
 800535c:	4615      	mov	r5, r2
 800535e:	461e      	mov	r6, r3
 8005360:	da0d      	bge.n	800537e <__swhatbuf_r+0x2e>
 8005362:	89a3      	ldrh	r3, [r4, #12]
 8005364:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005368:	f04f 0100 	mov.w	r1, #0
 800536c:	bf0c      	ite	eq
 800536e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005372:	2340      	movne	r3, #64	; 0x40
 8005374:	2000      	movs	r0, #0
 8005376:	6031      	str	r1, [r6, #0]
 8005378:	602b      	str	r3, [r5, #0]
 800537a:	b016      	add	sp, #88	; 0x58
 800537c:	bd70      	pop	{r4, r5, r6, pc}
 800537e:	466a      	mov	r2, sp
 8005380:	f000 f848 	bl	8005414 <_fstat_r>
 8005384:	2800      	cmp	r0, #0
 8005386:	dbec      	blt.n	8005362 <__swhatbuf_r+0x12>
 8005388:	9901      	ldr	r1, [sp, #4]
 800538a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800538e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005392:	4259      	negs	r1, r3
 8005394:	4159      	adcs	r1, r3
 8005396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800539a:	e7eb      	b.n	8005374 <__swhatbuf_r+0x24>

0800539c <__smakebuf_r>:
 800539c:	898b      	ldrh	r3, [r1, #12]
 800539e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80053a0:	079d      	lsls	r5, r3, #30
 80053a2:	4606      	mov	r6, r0
 80053a4:	460c      	mov	r4, r1
 80053a6:	d507      	bpl.n	80053b8 <__smakebuf_r+0x1c>
 80053a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80053ac:	6023      	str	r3, [r4, #0]
 80053ae:	6123      	str	r3, [r4, #16]
 80053b0:	2301      	movs	r3, #1
 80053b2:	6163      	str	r3, [r4, #20]
 80053b4:	b002      	add	sp, #8
 80053b6:	bd70      	pop	{r4, r5, r6, pc}
 80053b8:	ab01      	add	r3, sp, #4
 80053ba:	466a      	mov	r2, sp
 80053bc:	f7ff ffc8 	bl	8005350 <__swhatbuf_r>
 80053c0:	9900      	ldr	r1, [sp, #0]
 80053c2:	4605      	mov	r5, r0
 80053c4:	4630      	mov	r0, r6
 80053c6:	f7ff fbb5 	bl	8004b34 <_malloc_r>
 80053ca:	b948      	cbnz	r0, 80053e0 <__smakebuf_r+0x44>
 80053cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053d0:	059a      	lsls	r2, r3, #22
 80053d2:	d4ef      	bmi.n	80053b4 <__smakebuf_r+0x18>
 80053d4:	f023 0303 	bic.w	r3, r3, #3
 80053d8:	f043 0302 	orr.w	r3, r3, #2
 80053dc:	81a3      	strh	r3, [r4, #12]
 80053de:	e7e3      	b.n	80053a8 <__smakebuf_r+0xc>
 80053e0:	89a3      	ldrh	r3, [r4, #12]
 80053e2:	6020      	str	r0, [r4, #0]
 80053e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e8:	81a3      	strh	r3, [r4, #12]
 80053ea:	9b00      	ldr	r3, [sp, #0]
 80053ec:	6163      	str	r3, [r4, #20]
 80053ee:	9b01      	ldr	r3, [sp, #4]
 80053f0:	6120      	str	r0, [r4, #16]
 80053f2:	b15b      	cbz	r3, 800540c <__smakebuf_r+0x70>
 80053f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053f8:	4630      	mov	r0, r6
 80053fa:	f000 f81d 	bl	8005438 <_isatty_r>
 80053fe:	b128      	cbz	r0, 800540c <__smakebuf_r+0x70>
 8005400:	89a3      	ldrh	r3, [r4, #12]
 8005402:	f023 0303 	bic.w	r3, r3, #3
 8005406:	f043 0301 	orr.w	r3, r3, #1
 800540a:	81a3      	strh	r3, [r4, #12]
 800540c:	89a3      	ldrh	r3, [r4, #12]
 800540e:	431d      	orrs	r5, r3
 8005410:	81a5      	strh	r5, [r4, #12]
 8005412:	e7cf      	b.n	80053b4 <__smakebuf_r+0x18>

08005414 <_fstat_r>:
 8005414:	b538      	push	{r3, r4, r5, lr}
 8005416:	4d07      	ldr	r5, [pc, #28]	; (8005434 <_fstat_r+0x20>)
 8005418:	2300      	movs	r3, #0
 800541a:	4604      	mov	r4, r0
 800541c:	4608      	mov	r0, r1
 800541e:	4611      	mov	r1, r2
 8005420:	602b      	str	r3, [r5, #0]
 8005422:	f7fb fe59 	bl	80010d8 <_fstat>
 8005426:	1c43      	adds	r3, r0, #1
 8005428:	d102      	bne.n	8005430 <_fstat_r+0x1c>
 800542a:	682b      	ldr	r3, [r5, #0]
 800542c:	b103      	cbz	r3, 8005430 <_fstat_r+0x1c>
 800542e:	6023      	str	r3, [r4, #0]
 8005430:	bd38      	pop	{r3, r4, r5, pc}
 8005432:	bf00      	nop
 8005434:	200002cc 	.word	0x200002cc

08005438 <_isatty_r>:
 8005438:	b538      	push	{r3, r4, r5, lr}
 800543a:	4d06      	ldr	r5, [pc, #24]	; (8005454 <_isatty_r+0x1c>)
 800543c:	2300      	movs	r3, #0
 800543e:	4604      	mov	r4, r0
 8005440:	4608      	mov	r0, r1
 8005442:	602b      	str	r3, [r5, #0]
 8005444:	f7fb fe58 	bl	80010f8 <_isatty>
 8005448:	1c43      	adds	r3, r0, #1
 800544a:	d102      	bne.n	8005452 <_isatty_r+0x1a>
 800544c:	682b      	ldr	r3, [r5, #0]
 800544e:	b103      	cbz	r3, 8005452 <_isatty_r+0x1a>
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	bd38      	pop	{r3, r4, r5, pc}
 8005454:	200002cc 	.word	0x200002cc

08005458 <_sbrk_r>:
 8005458:	b538      	push	{r3, r4, r5, lr}
 800545a:	4d06      	ldr	r5, [pc, #24]	; (8005474 <_sbrk_r+0x1c>)
 800545c:	2300      	movs	r3, #0
 800545e:	4604      	mov	r4, r0
 8005460:	4608      	mov	r0, r1
 8005462:	602b      	str	r3, [r5, #0]
 8005464:	f7fb fe60 	bl	8001128 <_sbrk>
 8005468:	1c43      	adds	r3, r0, #1
 800546a:	d102      	bne.n	8005472 <_sbrk_r+0x1a>
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	b103      	cbz	r3, 8005472 <_sbrk_r+0x1a>
 8005470:	6023      	str	r3, [r4, #0]
 8005472:	bd38      	pop	{r3, r4, r5, pc}
 8005474:	200002cc 	.word	0x200002cc

08005478 <_init>:
 8005478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800547a:	bf00      	nop
 800547c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800547e:	bc08      	pop	{r3}
 8005480:	469e      	mov	lr, r3
 8005482:	4770      	bx	lr

08005484 <_fini>:
 8005484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005486:	bf00      	nop
 8005488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800548a:	bc08      	pop	{r3}
 800548c:	469e      	mov	lr, r3
 800548e:	4770      	bx	lr
